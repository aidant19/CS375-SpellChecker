Analysis of AlgorithmsCS  Fall Project DueBY pm onSaturday Nov Project  Recursion and LogicIn this assignment youll work in teams of four to design algorithms for working with propositional logic expressions and to use inductive arguments and recurrences to explain thecorrectness and complexity of recursive algorithms The goals of this project areto give you practice designing recursive algorithms and working with recursive definitionsto give you practice using inductive arguments and recurrences to explain correctnessand complexity of recursive algorithmsto give you practice thinking about and working with propositional logicto give you practice creating and giving a technical presentation andto give you practice working with other students as a teamThe Project AssignmentHere are the parts of this assignmentPropositional Logic Evaluation Programming languages as part of their workhave algorithms to evaluate boolean expressions Now its your turn Your team willdesign and explain an algorithm to evaluate propositional logic expressionsTheSatisfiability Problem The Satisfiability problem or SAT for short is aclassic CS problem Given a boolean expression is there any way to assign True orFalse to its variables to satisfy the expressionthat is to make it evaluate to TrueYour team will write an exhaustive search algorithm to solve this problemImprovements Your team will improve upon your exhaustive search algorithm forSATCreate and Give a Presentation Your team will present your work includingexplanations of correctness and complexity of your algorithmsThe project involves working with recursive algorithms so your correctness and complexity arguments will involve inductive arguments andrecurrences  There are things to do foreach part of the assignment as described individually belowAs usual in CS excessively inefficient or clunky algorithms may not receive full creditThat doesnt mean all algorithm designs must be optimally efficient but if your algorithmdoes substantially more work than a straightforward brute force approach might it may notearn full credit Please feel free to ask me clarifying questions about this if youd like Propositional Logic EvaluationProgramming languages need definitions of arithmetic and boolean logic expressions sothat a compiler or interpreter can check expressions for type correctness and evaluate themas part of computation The structures and definitions underlying this work are typicallyrecursive eg grammars that define what a valid arithmetic or boolean expression couldbe For this part of your project youll be given a recursive definition for propositionallogic expressionsexpressions that evaluate to True orFalse and youll create a recursivealgorithm to evaluate these expressions Our Definition of Propositional Logic ExpressionsPropositional logic expressionsor PLEs  for shortare combinations of variables and logical operators such that if we assign a value of either True orFalse to every variable theexpression would evaluate to either True orFalse  For examplesAny variable that we define as a propositional variable aboolean  in many programminglanguages is a valid PLE If we have a propositional variable pand assigned it thevalue True for instance it will evaluate to TrueAn expression such as  pandq is a valid PLE For instance if we assign pthe valueTrue andqthe value True pandq should evaluate to True because both pandqare trueAn expression built from smaller PLEs such as  pand  qor not r and q wouldevaluate to either True orFalse  depending on the values assigned to variables p qandr See belowFor this project well use four propositional operations to build PLEs from variablesnotandor and implies sometimes also called ifthen It is common to use truth tablesto describe what propositional operations do on their input argumentsie the semanticsof these operations For this project those standard descriptions and truth tables are presented as part of a Supplementary Document about Truth Tables available from our coursesProject Assignments websiteHeres an extremely important noteIt is essential that you understand the material on truth tables as part ofthis project As always please see me with any questions I recommend that youread and understand that document before continuing with the project  Recursive Definition of PLE SyntaxThe truth tables describe what our four propositional operators mean  in terms of whatvalues they evaluate to but to specify what your algorithm might take as input we alsoneed to define the full syntax of all possible expressions that might be evaluated by youralgorithm Heres a recursive definition of the syntax for valid propositional logic expressionsPLEs Base case Given an initial set of propositional variables eg p q r     allelements of that set are valid PLEs Important note In this context wewill use any single lowercase letter as a propositional variableRecursive  Inductive cases Lets say that the uppercase letters PandQstand for PLEs That is PandQeach stand for some syntactic expressioneg not  qorp unlike the lowercase letters that are variables withinPLEsThen the following are also PLEs not P PandQ PorQ Pimplies QNote that the parentheses are part of whats needed for valid syntax So forexample  pimplies  qand not  rorp is a syntactically correct PLE That would bedetermined by following the recursive definition with these stepsrandpare both valid PLEs  because they are propositional variables and the basecase of our definition says they are PLEs  Because randpare both PLEs  recursive case  of our definition above says thatrorp is a PLE Because  rorp is a PLE recursive case  says that not  rorp is a PLE Because qis aPLE because its a propositional variable thus a PLE by the basecase and not  rorp is a PLE recursive case  says that  qand not  rorp is aPLE Because pis aPLE shown above and  qand not  rorp is a PLE recursive case says that  pimplies  qand not  rorp is a PLEThis is the kind of thing that compilers  interpreters for programming languages doPlease see me if youd like to go over that chain of reasoning An Algorithm for Evaluating Propositional Logic ExpressionsFor this part of the project you will create an algorithm for evaluating PLEs using the syntaxand semantics given in the sections above Here are the input and output specifications thatyour algorithm must meetInput  A PLE P and a dictionarylike data structure Mthat assigns a truthvalue ie either True orFalse to every propositional variable that appears inP Each variable is assigned exactly one valueOutput  IfPis a propositional variable return the truth value assigned to it inM Otherwise return the truth value to which Pevaluates in accord with thepropositional operation truth tables and treating every variable appearing in Pas evaluating to the value associated with it in MAs a very small example if Massigns  pTrue qTrue then variables pandqevaluatetoTrue and PLE  pandq evaluates to True For more examples of evaluating a PLE inaccord with our truth tables and an assignment of truth values to variables please see theSome example exercises section at the end of our Supplementary Document about TruthTables and semantics and see Section  below in this document And as always please feelfree to see me with any questions about evaluating PLEsYour algorithm must be recursive  following the two Zen Principles in lectureThe base case of your algorithm should correspond to the base case of the definition of thesyntax of PLEs your recursive cases should correspond to the recursive cases of the definitionof PLEs If your team would like to employ any other design structure for your recursivealgorithm please discuss it with me very early in your processit might not earn full crediton this projectYou may assume that you have the following functions to use in creating your algorithmThe function varValvM that returns the truth value assigned to propositional variablevinMThe function isVarP that takes a single PLE Pas input and returns True ifPis apropositional variable False otherwiseThe functions isNotP isAndP isOrP  and isImpliesP  each of which takes asingle PLE Pas its only input argument and returns True ifPLE Pis formed by applying the appropriate operation  notandorimplies  respectively to its argumentsthese functions return False otherwise ExamplesisVarpandqorrreturns False  because  pand  qorr is not a propositional variableisandpandqorrreturns True because PLE pand  qorr is formed asthe result of the andoperation on two arguments the first is p and the secondis qorrisorpandqorrreturns False because  pand  qorr is the result of theandoperation on two arguments The oroperation in that expression is nestedwithin one of the arguments to the andoperation so  pand  qorr is not formedbyorof two argumentsAs usual you will give an English description and pseudocode of your algorithm alongwith correctness and worstcase complexity argumentsFor correctness because this is a recursive algorithm be sure to give an inductive argument that concisely and convincingly explains that your algorithm is correct includingtermination on all inputs that meet the input specificationsFor complexity because this is a recursive algorithm be sure to set up and solve arecurrence that correctly expresses the worst case complexity of your algorithm Youwill have multiple choices about what nstands for in your complexity argument andyou will want to choose one that allows you to set up a recurrence that is relatively easyto solveyou may well not want it to stand for the length of the input as a numberof characters but instead stand for some other quantity that helpfully represents thesize of the input You should then explain for a fullcredit complexity argument whythe asymptotic complexity you get using that nis the same that youd get if you usedthe entire size of the input  Hint  Explain that the differences will be covered by theleading constant in the asymptotic definitionChoosing the quantity to represent by nmay require some thought If you have someoptions in mind but arent sure which to choose feel free to discuss them with meHINT For students who want to code this up in an actual programminglanguage    Go for it But you might want to start by creating your own newrecursive data type that corresponds to the recursive syntactic definition of PLEsabove For people who arent comfortable with recursion it might be tempting tojust treat a PLE as a string but please do not do so herethis project is focusedon building your toolkits for thinking about recursive definitions and algorithmsBesides which it might be harder to do this if you treat PLEs as strings In generalfor programming languages compilers have components that do lexing andparsingto translate from the original string of text of a program into the definitions thatunderlie the programming language we wont write those components here The Satisfiability ProblemThe Satisfiability problem or SAT for short is a classic CS problem Given a propositional logic expression is there any way to assign True orFalse to its variables to satisfythe expressionthat is to make it evaluate to True This problem has a wide range ofapplicationsit can be applied for playing games or solving puzzles such as Sudokus andit has a role in the theoretical foundations of algorithm complexity which well get to laterin the semesterand as part of this project youll write an exhaustive search algorithm tosolve this problemAs some useful terminology for any PLE P well say that a satisfying assignment is away of assigning truth values  True orFalse  to every propositional variable in Psuch thatPthen evaluates to True If it helps you can think of it as a dictionarylike data structurelike the one called Min the input specifications given in Section  above under the furtherrestriction that Pmust evaluate to True for that Mto be a satisfying assignment forPFor examplesFor PLE P pandq the assignment  pTrue qTrueisa satisfying assignment Moreover no other assignment of truth values to variables would be a satisfyingassignment for that P Do you see why Please ask me questions if it isnt clear toyouFor PLE P pimplies  qand not  rorp the assignment  pTrue qTrue rFalse  is not a satisfying assignment for P because as described in our SupplementaryDocument about Truth Tables Pevaluates to False under that assignmentFor the same PLE P pimplies  qand not  rorp the assignment  pFalse  qTrue rFalse isa satisfying assignment  rorp evaluates to False  so not  rorpevaluates to True so qand not  rorp evaluates to True and finallypimplies  qand not  rorp evaluates to TrueI didnt go through the steps in the individual evaluations of PLEs abovetheyre the sameidea as in our Supplementary Document about Truth Tables but please see me if there areany questions about themHere are the input and output specifications that your algorithm for the SAT problemmust meetInput  A PLE POutput True if there exists some way of assigning truth values to all propositional variables in Psuch that Pevaluates to True following the evaluationdescribed by our truth tables False otherwiseBecause you are creating an exhaustive search algorithm as in your previous projectProject  Loop Invariants Exhaustive Search and Beyond  please assume onceagain that you can use algorithms to create the relevant lists of all subsets or all permutationsto use in your exhaustive search with the given time and space complexitiesGenerateAllSubsets You may use a GenerateAllSubsetsS algorithm thathastime complexity nn and space complexity nn on input Sof size nGenerateAllPermutations You may use a GenerateAllPermutationsL algorithm that has time complexity nn and space complexity nn on input Lof size nPlease see Project  for the input  output specifications of these algorithmsAs usual you will give an English description and pseudocode of your algorithm for SATalong with correctness and worstcase complexity argumentsFor correctness Use the appropriate technique to explain correctness where needed Ifall or part of your exhaustive search algorithm is recursive give an inductive argumentif all or part of your algorithm is iterative you do not need to specify and formally usea loop invariant but your correctness argument should nonetheless be based on whatwe know to be true each time through the main loop of your algorithmFor complexity Again use the appropriate technique to explain correctness whereneeded If all or part of your exhaustive search algorithm is recursive you do notnecessarily need to solve a recurrence but you should give a concise and convincing complexity argument that is based on a recurrence that correctly expresses theworst case complexity if all or part of your algorithm is iterative give a concise andconvincing correctness argument based on its structure as usualYour algorithm and explanation should have enough details to make it clear that your teamfully understands all work needed for your solution That may include writing and explainingalgorithms for the following subroutines which would be part of your SAT algorithmA subroutine that returns a list of all propositional variables in a PLE PA subroutine that creates an assignment of truth values to all variables in Psuch thatsome specified ones are assigned the value True and the rest are assigned False These are notprimitive functions so if you want to use that functionality be sure to writealgorithms and input  output specifications for functions that give you that functionalityIMPORTANT NOTE If your team decides notto create and use these twosubroutines but instead to try a different approach for a SAT algorithm pleasediscuss that with me as soon as possibleYou may however assume that you are given functions for use in your algorithm that dostandard operations on lists and dictionarylike data structureseg creating and addingpairs to dictionaries adding elements to lists appending  extending lists as in PythonYou may also assume that those functions have reasonable time and space complexities butin your complexity arguments be clear to say what the complexities are of all functionsrelevant to the complexity of your algorithm for SATHINT Be sure that you understand what your algorithm is doing an exhaustivesearch over The input  output specifications are helpful that way You are given aPLE P so youre not looking for a PLE Pthat is true instead youre looking for asatisfying assignment for the PLE Pthat youre given ImprovementsAs you did in Project  after your team has worked together to arrive at a good exhaustivesearch algorithm in your work for Part  of this project your next step will be to improveupon that exhaustive search solutionPlease see Project  Section  for suggestions about how to think of improving algorithmefficiency Once again your team is especially encouraged not to restrict yourself to only thefirst or second of the three ways listed therespecialcase improvements can be very helpfuleven on very simpleseeming special casesYour team should propose one or two algorithms or modifications that improve uponyour exhaustive search SAT algorithm There are no fixed criteria for this project aboutexactly how much your improvements must improve upon your initial exhaustive search algorithm your team will earn more credit on this part of the project for improvements thatshow more depth of thought about the problem and its solutions achieve greater efficiencyhave greater impact for important special cases eg make it very efficient when used tosolve Sudokus apply more broadly to possible inputs and are more thoroughly and helpfully analyzed and described As with Project  I hope these criteria make intuitive senseto you and as always please feel free to ask me questionsHint You are advised notto try to come up with polynomialtime solutions for the generalcase of SAT PresentationFor Project  you were part of a team that gave a presentation  minutes in lengthFor this project you will instead give a presentation that is  minutes in length Asmany of us who frequently give presentations believe making a minute presentation isdifferent from making a minute presentation and its important to be able to do bothYour team will give a technical presentation about the algorithms youve created forthis project As you did for Project  create slides in PowerPoint Google Slides or someother application of your choice for your presentation hints and suggestions for technicalpresentations from Project  also apply here With only  minutes available for thispresentation however you may need to be selective about how many slides you create andhow much material they contain For an effective presentation your audience should havetime to read and process every slide presented to them so spending too little time on aslide may well result in an ineffective presentation For full credit your team must make aneffective presentation lasting between  minutes anything outside that range may notreceive full credit If you think your talk will be longer or shorter than that please discussthat with meI will be happy to help you find a good balance for your presentationYou should assume that your audience is at the level of CS students who are familiar withrecursive design the general form of inductive arguments and recurrences but who are notyet experts with them For example assume that your audience knows what an inductiveargument is and how it relates to recursion and what a recurrence is an how it relates to timecomplexity of recursive algorithms but would need to be walked through details involvingsetting up and solving a particular recurrence or how an inductive argument applies toa particular algorithm To the extent that you are explaining iterative algorithms pleasemake the same assumptions about your audiences familiarity with those concepts as you didfor Project  see the Project  assignment for details if needed You should also assumeyour audience has no previous knowledge of your algorithms or any problems involved andthey may not quickly grasp any subtletiesYour presentation should describe at least the followingOur definition of PLEsYour algorithm for evaluating PLEs and how it works Consider including at leastpart of a short example with enough context and content to fully illuminate how youralgorithm works for your audience See note below about including examplesYour algorithm for SAT and how it works including anything you think is particularlyinteresting about your approach to the problem Consider including at least part of ashort example with enough context and content to fully illuminate how your algorithmworks for your audience See note below about including examplesAt least one proposed improvement from Section  above Include a highlevel description of the improvement and a comparison that shows how much this improvesupon the exhaustive search algorithm Consider including enough of a short exampleto illuminate how it differs from your original exhaustive search algorithm See notebelow about including examplesComplexity and correctness results for your algorithms There may not be time in yourpresentation for full correctness and complexity arguments for every algorithm but toensure that your presentation is authoritative for your audience include at least thefollowing One correctness argument showing command of inductive arguments One complexity argument showing command of recurrences and solving them A correctness and complexity result not necessarily a full argument accompanied by a very brief highlevel explanation if not a longer explanation for eachalgorithm presentedDont worry about space complexity for your presentation unless you feel it is importantto understand interesting elements of your algorithmsIn a minute presentation there will likely not be time to go into deep details on anythingall explanations will need to be highlevel focusing on the essential details for enablingyour audience to understand your work Your writeup document should contain additionaldetails enabling your team to show full command of your work and describe importantcomponentsNOTE about including examples in this presentation It is expected that yourpresentation will have one or more illustrative examples to enable your audience to understand your algorithms You may need to be judicious in choosing your examples due to timeconstraints however perhaps using one example to illustrate multiple components of yourwork In  minutes there may not be time to include all the examples you might likeAs with the previous Project this is a team presentation and a class assignment soideally the entire team would learn about all parts of the topic being presented and not onlywould the workload be balanced among team members but it would also appear balancedto viewers For that reason your presentation should consist of each person presenting forroughly  minutes at a time followed by a different teammateso for example in a minute presentation each person on a fourperson team would take one shift of presentingfor roughly  minutes each This structure might require a conceptual topic to be splitamong multiple individuals in the presentation due to the impositions of time limits butthats part of the pedagogical benefit of thisit encourages more people to engage with moredifferent parts of the topic being presented Important note Presentations not followingthis structure will not receive full credit for this assignment If there are questions aboutwhats expected in terms of the division among teammates of time spent presenting pleaselet me knowThe default expectation is that you will record your presentation as a screen recording inZoom If you believe another option would be better for your team please see me aboutit as soon as possibleYour Accompanying WriteUp In addition to the presentation itself your team willcreate an accompanying writeup document which should enable your audience to fullyunderstand the work done for this project if they do not see your talk This document mustbe typed submitted in PDF and contain all important details especially those that you didnot have time to include in your talk itself It should contain at least the minimum neededfor a presentation of algorithmsPseudocode and English descriptions of every algorithm including separate pseudocode English descriptions for each improvement For each improvement include  sentences about how your team came up with the ideas behind that proposed improvementConcise and convincing highlevel correctness arguments and complexity analysesPlease use inductive arguments and recurrences when analyzing recursive algorithmsFor your teams proposed improvements you may not need to give a separate correctness argument for each improvement but if an improvement significantly affects theinductive arguments previously used to show correctness of the exhaustive search algorithm you do need to show that the improvement also solves the problem correctlywhich could involve a modified inductive argumentAs mentioned in Section  above to explain complexity for recursive algorithms forthis project you may not necessarily need to solve a recurrence but you should givea concise and convincing complexity argument that is based on a recurrence thatcorrectly expresses the worst case complexity For explaining complexity of iterativecomponents of algorithms give a concise and convincing explanation based on itsstructure as usualOverall please include everything needed to concisely demonstrate your command of relevantanalytical techniques and other concepts including recursive design inductive argumentsand recurrences Including relevant examples can also be helpful in communicating yourwork to your audience your writeup may allow you to include components in examples thattime constraints prohibited you from including in your presentationAs would be expected your grade will depend on the clarity readability and completeness of your writeup enabling readers to understand your work and demonstrating yourcommand of key concepts Depending on the margins  font size  etc of your documentyour writeup should probably be  pages in length Please keep it as concise as it can bewhile still containing all relevant information If your writeup is running longer or shorterthan that range please see me to check whether it contains unneeded material or too littlematerial writeups that are much too long or too short are not maximally effective and maynot receive full creditOverall for both the presentation and the writeup more credit will as expected begiven to submissions that demonstrate greater scope of work completed greater depth ofinsight in the work completed and more correct and effective presentations of the workAlthough no dress rehearsal is required for this project you are welcome to consult with meabout a draft of your presentation or writeupI will be happy to give you feedback aboutthe level of detail in the draft Submission InstructionsDeadline pm Nov  A designated submitter from each team should submitthree items by emailing them to me eaaroncolbyeduA PDF file with all of the slides used for the presentation Please put two slides perpage as is done for CS course lecture notes and name the fileCS Proj Slides Team INITIALSpdf The writeup document that accompanies your presentation which should be a PDFfile called CS Proj WriteUp Team INITIALSpdf A video file or link to it of your presentation Please put it in your Google Drivespace if its too large to simply include in an email Please name the fileCS Proj Presentation Team INITIALSmpAs usual INITIALS is to e replaced by the initials of the team members in the groupin the team assignments Eg if Eric Aaron and Stephanie Taylor were the teammatesa file from that team would be called CS Proj Slides Team EASTpdf Note the preferred mpformat If for any reason you cannot submit an mpvideoplease let me know as soon as possibleLateness policy To keep pace with the project assignments in CS it is importantthat this assignment be turned in promptlyand it is more important than usual with thisproject being due near the end of the semester For this project there will be a deductionof  for each day lateie  deduction for submitting up to  hours late deduction for submitting more than  hours late up to  hours etcup to a  deductionfor submitting up to  days  hours late After  days late submissions will receive a deduction Please submit your work promptlyAs always extenuating circumstances will be consideredplease contact me as soon aspossible if any extenuating circumstances are impeding your work on this project