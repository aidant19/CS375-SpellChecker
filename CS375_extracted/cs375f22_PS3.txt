analysis of algorithms  cs  fall   problem set   due at the beginning of class wednesday november    for this assignment standard file naming conventions apply please submit your type- written answers in a pdf file named cs ps userid pdf where userid is re- placed by your full colby userid and submit it to your submittedwork folder  please reach out to me right away with any questions or concerns about this   important some of these exercises may build upon topics covered in our oct   class meeting they are included here early so you can see all of the exercises on this assignment    please recall the essential general style guidelines for writing algorithms in cs  including restrictions on break and other flow-of-control statements as presented on ps  unless otherwise specified they apply for all work in cs    please recall the guidelines for algorithms given on previous hw assignment sheets   they continue to apply to all hws in cs    in general there may be multiple correct ways of presenting an algorithm although excessively inefficient or inelegant solutions may not receive full credit  if you have questions about whether your proposed solution is excessively inefficient or inelegant please ask your prof    exercises on this problem set use the llist data structure as defined in our lecture notes  as with all llist exercises in cs the only functions you can use as prim- itives are the three given in the definition first rest cons and the check if a list is empty  you must write any others yourself for these exercises along with correctness arguments  this is not intended to suggest that any new or additional llist functions are necessary to solve any particular exercise if you find them helpful in some cases however this is intended to clarify that you are welcome to create helper functions or other new functions for use on llists to use as part of your solutions    exercises on this problem set require inductive arguments of correctness  please see the lecture notes of oct   and oct   for reminders and please feel free to see me with any questions   a general note for cs when writing up your homework please present your answers neatly and explain your answers clearly giving all details needed to make your answers easy to understand  graders may not award full credit to incomplete or hard to understand solutions  clear communication is the point on every assignment   in general in cs unless explicitly specified otherwise answers should be accompa- nied by explanations  answers without explanations may not receive full credit  please feel free to ask me any questions about explanations that might come up    exercises    using our ibt data structure come up with a recursive algorithm that returns the  sum of the elements in a tree    input intbintree t  output the sum of all of the integers in tree t  what did you decide that the algorithm should return on an empty tree as input explain your reasoning for that decision a sentence or so could be sufficient and give an inductive explanation of the algorithm's correctness  you do not need to give a complexity argument for this algorithm     common elements with problem set  in contrast to the iterative algorithm you created for hw here design a recursive algorithm to find all the common ele- ments in two sorted llists of numbers  please be sure to use the llist data structure from class for example for input lists     and       the output should be the list     what is the maximum number of comparisons between list elements your algorithm makes if the lengths of the two input lists are m and n respectively  please give both a pseudocode description and an english description to make it as easy as possible to understand the algorithm and give an inductive explanation of your algorithm's correctness  as usual for these llist exercises the only functions you can use as primitives are the three given in the definition and the check if a list is empty  you must write any others yourself for this exercise along with correctness arguments  this does not however suggest that any are necessary to solve this problem you do not need to give a complexity argument for this algorithm   note exercises below refer to nested llists an llist can in the usual way have an llist as an element  for example       is a valid llist   for terminology we say that an element of an llist is top-level to distinguish it from elements of an llist nested inside another llist  for example in llist        is top-level while   and both instances of  are not top-level  please talk with your prof  if there are any questions about this definition     using the llist data structure write a recursive algorithm for the llremoveall prob-  lem on lists   input item x and llist l  assume x is not a list   output list l containing exactly the elements of l    not equal to x in the order in which they occur in l see examples below  this removes all and only top-level occurrences of x in l  for examples   llremoveall       returns       llremoveall       returns        note  that  is not top-level     llremoveall        returns      note that    is top-level   llremoveall        returns        only  the top-level 's are removed  as usual give a short english explanation of correctness because the algorithm is recursive make sure it's an inductive explanation  you do not need to give a complexity argument for this algorithm     unlike the llremoveall function which only removes an item that is top-level in an llist an lldeepremoveall function removes an item at any level of nesting  using the llist data structure write a recursive algorithm for the lldeepremoveall problem on lists   input item x and llist l  assume x is not a list   output list l with the same structure and elements as l    in that order except all occurrences of x are removed at any level of nesting in l see examples below  for examples   lldeepremoveall        returns        lldeepremoveall       returns        lldeepremoveall             returns            lldeepremoveall    returns        for this exercise you will also need to test whether or not an element in a list is a list itself  for this you can use the following or something very similar in your pseudocode to test whether or not an item x is a list  if typex  list   if x is a list     else   if x is not a list     as usual give a short english explanation of correctness because the algorithm is recursive make sure it's an inductive explanation  you do not need to give a complexity argument for this algorithm     