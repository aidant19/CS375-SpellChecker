cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   business   grading update   ps returned   project started grades probably not returned until end of break    please let me know if you'd like feedback sooner    i welcome feedback about grader feedback let's talk   problem set  due oct      see note about break statements please avoid them in cs   please get started early and ask questions early   another sa may be out soon i'll email if so   revisions on sa where applicable   this is foundational material   please get to them soon to help with learning for the course  cs --     cs --   business pt     office hours will be cancelled wednesday oct     i will not be able to stay late for my hours on tuesday oct   either   class will be held on wednesday oct   please attend  recall the n entry in our table of common complexity classes  exponential time and the power set of a set s   when we think of exponential time or more generally   something of size  length n we often think of all subsets  of a set of size n  consider set s of size n  how many subsets of s are there  as a small example consider s     n    what are all the  subsets           there are  of them   the set of all subsets of s is called the power set of s     exhaustive search brute force   how many subsets are there of a given set s    say for notation s has n elements  vocab the set of all  subsets of s is called  the power set of s   the power set of s has n elements   what does this tell us about the asymptotic complexity of  an exhaustive search algorithm over all subsets of a set  remember exhaustive search implies that it looks at   all elements at least in worst case of a collection   will we describe complexity using big-o  or   exhaustive search brute force   how many subsets are there of a given set s    say for notation s has n elements  vocab the set of all  subsets of s is called  the power set of s   the power set of s has n elements   what does this tell us about the asymptotic complexity of  an exhaustive search algorithm over all subsets of a set   how many orderings or permutations are there of all   elements in a list l  a  an  cs --     all permutations of a list l  consider list l  aaaan of length n  how many permutations are  there of l i e  ways to put all the elements into some list in any order   as a small example consider l     n    what are all the  permutations    there are  of them   how many would there be for list l' hint it's not just  more  recall the n entry in our table of common complexity classes  factorial time and  all permutations of a list l   when we think of factorial time or more generally   something of size  length n we often think of all  permutations of a list of length n  consider list l  aaaan of length n  how many permutations are  there of l i e  ways to put all the elements into some list in any order   as a small example consider l     n    what are all the  permutations    there are  of them   how many would there be for list l' answer there are    times more do you see why think of how many ways a  could be  inserted into list    there are  possible places  cs --     exhaustive search brute force   how many subsets are there of a given set s    say for notation s has n elements  vocab the set of all  subsets of s is called  the power set of s   the power set of s has n elements   what does this tell us about the asymptotic complexity of  an exhaustive search algorithm over all subsets of a set   how many orderings or permutations are there of all   elements in a list l  a  an   a list of length n has n permutations   what does this tell us about the asymptotic complexity of   an exhaustive search algorithm over all orderings of  elements in a list   will we describe complexity using big-o  or   exhaustive search brute force   how many subsets are there of a given set s   vocab the set of all  subsets of s is called  the power set of s   say for notation s has n elements   the power set of s has n elements   so exhaustive search over all subsets is faster than over all permutations   but both are really slow   how many orderings or permutations are there of all   elements in a list l  a  an   a list of length n has n permutations   a take-home message for large n when things can be ordered a list  there's a lot more possibilities than when things can't be ordered a set   cs --     now that we've looked at those brute-force measures let's answer the   question here how many possible itineraries are there  the cs guitar genius tour   guitarists steve vai and pasquale grasso both faves of your   cs prof  are finally going on tour together  there are n possible venues they could play on their tour  disclaimer they  aren't really  touring together     they could play any number of them from  to n   they have a list ordering of the n venues in mind the order in which it   makes sense to travel to them   so if the ordering is v v  vn from first to last they would never play   vy before vx if y  x  larger numbers are always later in the ordering    but they could skip or play any or all venues   we want to figure out the best tour itinerary for   them  for now we'll use a brute force method of  checking all possible tour itineraries    how many possible itineraries are there  now that we've looked at those brute-force measures let's answer the   question here how many possible itineraries are there  the cs guitar genius tour   guitarists steve vai and pasquale grasso both faves of your   cs prof  are finally going on tour together  there are n possible venues they could play on their tour  disclaimer they  aren't really  touring together     they could play any number of them from  to n   they have a list ordering of the n venues in mind the order in which it   makes sense to travel to them   so if the ordering is v v  vn from first to last they would never play   vy before vx if y  x  larger numbers are always later in the ordering    but they could skip or play any or all venues   we want to figure out the best tour itinerary for   them  for now we'll use a brute force method of  checking all possible tour itineraries    how many possible itineraries are there n one   for each set of venues that could be chosen  cs --     cs --     exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s  exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  n  lens  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s   invariant outer loop    before index i l contains all subsets formed from elts s  si-    after index i l contains all subsets formed from elts s  si for i   to n-  exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  n  lens l       note relation to invariant below  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s   invariant outer loop    before index i l contains all subsets formed from elts s  si-    after index i l contains all subsets formed from elts s  si for i   to n-  cs --     exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  n  lens l       note relation to invariant below  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s   invariant outer loop    before index i l contains all subsets formed from elts s  si-    after index i l contains all subsets formed from elts s  si for i   to n-  a sequence from a bigger  number to a smaller number  like s     s- is considered  empty containing no elements  exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  n  lens l       note relation to invariant below  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s   invariant outer loop    before index i l contains all subsets formed from elts s  si-    after index i l contains all subsets formed from elts s  si for i   to n-  templ     empty list will store subsets containing si m  lenl  inner loop loops over l create new subsets containing si   what's the length of templ here when it's fully filled in add all of templ to l     what's the length of l after this operation  cs --     exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  n  lens l       note relation to invariant below  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s  let's go  through a  small  example  how does  this algo work on  s   invariant outer loop    before index i l contains all subsets formed from elts s  si-    after index i l contains all subsets formed from elts s  si for i   to n-  templ     empty list will store subsets containing si m  lenl  inner loop loops over l create new subsets containing si for j   to m-  temps  deepcopyl j    why deepcopy add si to temps add temps to list templ   what's the length of templ here when it's fully filled in add all of templ to l     what's the length of l after this operation  exponential-ish generate all subsets   to search through all subsets of a set s something first needs to   generate all subsets of s  let's write an algo that does that   what is its time  space complexity  generate-all-subsetss  n  lens l       note relation to invariant below  generate-all-subsetss  input s a set of n elements    s  ssssn-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering  output l a set of all subsets of s  what is the  time   space  com- plexity of this  algo   invariant outer loop    before index i l contains all subsets formed from elts s  si-    after index i l contains all subsets formed from elts s  si for i   to n-  templ     empty list will store subsets containing si m  lenl  inner loop loops over l create new subsets containing si for j   to m-  temps  deepcopyl j    why deepcopy add si to temps add temps to list templ   what's the length of templ here when it's fully filled in add all of templ to l     what's the length of l after this operation  cs --     cs --     factorial-ish all permutations   write an algo to generate all permutations of an input list l   what are its input  output specifications   how does your algo solve the problem  what loop invariant would be helpful to clarify  explain your algorithm design   what is its time  space complexity  this will be assigned to you as a smaller assignment due after break  