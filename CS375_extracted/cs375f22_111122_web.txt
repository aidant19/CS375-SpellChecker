CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  Apologies for missing class I really didnt want to  Project  Grading update  In progress but will be slow catching up from il lness may take a while  Please meet with me if youd like prompt feedback on any part of Project   PS due pm today  Expect PS out soon  Due no sooner than  week after its assigned  Project  out  Will discuss today  Due Nov  deadline may be slightly extended CS   For Proj Evaluating Expressions  How do we as people evaluate an arithmetic expression like     Do we read left to right Not really For Proj Evaluating Expressions  How do we as people evaluate an arithmetic expression like     Do we read left to right Not really  There are lots of components to that and we first  evaluate each component and then combine them to evaluate the en tire expression CS   For Proj Evaluating Expressions  How do we as people evaluate an arithmetic expression like     Do we read left to right Not really  There are lots of components to that and we first  evaluate each component and then combine them to evaluate the en tire expression  Its as if we had an Evaluate  function   And applied it recursively  We use it on each component then combine to get our end result For Proj Evaluating Expressions  How do we as people evaluate an arithmetic expression like     Do we read left to right Not really  There are lots of components to that and we first  evaluate each component and then combine them to evaluate the en tire expression  Its as if we had an Evaluate  function   And applied it recursively  We use it on each component then combine to get our end result  Evaluating propositional logic expressions works the same way in general  Lets get formally introduced to propositional logic CS   Propositions  Defn proposition  a statement that has the property of truth or falsity  Propositions are the key elements to represent analyze or explain declarative knowledge Propositions Washington DC is the capital of the USA Waterville is the capital of Maine           NonPropositions What time is it Pass the salt x     xy  z presuming values for x y z are not given  known The first and third of these are true the second and fourth are false Propositional operators  Recall proposition  a statement that has the property of truth or falsity  Often we use propositional letters or variables  to represent propositions eg pstands for Poughkeepsie is the capital of NY  There are several operators sometimes called boolean operators  that can construct new propositions from old ones Negation  not if Pis a proposition not P is a proposition Conjunction and P and Q Disjunction or P or Q Implication if  then if P then Q CS   Propositional operator Negation  Whatever the value of p True or False the value of proposition not p written p is the opposite  If pis Today is Monday pis It is not the case that today is Monday or more simply Today is not Monday  Negation can be expressed with a truth table p p proposition truth values TFFTPropositional operator Conjunction  Conjunctionthe and operator  Whatever the values of propositions p q conjunction p and q written p  q or p  q  is also a proposition  If pis Today is Monday and qis It is snowing today then p  q is Today is Monday and it is snowing today p  q is true on snowy Mondays and false on any day that is not Monday and on any day that is Monday but not snowi ng  Conjunction values as a truth table p qTTFFTFTFTFFFpq CS   Propositional operator Disjunction  Disjunctionthe or operator  Whatever the values of propositions p q disjunction p or q written p vqor p  q  is also a proposition  If pis Today is Monday and qis It is snowing today then p vqis Today is Monday or it is snowing today p vq is true on any day that is a Monday or on which it is snowing including snowy Mondays it is not exclusive   and false only on days that are not Mondays on which it is not snowing  Disjunction values as a truth table p qTTFFTFTFTTTFp vqThe nonexclusive sense of or can be a bit subtle Exercise  What would the exclusiveor operators truth table look like It turns out there is such an operator and its commonly used in logic The English word or is a complicated thing to understand Propositional operator Implication  Implicationthe ifthen operator also called conditional  Whatever the values of propositions p q implication if p then q written p q is also a proposition  If pis Today is Monday and qis It is snowing today then p qis If today is Monday then it is snowing today  Vocabulary in p q pis called the hypothesis or antecedent  and qis called the conclusion or consequent   Implication values as a truth table p qTTFFTFTFTFTTp qReally These are the truth values for implication They look like the values for  p v q  Exercise  Check for yourselves CS   Sounds ify Material Implication  Meaning for implication symbol in propositional logic is referred to as material implication  It says that pqis False exactly when pis True and qis False  Not the same as every meaning of ifthen in English but its whats used in logic p qTTFFTFTFTFTTp qExamples of material implication and natural language usage Politician says If I am elected then I will fix the environment False if the speaker is elected and doesnt fix the environment True if eg the speaker doesnt get elected If today is Friday then      True no matter what day it is If today is Friday then      True except on Fridays even though      is false Exercise Evaluating propositional logic expressions  Defn Propositions are boolean valued expressionsie their values are either True or False  Propsotional expressions are evaluated like any other mathematical expressions Examples  Let p  True q  False r  True  What do the following expressions evaluate to  p  r  q v False  p q  r v p  q  p v r p v q  r  True r CS   For Proj Satisfiability  and Assignments of Truth Values to Variables  An assignment of values to variables is what you think it is Something like p  True q  False r  True is as assignment of truth values to the variables p q r  We say a propositional logic expression PLE  Pis satisfiable if there is an assignment of truth values to the variables in P so that Pevaluates to True Examples  Let p  True q  False r  True  What do the following expressions evaluate to  p  r  q v False  p q  r v p  q  p v r p v q  r  True r Business Project   Project  out due Nov   Deadline may be slightly extended  Parts of Project   Recursive Algorithm to Evaluate Propositional Log ic Expressions  Your team will create an algorithm to do the kind of thi ng a programming language doesevaluate propositional logic boolean expressi ons  Exhaustive Search Algorithm for Satisfiability  The Satisfiability problem SAT  for short asks if there is a way for a propositi onal logic expression to be made True Your team will create an exhaustive sear ch algorithms to solve this problem  Improvements  Your team will improve upon your exhaustive searc h algorithm  Create and Give a Presentation  Your team will present work from the previous three parts of the assignment using recurrences and inductive arguments loop invariants where appropriate Have you read through Proj yet Please note the separate supplementary document about Truth Tables CS   Solving Recurrences  Well cover three common techniques for solving recurrencesie getting  or O bounds on the solution Unwinding or backward substitution  Unroll the recurrence until it reaches a base case then count  analyze the cost represented Recursiontree method  Represent costs as nodes in a tree and analyze total cost Master method  Solve recurrences of the form Tn  aTnb  fn We already did an example of unwinding and well do another one soon CS   Unwinding  An example Solve Tn  Tn  n Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n  By that same definition Tn  Tn  n   Tn  n  So by plugging that in Tn  Tn  n   n  What would the next steps be in this unwinding p rocess  Where would it stop This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow What information is missing from this recurrence w hich we will need to be able to solve it Unwinding  An example Solve Tn  Tn  n Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n What information is missing from this recurrence w hich we will need to be able to solve it Tn Tn Tn Tn  Tn  n  Tn  n  Tn  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n     Do you see a pattern here And when does this unwin ding end This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow CS   Unwinding  An example Solve Tn  Tn  n  For a base case lets use T   or  if we want Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n Tn Tn Tn Tn  Tn  n  Tn  n  Tn  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n             kk kkTn Tn Tn Tn kk kk  kn   kn   kn   kn     The kth step shown here illustrates the pattern that holds for any relevant k It can help with our analysis to show this in our work This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow Unwinding  An example Solve Tn  Tn  n  For a base case lets use T   or  if we want Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n Tn Tn Tn Tn  Tn  n  Tn  n  Tn  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n             kk kkTn Tn Tn Tn kk kk  kn   kn   kn   kn      nT  lg nn  nT  lg nn  nT  lg nn  nT  lg nn     n lg n The lg n term comes because the recurrence unwinds lg n times before hitting the base case do you see why This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow CS   Recursion Trees An Overview  Recursion trees can represent how a recursive algorithm  Breaks input down into recursive calls on subprob lems  Or equivalently  combines recursive calls into a solution on the o riginal problem  Heres an example from CLRS Mergesort  Each node shows input size at that level of recursive calls  Here original input size  breaks into subproblems of size  etc This example shows the recursion going up the treecombining solutions Note that the input sizes at each node would be the same for the recursion going down the tree breaking into subproblems CS   Recursion Trees For Solving TimeComplexity Recurrences  When using recursion trees to solve for time complexity though we dont need quite that much information  We do need the structure showing how the algo divides and  recombines its inputs  We do need the input size at each node  We do not need details about exactly what the input is at each node  What we need for each node of the tree  Input size at each node  A way to represent the work done ie the runtim e at that node of the tree not including any other work done above or below i t Recall Asymptotic complexity is in terms of input size n not individual inputs of a given size Lets do an example RecursionTree Method  An example Mergesort Tn  n    T n if  nTn sorting both halves       nmerging otherwise      Whats the cost at each treelevel ie not counting levels below it Whats the recursion tree structure CS   RecursionTree Method  An example Mergesort Tn  n    T n if  nTn sorting both halves       nmerging otherwise      Whats the cost at each treelevel ie not counting levels below it Whats the recursion tree structure Set up a tree to total up the work done by the algorithm Tree structure for complexity analysis corresponds to tree of recursive calls by the algorithm Total work by the algorithm Sum of work at all lev els of the tree RecursionTree Method  An example Mergesort Tn Tn  Tn Tn  Tn  Tn  Tn T  T  T  T  T  T  T  T nTn   kn n k n   kn        log nn log n    T n if  nTn sorting both halves       nmerging otherwise      Recursion tree for algorithm Total work done CS   Recursion Tree Exercises  Use the recursiontree method to solve the following recurrences for n    Tn  Tn  n if n    if n    assume n is a power of   Tn  Tn  n if n    if n    assume n is a power of   Tn  Tn  n if n    if n   assume n is a power of   Tn  Tn  n if n    if n   assume n is a power of  Keep in mind the formula for the sum of a geometric  series from Appendix A in ci c n    c for constant c neq  Recursion Tree Exercises  Use the recursiontree method to solve the following recurrences for n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Those last three examples illustrate three different cases  The amount of work per level increases with the most work done at the leaves of the tree In fact it increases geometricallythis means see me for a proof if youd like the total amount of work is work done at leaves CS   Recursion Tree Exercises  Use the recursiontree method to solve the following recurrences for n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Those last three examples illustrate three different cases  The amount of work per level increases with the most work done at the leaves of the tree  The amount of work per level decreases with the most work done at the root In fact it decreases geometricallythis means see me for a proof if youd like the total amount of work is work done at root Recursion Tree Exercises  Use the recursiontree method to solve the following recurrences for n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Those last three examples illustrate three different cases  The amount of work per level increases with the most work done at the leaves of the tree  The amount of work per level decreases with the most work done at the root  The amount of work per level is constantand there  are            lg n   levels in the tree There are lg n   levels in all three cases really but its of particular importance here Note These three cases are importantwell come back to them on a later slide 