CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  Thank you to those who participated last Wednesday  Ill look over feedback and have a few words to sa y on Monday  Grading update  PS updategrades probably returned by end of day F riday  Project startedgrades probably not returned until  weekend  Please let me know if youd like feedback sooner   Coming soon as CS assignments  SA likely out today due Monday  PS out soon likely due date Oct   Proj out soon likely due date in early November  Revisions on SA where applicable  This is foundational material  Please get to them soon to help with learning for  the course CS   Factorialish All Permutations  Write an algo to generate all permutations of an input list L  What are its input  output specifications  How does your algo solve the problem  What is its time  space complexity What loop invariant would be helpful to clarify  explain your algorithm design This was your Smaller Assignment due by the beginn ing of todays class What loop invariant did you use Lets look at some invariants and then use one of them to develop an algoFactorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to nCS   Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to nFactorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to nA sequence from a bigger number to a smaller number like s  s  is considered emptycontaining no elements CS   Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m PSL  tempPSL  Whats the length of PSL after this operation Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last PSL  tempPSL  Whats the length of PSL after this operation CS   Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation When siis added it could be before the first element in a previously formed list or after the last Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation Lets go through a small example How does this algo work on S CS   Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation What is the space complexity of this algoFactorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation What is the space complexity of this algoHow much space is used at the end nn It is beyond the scope of CS to get a Theta bound CS   Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that  What is its time  space complexity GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant below  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation What is the time complexity of this algoAt least nn because it takes at least one unit of time to access each unit of space It is beyond the scope of CS to get a Theta bound Using Loop Invariants in Algorithm Design and Explanations  Loop invariants state properties known to be true for each iteration of a loop  Can think of it as a property known to be true imm ediately before and immediately after each iteration  In our examples weve understood loop invariants in terms of before and after conditions Before  What is helpful and known to be true before a giv en iteration of the loop After  What is helpful and known to be true after a give n iteration of the loop which establishes the truth of the Before condition before the next iteration Examplethe generate permutations algo from the previ ous slide  Invariant  outer loop    PSL contains all permutations formed from elts s  s i    That is before index i PSL contains all permutations formed from elts s  s i   And after index i PSL contains all permutations formed from elts s  siCS   Using Loop Invariants in Algorithm Design and Explanations  Loop invariants state properties known to be true for each iteration of a loop  Can think of it as a property known to be true imm ediately before and immediately after each iteration  In our examples weve understood loop invariants in terms of before and after conditions Before  What is helpful and known to be true before a giv en iteration of the loop After  What is helpful and known to be true after a give n iteration of the loop which establishes the truth of the Before condition before the next iteration  You dont need to write down before  after condit ions unless a CS assignment requires it but it can be helpful  Key point Loop invariant gives a property thats true after the loop is finished that helps explain algo correctness Examplelets use the invariant to help explain the correctness of our generate permutations algoFactorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation How does the invariant help explain correctnessthat the algo meets its specifications CS   Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation The invariant shows that after the last iteration when i  n  PSL contains all permutations of all elts in L Factorialish Generate All Permutations  To search through all permutations of a list L something first needs to generate all permutations of L Lets write an algo that does that GenerateAllPermutationsL  Input L a list of nelements    L  s s s sn Output PSL a list of all permutations    of input list Lthat is all the lists    resulting from all possible orderings    of all elements in input L GenerateAllPermutationsL n  lenL PSL       note relation to invariant  Invariant  outer loop   PSL contains all permutations formed from elts s  si    That is before index i PSL contains all permu tations formed from elts s  s i   And after index i PSL contains all permutation s formed from elts s  sifor i   to ntempPSL     empty list will store permutations containing sim  lenPSL  Inner loop loops over PSL create new permutatio ns containing sifor j   to m  loop over all possible places to put siin PSLj including before the first or after the last for k   to lenPSLj tempS  deepcopyPSL j   why deepcopyinsert siinto tempS at position k    Note position lenPSLj is after last elt of PS Lj add tempS to list tempPSL PSL  tempPSL  Whats the length of PSL after this operation The invariant shows that after the last iteration when i  n  PSL contains all permutations of all elts in L  and thats exactly what the specifications say is needed So if the invariant always holds the algo is correct CS   Exponentialish Generate All Subsets  To search through all subsets of a set S something first needs to generate all subsets of S Lets write an algo that does that  What is its time  space complexity GenerateAllSubsetsS  Input S a set of nelements    S  s s s s n   probably implemented as a List    but with no repeated elements so    it can be treated as a set by    ignoring the elements ordering  Output L a set of all subsets of S GenerateAllSubsetsS n  lenS L       note relation to invariant below  Invariant  outer loop    L contains all subsets formed from elts s  s i   Before index i L contains all subsets formed f rom elts s  s i   After index i L contains all subsets formed fr om elts s  sifor i   to ntempL     empty list will store subsets containing sim  lenL Inner loop loops over L create new subsets cont aining sifor j   to m tempS  deepcopyL j   why deepcopyadd sito tempS add tempS to list tempL  Whats the length of tempL here when its fully f illed in add all of tempL to L   Whats the length of L after this operation What is the time  space complexity of this algoWhat can you give as a lower bound bound CS   Exponentialish Generate All Subsets  To search through all subsets of a set S something first needs to generate all subsets of S Lets write an algo that does that  What is its time  space complexity GenerateAllSubsetsS  Input S a set of nelements    S  s s s s n   probably implemented as a List    but with no repeated elements so    it can be treated as a set by    ignoring the elements ordering  Output L a set of all subsets of S GenerateAllSubsetsS n  lenS L       note relation to invariant below  Invariant  outer loop    L contains all subsets formed from elts s  s i   Before index i L contains all subsets formed f rom elts s  s i   After index i L contains all subsets formed fr om elts s  sifor i   to ntempL     empty list will store subsets containing sim  lenL Inner loop loops over L create new subsets cont aining sifor j   to m tempS  deepcopyL j   why deepcopyadd sito tempS add tempS to list tempL  Whats the length of tempL here when its fully f illed in add all of tempL to L   Whats the length of L after this operation What is the time  space complexity of this algoLower bound of n nIt is beyond the scope of CS to get a Theta bound Exponentialish Generate All Subsets  To search through all subsets of a set S something first needs to generate all subsets of S Lets write an algo that does that  What is its time  space complexity GenerateAllSubsetsS  Input S a set of nelements    S  s s s s n   probably implemented as a List    but with no repeated elements so    it can be treated as a set by    ignoring the elements ordering  Output L a set of all subsets of S GenerateAllSubsetsS n  lenS L       note relation to invariant below  Invariant  outer loop    L contains all subsets formed from elts s  s i   Before index i L contains all subsets formed f rom elts s  s i   After index i L contains all subsets formed fr om elts s  sifor i   to ntempL     empty list will store subsets containing sim  lenL Inner loop loops over L create new subsets cont aining sifor j   to m tempS  deepcopyL j   why deepcopyadd sito tempS add tempS to list tempL  Whats the length of tempL here when its fully f illed in add all of tempL to L   Whats the length of L after this operation How does the invariant help explain correctnessthat the algo meets its specifications Hint Its very similar to what we just did for the permutations algorithm CS   Using Loop Invariants in Algorithm Design and Explanations  Loop invariants state properties known to be true for each iteration of a loop  Can think of it as a property known to be true imm ediately before and immediately after each iteration  In our examples weve understood loop invariants in terms of before and after conditions Before  What is helpful and known to be true before a giv en iteration of the loop After  What is helpful and known to be true after a give n iteration of the loop which establishes the truth of the Before condition before the next iteration  Key point Loop invariant gives a property thats true after the loop is finished that helps explain algo correctness To informally use loop invariants to help explain  algo correctness Explain how the invariant is true before the first iteration of the loop Explain how the invariant is true after each follow ing iteration Explain how the invariant property shows that the a lgo meets its specifications A Logical Digression Logical Reasoning About Empty Stuff  How does it work if were asked if something is tr ue for all elements of an empty structure  Examples  Say L is a list of strings and L is empty Is it true that every string on the list has length greater than   Say S is a set of numbers and S is empty Is it t rue that every number in S is equal to  Brace yourselves until you get used to them you ma y not like the answers to these questions CS   A Logical Digression Logical Reasoning About Empty Stuff  How does it work if were asked if something is tr ue for all elements of an empty structure  Examples  Say L is a list of strings and L is empty Is it true that every string on the list has length greater than   Say S is a set of numbers and S is empty Is it t rue that every number in S is equal to   The answer to these questions is Yes it is true  We say it is vacuously true  Part of the way propositional logic works is that when we ask if some property is true of every element in some empty structure   the answer is always yes Because there are no el ements to reason about we can vacuously say anything is true of anything in that empty set This follows from the same idea that once it is sho wn that False  True the system is incoherent so we can say anything is  True in that system A Logical Digression Vacuous Truth  How does it work if were asked if something is tr ue for all elements of an empty structure  More Examples  Say L is a list of numbers and L is empty Is it true that L is in sorted order   Say L is a list of numbers and L is empty Is it true that L is out of sorted order   The answer to these questions is Yesthey are vacuously true Its completely understandable if youre not feelin g totally happy about thisdealing with logical incoherence is tricky It turns out though this convention of vacuous tr uth can be really useful and it gets very intuitive after a while This can be useful as part of using loop invariants  especially when showing a property is true in some boundary caseeither before the first iteration of a loop or after the last iteration of a loop CS   Example of Reasoning with Vacuous Truth Loop Invariants and Bubble Sort  Yes bubble sort is the actual name of this sorting algorithm  In pseudocode  Do you understand how the algo works Try it on A  How do we use loop invariants to show correctness ie that it sorts A in nondecreasing order BubbleSortA  for i    to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Whats the time complexity of this algorithm Example of Reasoning with Vacuous Truth Loop Invariants and Bubble Sort  On  Loop invariant for outer loop  Use invariant to show correctness  Show invariant is true before first loop iteratio n How  Show pseudocode ensures invariant is true after e ach successive iteration assuming that its true at the start of the iterati on How  Show when loop is done algorithm meets specifica tions How BubbleSortA  for i    to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Subarray Ai consists of the i smallest val ues of A in sorted order and Ain consists of the rem aining values of A no constraint on order Sorting Problem Input Sequence of  numbers a   a nOutput Permutation reordering b   bn of the input sequence perhaps leaving them unchanged such that b  b     b nCS   Example of Reasoning with Vacuous Truth Loop Invariants and Bubble Sort  On  Loop invariant for outer loop  Use invariant to show correctness  Show invariant is true before first loop iteratio n How BubbleSortA  for i    to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Subarray Ai consists of the i smallest val ues of A in sorted order and Ain consists of the rem aining values of A no constraint on order Sorting Problem Input Sequence of  numbers a   a nOutput Permutation reordering b   bn of the input sequence perhaps leaving them unchanged such that b  b     b nBefore the first iteration iis set to  For the invariant we look at Ai   A By convention A is an empty array  So it vacuously contains the i smallest values of A in sorted order Example of Reasoning with Vacuous Truth Loop Invariants and Bubble Sort  On  Loop invariant for outer loop  Use invariant to show correctnessBubbleSortA  for i    to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Subarray Ai consists of the i smallest val ues of A in sorted order and Ain consists of the rem aining values of A no constraint on order Sorting Problem Input Sequence of  numbers a   a nOutput Permutation reordering b   bn of the input sequence perhaps leaving them unchanged such that b  b     b nSuper Important Note  Show that the entire invariant is true not just part of it A vacuously contains the i smallest values of A in sorted order We still need to explain how An consists of th e remaining values of A no constraint on order but thats not that difficult CS   Explaining Correctness Loop Invariants and Bubble Sort  On  Loop invariant for outer loop  Use invariant to show correctness  Show invariant is true before first loop iteratio n Done  Show pseudocode ensures invariant is true after e ach successive iteration assuming that its true at the start of the iterati on How  Show when loop is done algorithm meets specifica tions How BubbleSortA  for i   to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Subarray Ai consists of the i smallest val ues of A in sorted order and Ain consists of the rem aining values of A no constraint on order Sorting Problem Input Sequence of  numbers a   a nOutput Permutation reordering b   bn of the input sequence perhaps leaving them unchanged such that b  b     b nExplaining Correctness step  Loop Invariants and Bubble Sort  On  Loop invariant for outer loop  Show pseudocode ensures invariant is true after e ach successive iteration assuming that its true at the start of the iterati on BubbleSortA  for i    to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Subarray Ai consists of the i smallest val ues of A in sorted order and Ain consists of the rem aining values of A no constraint on order Sorting Problem Input Sequence of  numbers a   a nOutput Permutation reordering b   bn of the input sequence perhaps leaving them unchanged such that b  b     b nThere are many right ways to do this stepits all a bout explaining how the algo works Refer directly to the pseudocode in your explanatio n citing specific lines of pseudocode Doing this step will be part of a Smaller Assignmen t due next Monday CS   Explaining Correctness step  Loop Invariants and Bubble Sort  On  Loop invariant for outer loop  Show when loop is done algorithm meets specifica tions BubbleSortA  for i    to Alength   for j  Alength downto i  if Aj  Aj  swap Aj with Aj Subarray Ai consists of the i smallest val ues of A in sorted order and Ain consists of the rem aining values of A no constraint on order Sorting Problem Input Sequence of  numbers a   a nOutput Permutation reordering b   bn of the input sequence perhaps leaving them unchanged such that b  b     b nThere are many right ways to do this step too Refer directly to the invariant property and to the  specifications in your explanationreferring to specifications is essential for showin g algo correctness Doing this step will also be part of a Smaller Assi gnment due next Monday Algorithm Correctness and Loop Invariants A Recap  To explain correctness of iterative algos look at the loop  Loop invariants can help Three steps to using loop invariants  Show the invariant is true before the first itera tion  Show the invariant stays true after each successi ve iteration assuming it was true before that iteration  Show the algo meets specifications using what the  invariant says is true after the loop is done See CLRS  These three steps correspond to three parts mention ed in our CLRS textbook  Initialization Property is true before the first iteration  Maintenance If a property is true before an iteration it is tr ue after that iteration  before the next iteration  Termination When the loop terminates the property is useful in  showing algorithm correctness You do not need to use these three terms from CLRS for CS when discussing invariants although you can if you want toI just wanted to connect our approach in this slides to our textbook 