analysis of algorithms  cs  fall   problem set   due at the beginning of class wednesday october    for this assignment standard file naming conventions apply please submit your type- written answers in a pdf file named cs ps userid pdf where userid is re- placed by your full colby userid and submit it to your submittedwork folder  please reach out to me right away with any questions or concerns about this   from your textbook clrs please read chapters     and   note some material there is more mathematically intense than we need don't worry about those parts but please do read over the parts that give basic ideas behind content covered in lecture e g  o   notation functions' orders of growth loop invariants    ex   below mentions brute force algorithms we'll talk more about them on sept      a few essential general style guidelines for writing algorithms in cs   unless explicitly instructed otherwise avoid using break statements or continue or pass statements in algorithms for cs as we will discuss in class employ- ing them can interfere with common approaches to reasoning about code correct- ness e g  using loop invariants  instead please find other approaches perhaps using boolean variables to indicate loop termination conditions  answers employing break or continue pass        may not receive full credit  please feel free to talk with me about any particular situations that might come up i'm happy to talk with you about how to avoid breaks in your code   when presenting an algorithm avoid using language-specific commandsroutines without comments in pseudocode  pseudocode by definition is supposed to be language-independent higher-level than particular programming languages    please be sure to initialize variables or declare inputsouptuts and be sure the purpose of every variable including the names of functions or algorithms can be quickly and fully understood by a reader typically this is done either by using descriptive variable names or by describing variables in english  algorithms in which variables cannot be promptly understood may not receive full credit so please feel free to ask me about variable names and descriptions i'm happy to talk with you about particular situations that might come up   often the clearest way to present an algorithm is with both pseudocode and english description  pseudocode must be accompanied by some kind of clarifying english description to count as fully explained    a general note for cs when writing up your homework please present your answers neatly and explain your answers clearly giving all details needed to make your answers easy to understand  graders may not award full credit to incomplete or hard to understand solutions  clear communication is the point on every assignment   in general in cs unless explicitly specified otherwise answers should be accompa- nied by explanations  answers without explanations may not receive full credit  please feel free to ask me any questions about explanations that might come up    exercises    prof  e  nigma's colleagues in the department of insufficient specification at the portland institute of technology which continues to not exist were working on the following pseudocode algorithm which takes an integer n as input  dis-algon   r   i  n  n while i   do  for j   to i do  r  r    i  i  return r  in the above i is integer division i e  it returns an integer truncating any decimal part of the result of the division  so as one concrete example not necessarily one that comes up in this exercise  would return  not     a what is the final value of r returned by this function express it as a function  of n   b express the running time as a function of n of dis-algo using -notation   c express the space complexity as a function of n of dis-algo using -notation   as usual be sure to give concise but convincing explanations for your answers   note here are some hints which might be especially helpful for part a of this exercise   you are welcome to assume that the input value n is a power of  if it simplifies  your analysis    using summation notation may help    there's a common trick in algorithm analysis involving summation note that  for some exponent x   x     x  here's a quick derivation of that   x     x x    x  because   x for any x  by properties of exponents  this trick might be useful in your analysis of this algorithm    please be careful of off-by-one errors      prof  sue persmart in the cs department at portland institute of technology likes to  tell a story about the invention of chess   a according to legend the game of chess we invented long ago in india by a certain sage  when he took the invention to his king the king liked the game so much that he offered the inventor any reward he wanted  the inventor asked for some grain to be obtained as follows just one grain of wheat was to be placed on the first square of the chessboard then two grains on the second square four grains on the third square eight grains on the fourth etc  until all  squares had been filled  if it took  second to count each grain of wheat how long in seconds would it take to count all the grains of wheat due to the sage  b what if instead of doubling the number of grains for each square of the chess- board the inventor asked for adding two grains  then assuming again that it took  second to count each grain how long in seconds would it take to count all the grains of wheat due to the sage    the department of redundancy department at the portland institute of technology which continues to not exist i know i said that previously in this problem set but this is the department of redundancy department after all        has asked you for help  they work with arrays a  n of integers in which every integer is between  and n there's no constraint on the ordering of numbers in the array  in addition they happen to know that all of the integers between  and n are necessarily in each array  and that means that exactly one number is repeated in each array  do you see why  they want you to come up with an algorithm that for any such input array outputs the number that's repeated in the array  you'll come up with several such algorithms but no two will be the same  a first give a n-time brute force algorithm to solve this problem   b then give a n lg n-time algorithm to solve this problem   c then give a n-time algorithm to solve this problem that has on space  complexity   d finally give a n-time o-space complexity algorithm to solve this problem   as is conventional we're asking about worst case time complexity unless otherwise specified   to earn full credit be sure to include all of the following for each of the four algorithms   pseudocode accompanied by a brief english explanation of what the algorithm  does   a concise but convincing explanation of correctness   a concise but convincing explanation of its time complexity   a concise but convincing explanation of its space complexity    