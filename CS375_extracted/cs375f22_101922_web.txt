 cs --    cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   designing a reduction algorithm  a simple example   sometimes we can design an algo to reduce a problem ato a problem b  such an algorithm is called a reduction from ato b  a reduction from ato bis a kind of algo that solves aby using a subroutine that solves  b thus reducing a to b  here's a very simple example  consider problems aand bwith these specifications  what's an algorithm that would solve a using a solution for bas a subroutine a  input list l  c cn of numbers   output true if the first element of l is   false otherwise  b  input list m  d dk of numbers   output true if the last element of m is   false otherwise   cs --    designing a reduction algorithm  a simple example   sometimes we can design an algo to reduce a problem ato a problem b  such an algorithm is called a reduction from ato b  a reduction from ato bis a kind of algo that solves aby using a subroutine that solves  b thus reducing a to b  here's a very simple example  consider problems aand bwith these specifications  what's an algorithm that would solve a using a solution for bas a subroutine a  input list l  c cn of numbers   output true if the first element of l is   false otherwise  b  input list m  d dk of numbers   output true if the last element of m is   false otherwise   here's one possible reduction from ato b from input l to a create list m  c  run a subroutine for bon input m  if it returns true your algorithm for ashould return true if it  returns false your algorithm for ashould return false   can you analyze the complexity and explain the corr ectness of this reduction algorithm  designing a reduction algorithm  a simple example   sometimes we can design an algo to reduce a problem ato a problem b  such an algorithm is called a reduction from ato b  a reduction from ato bis a kind of algo that solves aby using a subroutine that solves  b thus reducing a to b  here's a very simple example  consider problems aand bwith these specifications a  input list l  c cn of numbers   output true if the first element of l is   false otherwise  b  input list m  d dk of numbers   output true if the last element of m is   false otherwise   you'll be designing a reduction for project  some  important notes  this example may be much simpler than the reduction  you design  your write-up of your reduction will need to be mor e detailed than  the notes on the previous slide are   as always please feel free to ask me questions  cs --    business   grading update   sa sa in progress   ps out extended deadline due oct     project  lookahead out   plenty to get started on   first part due oct     please read over instructions and  let me know if there are any questions   the full proj assignment document that i post will be lengthy   it is meant to be a teaching and reference document in places with  many hints and specific examples   i hope you find it useful   please email me with proj teams by end of day today  business project    project  out very soon   multi-stage project with final due date in early november  project  is to be done in teams of   if you'd like my help finding a team for you plea se let me know   parts of project     design exhaustive search algorithms  your team will collectively design  exhaustive search algorithms for  problems     improve time efficiency  your team will pick one of the problems and make  your exhaustive search algorithm more efficient     reduction  for the same problem chosen for part   above you will reduce that problem to one of the  other seven problems from part      create and give a presentation  your team will  present work from the previous three parts of the  assignment using loop invariants where  appropriate to explain correctness  hint  your team may  want to be strategic  about which of the   problems you choose to  focus on for your  improvements  reduction and  presentation  pick a  problem for which you  can do good work  cs --    time complexity classes illustrated  complexity class what we call it example algorithms   objects  o constant print hello world stack operations  and much much more be careful  olg n log time binary search  on linear exhaustive search of an array linear  search merge as used in mergesort on lg n n lg n mergesort heapsort  recall sorting can be done in n lg n  on n-squared quadratic insertion  selection  bubble s ort  several graph algos  on n-cubed cubic my favorite algorithm  a graph algo on exponential number of subsets of a set of size n  on factorial number of orderings  permutations of  elements of a list of length nthe green-shaded ones are examples of polynomial time classes upper bounded by nkfor  some constant k  problems solvable in polynomial time are consider ed tractable  more  about this later in the semester  olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorte d array  problem  input sorted array a  value vfor which to search  output index isuch that v  a  i  or the special value nil if  vdoes not appear in a cs --    olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorte d array  a quick vocabulary note  divide-and-conquer refers to algorithms that break problems down  into subproblems of the same type  we'll go into this more when we look at recursion re cursive algos  are often divide-and-conquer  olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorte d array  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil problem  input sorted array a  value vfor which to search  output index isuch that v  a  i  or the special value nil if  vdoes not appear in a cs --    olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorte d array  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil what would a complexity  argument be for this algorithm  olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorte d array  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil what would a complexity  argument be for this algorithm  how many iterations  through the while loop  how much work done  each iteration  worst case time complexity  olg n  cs --    olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorte d array  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil what could a loop invariant be for  a correctness argument for  algorithm  correctness binary search  binary search  how would we explain its correctness  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil what could a loop invariant be for  a correctness argument for  algorithm  one possibility   a is unchanged from original input  v may occur in al  r but not  elsewhere in a  recall problem specifications input sorted array a value v output index isuch that v  a  i or the  nil if vdoes not appear in arecall the text in this text box from a previous s lide  to informally use loop invariants to help explain  algo correctness  explain how the invariant is true before the first iteration of the loop  explain how the invariant is true after each follow ing iteration  explain how the invariant property shows that the a lgo meets its specifications  cs --    olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil  olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrchavlowhigh if low  high  return false  else  mid  lowhigh  int division  if v  amid  return true  elif v  amid  return binsrchavmidhigh  else  must be v  amid  return binsrchavlowmid- problem  modified   input sorted array a  value vfor which to search       integers low and high to specify  range of ain which to search  output true if vis an element of  alow   high   false otherwise  cs --    olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrchavlowhigh  if low  high  return false  else  mid  lowhigh  int division  if v  amid  return true  elif v  amid  return binsrchavmidhigh  else  must be v  amid  return binsrchavlowmid- what would the initial call to this  function be to find vin all of a you may have noticed the specification  for this is different from the original  spec'n for the search problem  we could use a wrapper function to  make this work with the original  specification  olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrchavlowhigh  if low  high  return false  else  mid  lowhigh  int division  if v  amid  return true  elif v  amid  return binsrchavmidhigh  else  must be v  amid  return binsrchavlowmid- note  it's the same sequence a each  time  copying or altering a with e g   list slicing would take extra time  important  the recursive cases  bring the sub-problems closer to  the base case where low  high what would the initial call to this  function be to find vin all of a cs --    olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  is the complexity of this  recursive version different  from the complexity of the  iterative version algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil  olg n binary search  binary search  divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more  efficient algorithm   complexity analysis in the worst case for input a of size n  there are lgn recursive calls and o work each time  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division  if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -  return nil are the ideas about  complexity on this slide  new to you  we'll talk much more  about them as the  semester goes along worst case time complexity  lg n  cs --    on merge   see clrs page  for specfications  loop invariant   in the function call mergeapqr  what are a p q and r to me one cool thing about this  algo is how effective it can be to do  a constant amount of work for each  element in the input  sorta like with stack operations a  powerful data structure with fast  operations  this isn't mergesort it's just the merge algo used in mergesort see clrs pg    cs --    on merge   see clrs page  for specfications  loop invariant   in the function call mergeapqr  what are a p q and r how would you explain the time  complexity of this algorithm  what is the algorithm's space  complexity  this isn't mergesort it's just the merge algo used in mergesort see clrs pg    on lg n mergesort   mergesort is a classic example of an n lg n algorithm   algo idea repeatedly split input list in half sor t each half  separately then merge the two halves together   uses the merge function  as a subroutine   pretty fast algo because  merge is on   pseudocode from clrs  see clrs pg   