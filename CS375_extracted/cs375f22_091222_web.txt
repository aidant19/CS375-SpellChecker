 cs --    cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   business   smaller assignment  due by beginning of class sep t     follow file naming conventions see assignment she et   submit to your submittedwork folder in google drive  space see email   graded work will be returned to you in your submit tedwork folder too   problem set  out tonight due sept   by beginn ing of class as usual   any questions about submission instructions for ps 's and sa's   ta hours held in davis  also posted on course  website   sundays -pm   tuesdays -pm   thursdays -pm   if anyone has trouble reading lecture notes from c ourse website please let me  know   thank you for your emails i will to reply to each  of them soon if i haven't  already  cs --    what's the fastest sorting algorithm   of all the things we do with data sorting is among the  most important   improves usability   real-world data is often found sorted   sorting is among the most important  algorithms   how do we sort efficiently   many classic algos to choose from  what sorting algos do you know this is a sneaky-useful real-world  tip pre-sorting data before using  them as input to an algorithm can  sometimes enable more efficient  algorithms   but sometimes it doesn't help  analyzing the algo and  understanding the input are what  helps us make good design  choices   reminder specification of the sorting problem  input a sequence l of n numbers a   a n- output a sequence l' of n numbers b   b n- that re-orders the input sequence  perhaps leaving them unchanged such that b  b     b n- what's the fastest sorting algorithm   of all the things we do with data sorting is among the  most important   improves usability   real-world data is often found sorted   sorting is among the most important  algorithms   how do we sort efficiently   many classic algos to choose from  what sorting algos do you know   the answer to what sorting algo to use for time efficiency  depends on understanding properties of algorithms and  properties of input data  this is a sneaky-useful real-world  tip pre-sorting data before using  them as input to an algorithm can  sometimes enable more efficient  algorithms   but sometimes it doesn't help  analyzing the algo and  understanding the input are what  helps us make good design  choices   cs --    insertion sort in pseudocode  are you familiar with insertion sort   in english how would you describe  how it works  be sure to read clrs ch     about pseudocode conventions  those conventions will apply  throughout cs  are you familiar with  pseudocode   cs --    insertion sort in pseudocode  are you familiar with insertion sort   in english how would you describe  how it works  be sure to read clrs ch     about pseudocode conventions  those conventions will apply  throughout cs  are you familiar with  pseudocode  insertion sort in pseudocode  is insertion sort the fastest sorting algo  and how would we know  what do you recall about time  complexity from cs  let's do some complexity  analysis warmup  review  cs --    insertion sort in pseudocode  is insertion sort the fastest sorting algo  and how would we know time complexity analyses  note for loops are inclusive of boundaries here the algo goes through  the loop for every value of j from  to a length inclusive   at the end of a for loop the index variable is incremented beyond the  boundary condition here the loop ends with j having  value a length    analyzing algorithms  sum some mathematical foundations   summations   arithmetic in i    geometric  in ci  for constant c  what about  for c   sum puns are  just too easy   sum nights fun  we'll return to insertion sort on the next slide  b ut first  these summation formulas will be relevant on our ne xt smaller assignment  to be assigned soon and due next monday sept   see clrs appendix a  for these summation formulas  and please  let me know if you have any questions cs --    insertion sort in pseudocode  is insertion sort the fastest sorting algo  and how would we know time complexity analyses  nstands for the  input size  here the length  of array a  n note for loops are inclusive of boundaries here the algo goes through  the loop for every value of j from  to a length inclusive   at the end of a for loop the index variable is incremented beyond the  boundary condition here the loop ends with j having  value a length    is there an off- by-one error on  line   why is it n times  when the loop  goes from  to  n insertion sort in pseudocode  is insertion sort the fastest sorting algo  and how would we know time complexity analyses  nstands for the  input size  here the length  of array a  nnote for loops are inclusive of boundaries here the algo goes through  the loop for every value of j from  to a length inclusive   at the end of a for loop the index variable is incremented beyond the  boundary condition here the loop ends with j having  value a length    tjstands for the  number of times  the while loop  condition is  tested for a  given value of j cs --    insertion sort in pseudocode  is insertion sort the fastest sorting algo  and how would we know time complexity analyses   what's the time complexity of insertion sort  what are the  best case and  worst case  inputs to  insertion sort  for a given input  size n insertion sort in pseudocode  is insertion sort the fastest sorting algo  and how would we know time complexity analyses   what's the time complexity of insertion sort   best case complexity worst case complexity  what are the  best case and  worst case  inputs to  insertion sort  for a given input  size n best case  a  n  already in  sorted order  worst case  a  n in  reverse  sorted order  do you see  why  cs --    time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n lines - and  all together  add up to something linear  some constant times n lines - the inner loop  are a  bit more complicated they  add up to something that  involves that summation  formula see appendix a  add up the   cost  times   for each row  what do we get  time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n lines - and  all together  add up to something linear  some constant times n lines - the inner loop  are a  bit more complicated they  add up to something that  involves that summation  formula see appendix a    but the term being added  tj  is always jin the worst case add up the   cost  times   for each row  what do we get  cs --    time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times  time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the  worst case  complexity  time complexity  from adding cost   times  in worst case tj j each  time so  what does our  expression for runtime  tn turn into  cs --    time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the  worst case  complexity  time complexity  from adding cost   times  plug in tj j   note summation  is same for c  c  in worst case tj j each  time so  what does our  expression for runtime  tn turn into  time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the  worst case  complexity  time complexity  from adding cost   times  in worst case tj j each time  so tn is order of n  plug in tj j   note summation  is same for c  c  we'd say insertion sort  is an n algorithm see clrs  ch     pg  -  cs --    time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the best  case complexity  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times  time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the best  case complexity  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times  in best case tj  each  time so  cs --    time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the best  case complexity add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times  in best case tj  each  time so plug in tj  which means tj     so the cand cterms go away and the  rest go well like the below  time complexity of  insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of  the algo on an input of size n  so what's the best  case complexity add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times  in best case tj  each  time so this means insertion sort is linear in  the best case  but we don't consider it a linear algo  because that's not its worst case time  complexity 