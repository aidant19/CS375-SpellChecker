CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Designing a Reduction Algorithm A Simple Example  Sometimes we can design an algo to reduce a problem Ato a problem B Such an algorithm is called a reduction from Ato B A reduction from Ato Bis a kind of algo that solves Aby using a subroutine that solves Bthus reducing A to B Heres a very simple example Consider problems Aand Bwith these specifications Whats an algorithm that would solve A using a solution for Bas a subroutine A Input List L  c cn of numbers Output True if the first element of L is  False otherwise B Input List M  d dk of numbers Output True if the last element of M is  False otherwise CS   Designing a Reduction Algorithm A Simple Example  Sometimes we can design an algo to reduce a problem Ato a problem B Such an algorithm is called a reduction from Ato B A reduction from Ato Bis a kind of algo that solves Aby using a subroutine that solves Bthus reducing A to B Heres a very simple example Consider problems Aand Bwith these specifications Whats an algorithm that would solve A using a solution for Bas a subroutine A Input List L  c cn of numbers Output True if the first element of L is  False otherwise B Input List M  d dk of numbers Output True if the last element of M is  False otherwise Heres one possible reduction from Ato BFrom input L to A create list M  c Run a subroutine for Bon input M If it returns True your algorithm for Ashould return True if it returns False your algorithm for Ashould return False Can you analyze the complexity and explain the corr ectness of this reduction algorithm Designing a Reduction Algorithm A Simple Example  Sometimes we can design an algo to reduce a problem Ato a problem B Such an algorithm is called a reduction from Ato B A reduction from Ato Bis a kind of algo that solves Aby using a subroutine that solves Bthus reducing A to B Heres a very simple example Consider problems Aand Bwith these specificationsA Input List L  c cn of numbers Output True if the first element of L is  False otherwise B Input List M  d dk of numbers Output True if the last element of M is  False otherwise Youll be designing a reduction for Project  Some  Important notes This example may be much simpler than the reduction  you design Your writeup of your reduction will need to be mor e detailed than the notes on the previous slide are As always please feel free to ask me questions CS   Business  Grading update  SA SA in progress  PS out extended deadline due Oct   Project  Lookahead out  Plenty to get started on  First part due Oct   Please read over instructions and let me know if there are any questions  The full Proj assignment document that I post will be lengthy  It is meant to be a teaching and reference document in places with many hints and specific examples  I hope you find it useful  Please email me with Proj teams by end of day today Business Project   Project  out very soon  Multistage project with final due date in early November Project  is to be done in teams of  If youd like my help finding a team for you plea se let me know  Parts of Project   Design Exhaustive Search Algorithms  Your team will collectively design exhaustive search algorithms for  problems  Improve Time Efficiency  Your team will pick one of the problems and make your exhaustive search algorithm more efficient  Reduction  For the same problem chosen for part  above you will reduce that problem to one of the other seven problems from part   Create and Give a Presentation  Your team will present work from the previous three parts of the assignment using loop invariants where appropriate to explain correctness Hint  Your team may want to be strategic about which of the  problems you choose to focus on for your improvements reduction and presentation Pick a problem for which you can do good work CS   Time Complexity Classes Illustrated Complexity Class What we call it Example algorithms   objects O Constant Print Hello World stack operations and much much morebe careful Olg n Log time Binary search On Linear Exhaustive search of an array linear search Merge as used in MergesortOn lg n n lg n Mergesort Heapsort Recall sorting can be done in n lg n On nsquared quadratic Insertion  selection  bubble s ort several graph algos On ncubed cubic My favorite algorithm  a graph algoOn Exponential Number of subsets of a set of size n On Factorial Number of orderings  permutations of elements of a list of length nThe greenshaded ones are examples of polynomial time classesupper bounded by nkfor some constant k Problems solvable in polynomial time are consider ed tractable More about this later in the semester Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  How could search be made more efficient on a sorte d array Problem Input sorted array A value vfor which to search Output index isuch that v  A  i or the special value NIL if vdoes not appear in ACS   Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  How could search be made more efficient on a sorte d array A quick vocabulary note Divideandconquer refers to algorithms that break problems down into subproblems of the same type Well go into this more when we look at recursionre cursive algos are often divideandconquer Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  How could search be made more efficient on a sorte d array Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL Problem Input sorted array A value vfor which to search Output index isuch that v  A  i or the special value NIL if vdoes not appear in ACS   Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  How could search be made more efficient on a sorte d array Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL What would a complexity argument be for this algorithm Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  How could search be made more efficient on a sorte d array Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL What would a complexity argument be for this algorithm How many iterations through the while loop How much work done each iteration Worst case time complexity Olg n CS   Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  How could search be made more efficient on a sorte d array Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL What could a loop invariant be for a correctness argument for algorithm Correctness Binary Search Binary search  How would we explain its correctness Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL What could a loop invariant be for a correctness argument for algorithm One possibility  A is unchanged from original input v may occur in ALR but not elsewhere in A Recall problem specificationsInput sorted array A value vOutput index isuch that v  A  i or the NIL if vdoes not appear in ARecall the text in this text box from a previous s lide To informally use loop invariants to help explain  algo correctness Explain how the invariant is true before the first iteration of the loop Explain how the invariant is true after each follow ing iteration Explain how the invariant property shows that the a lgo meets its specifications CS   Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  Recursion warmup Whats a recursive algo for binary search Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  Recursion warmup Whats a recursive algo for binary search Algorithm BinSrchAvlowhighif low  high return False else mid  lowhigh  int division if v  Amid return True elif v  Amid return BinSrchAvmidhigh else  must be v  Amid return BinSrchAvlowmid Problem  modified  Input sorted array A value vfor which to search      integers low and high to specify range of Ain which to search Output True if vis an element of Alow high  False otherwise CS   Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  Recursion warmup Whats a recursive algo for binary search Algorithm BinSrchAvlowhigh if low  high return False else mid  lowhigh  int division if v  Amid return True elif v  Amid return BinSrchAvmidhigh else  must be v  Amid return BinSrchAvlowmid What would the initial call to this function be to find vin all of AYou may have noticed the specification for this is different from the original specn for the search problem We could use a wrapper function to make this work with the original specification Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  Recursion warmup Whats a recursive algo for binary search Algorithm BinSrchAvlowhigh if low  high return False else mid  lowhigh  int division if v  Amid return True elif v  Amid return BinSrchAvmidhigh else  must be v  Amid return BinSrchAvlowmid Note  Its the same sequence A each time Copying or altering A with eg list slicing would take extra time Important  The recursive cases bring the subproblems closer to the base case where low  high What would the initial call to this function be to find vin all of ACS   Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Are you familiar with this algorithm  Recursion warmup Whats a recursive algo for binary search Is the complexity of this recursive version different from the complexity of the iterative version Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL Olg n Binary Search Binary search  Divideandconquer search algorithm on arrays  Designed for sorted arraysuses fact that array is sorted for more efficient algorithm  Complexity analysis In the worst case for input A of size n there are lgn recursive calls and O work each time Algorithm BinSrchAnv L   R  nwhile L  R do mid  LR  int division if v  Amid return mid elif v  Amid L  mid   else  must be v  Amid R  mid  return NIL Are the ideas about complexity on this slide new to you Well talk much more about them as the semester goes along Worst case time complexity lg n CS   On Merge  See CLRS page  for specfications  loop invariant  In the function call MergeApqr  what are A p q and rTo me one cool thing about this algo is how effective it can be to do a constant amount of work for each element in the input Sorta like with stack operationsa powerful data structure with fast operations This isnt Mergesort Its just the Merge algo used in Mergesort See CLRS pg  CS   On Merge  See CLRS page  for specfications  loop invariant  In the function call MergeApqr  what are A p q and rHow would you explain the time complexity of this algorithm What is the algorithms space complexity This isnt Mergesort Its just the Merge algo used in Mergesort See CLRS pg  On lg n Mergesort  Mergesort is a classic example of an n lg n algorithm  Algo idea Repeatedly split input list in half sor t each half separately then Merge the two halves together  Uses the Merge function as a subroutine  Pretty fast algo because Merge is On  Pseudocode from CLRS See CLRS pg  