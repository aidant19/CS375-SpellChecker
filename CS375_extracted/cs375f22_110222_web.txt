CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Definition of our LList Data Structure  In English wed say an LList is  Either the empty list  Or  an element called first  and an LList called rest representing all the elements after first  To be unambiguous about how we work with LLists these will be the primitive functions defined on Llists  firstL returns value of the first element of an LList L  restL returns value of the rest sublist of an LList L  consvL a constructor function that takes an item v and an LList L and returns a new LList L such that  What do you think it might be NOTE This definition may show up on HW too What do you think the complexities of these functions are CS   Business  Grading update  PS in progress  Expect PS out Real Soon Now  Due no sooner than  week after its assigned  Project   First part due already  Other parts due Nov   Please note some restrictions on my schedule  I expect to be traveling on Nov  and probably wo nt be on email or able to answer questions after noon on that day so please plan accordingly Definition of our LList Data Structure  In English wed say an LList is  Either the empty list  Or  an element called first  and an LList called rest representing all the elements after first  To be unambiguous about how we work with LLists these will be the primitive functions defined on Llists  firstL returns value of the first element of an LList L  restL returns value of the rest sublist of an LList L  consvL a constructor function that takes an item v and an LList L and returns a new LList L such that  v is the element first of L  L is the sublist rest of L NOTE This definition may show up on HW too For example how would you write this LList as a list in brackets consconscons  Sometimes the empty list is written as   We could display all LLists in brackets as is usual for lists Well treat all three of these as constanttime fns CS   Definition of our LList Data Structure  To be unambiguous about how we work with LLists these will be the primitive functions defined on Llists firstL returns value of the first element of an LList L restL returns value of the rest sublist of an LList L consvL a constructor function that takes an item v and an LList L and returns a new LList L such that  v is the element first of L  L is the sublist rest of L NOTE This definition may show up on HW too Reminder  firstL restL and consvL are functions that return values they are not fields of an object Because o f this we cannot assign values to themeg firstL   or restL   is not permitted What could be done instead with this syntax to ch ange the first element of some LList Lto  This convention below is common in functional programming languages Definition of our LList Data Structure  To be unambiguous about how we work with LLists these will be the primitive functions defined on Llists firstL returns value of the first element of an LList L restL returns value of the rest sublist of an LList L consvL a constructor function that takes an item v and an LList L and returns a new LList L such that  v is the element first of L  L is the sublist rest of L NOTE This definition may show up on HW too Reminder  firstL restL and consvL are functions that return values they are not fields of an object Because o f this we cannot assign values to themeg firstL   or restL   is not permitted What could be done instead with this syntax to ch ange the first element of some LList Lto  Ans We could do L  consrestL  This convention below is common in functional programming languages CS   LList Example Remove first occurrence of an element  Consider the problem of removing the first occurre nce of an element from a sequence specified here for a list  How would you design an algorithm to solve this problem Its going to be recursive because the definition of LList is recursive Follow the definition How would we break the problem down into  or more smaller subproblems and then use the results in a solution for the original problem Input item i and LList L  x   x nOutput If i x kand k is the smallest value for which i x k return LList x   x k x k   x nOtherwiseie when there is no k such that i x kreturn L LList either empty   or  element first LList rest Functions on LLists  firstL returns first  restL returns rest  consvL creates new LList with v as first and L as rest Correctness Remove first occurrence of an element  How would you argue the correctness of this algorithm  Be sure to refer to these specifications as well as lines of pseudocode  Hint It will be an inductive argument because th e algo is recursive Input item i and LList L  x   x nOutput If i x kand k is the smallest value for which i x k return LList x   x k x k   x nOtherwiseie when there is no k such that i x kreturn L LList either empty   or  element first LList rest Functions on LLists  firstL returns first  restL returns rest  consvL creates new LList with v as first and L as rest Algorithm LLRemovei L  see specification immediately above if L    return L else if i  firstL return restL else return consfirstLLLRemoveirestL CS   Time Complexity of Remove first occurrence of an element  How would you analyze the time complexity of this algorithm Functions on LLists firstL returns first  restL returns rest  consvL creates new LList with v as first and L as rest Assume all of these functions are Othey would be in most implementations Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstLLLRemoveirestL This is something we havent done before Lets think it through We analyze complexity as a function of input size as usual Lets let nstand for input size and Tn stand for time complexity on input of size nWe need to figure out what Tn is What foundati ons or definitions can we follow Zen principles to help us Well its recursive  So lets look at the base case and recursive case sepa rately Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  In the base case what is the input size                                                     and what is the runtime of the algo Recall that firstL restL consvLfunctions are all O Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL CS   Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  In the base case what is the input size                                                     and what is the runtime of the algo Recall that firstL restL consvLfunctions are all O Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL Base case Input size empty list n   Runtime  do you see why Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  In the base case what is the input size                                                     and what is the runtime of the algo Recall that firstL restL consvLfunctions are all O Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL Base case Input size empty list n   Runtime  do you see why So wed say T   to express the base case runtime CS   Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  Base case T    How about the recursive case What is the input si ze and runtime Algorithm LLRemovei L if i  firstL return restL else return consfirstL LLRemoveirestL Recursive case We say input is size n as usualL has n elements Also It does some work other than the recursive callcomb ined  do you see why All of its other runtime is in its recursive call How would we represent th e runtime of that particular recursive call Lets just focus on the recursive case for now Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  Base case T    How about the recursive case What is the input si ze and runtime Algorithm LLRemovei L if i  firstL return restL else return consfirstL LLRemoveirestL Recursive case We say input is size n as usualL has n elements Also It does some work other than the recursive callcomb ined  do you see why All of its other runtime is in its recursive call Input size to recursive call n a list of  less element than L do you see why How do we express the runtime of that call Use our definition of T Lets just focus on the recursive case for now CS   Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  Base case T    Recursive case Tn  Tn   Algorithm LLRemovei L if i  firstL return restL else return consfirstL LLRemoveirestL This may look unusualand recursivebut it follows cleanly from the previous slide In the recursive case It does some work other than the recursive callcomb ined  do you see why All of its other runtime is in its recursive call Tn Lets just focus on the recursive case for now Recurrences for Time Complexity of Recursive Functions  Putting all the pieces together so fartheres more coming up Lets put the pieces together For n   T   For n   Tn  Tn   That is a full definition of the complexity of this algorithm  both the base case and the recursive case Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstLLLRemoveirestL Lets let nstand for input size and Tn stand for time complexity on input of size nWe need to figure out what Tn is lets look at the base case and recursive case separately The base case prev slide is T   Whats the complexity in the recursive case  Tn  Tn   The time taken by everything but the recursive call is just  do you see why  and the recursive call is on input of size n So by our definition of function T  complexity of the recursive call is Tn Do you see how this characterization of Tn exactly fits our LLRemoveL algoCS   Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  Note that it follows good design principles for re cursive definitions  It has a base case  Its recursive case is defined in terms of itself on smaller inputs  Indeed the two parts together are a complete definition of the runtime  But were not done yet Whats the asymptotic complexity of LLRemove For n   T   For n   Tn  Tn  Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL 