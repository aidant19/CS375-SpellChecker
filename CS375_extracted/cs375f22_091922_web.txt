CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  Smaller Assignment  returned already  Let me know if there are problems accessing it  Smaller Assignment  due already  Problem Set  out due Sept   Project  due Sept   Please direct projectspecific questions to me ra ther than to TAs  Questions about general concepts that show up on t he project eg Theta notation though rather than specifics can  go to TAs  Everyone was on a team as of yesterday  Let me know if there are problems  concerns with team assignments Please read the emailed Classwide Comments CS   Business pt   Class will be cancelled Monday Sept   Will be an optional makeup class later in the sem ester  Lets go over SA Exercise f  If Axyz and Bxy what is AxB AxB is by definition a set of ordered pairs please be sure to use the correct notation and concepts notation and semantics matter to CS Just ask your compiler Asymptotic Analysis  BigO Notation  With insertion sort if we gloss over minor details we can see the number of operations worst case is on the order of n ie it is cn  lower order terms   for some constant c where nis the size of the input  Definition An algorithm runs in time Ofn read order of fn means  There exist c  n  st  for all n n the running time of the algorithm is less than cfn  Basically that means that for every input big e nough the running time is less than a constant times fn So wed say Insertion sort is On CS   Asymptotic Analysis  BigO Notation  Definition An algorithm runs in time Ofn read order of fn means  There exist c  n  st  for all n n the running time of the algorithm is less than cfn  Basically that means that for every input big e nough the running time is less than a constant times fn  Informal Intuition BigO is about upper bounds  If a runtime Tn is Ofn then for big enough n Tn is upper bounded by cfn for some leading constant cDefn repeated from prev slide Note This figure from your textbook uses fn for runtime and gn for the bounding function but its the same ideafn is Ogn upper bounded by cgn for all n nBreaking Down the Phrase BigO Asymptotic Complexity  Major takeaways about BigO Asymptotic Complexity Complexity  Its about describing the resource usage of an algorithm Asymptotic  It describes complexity based on behavior on large input sizes nsmall inputs arent really the point BigO  Its an upper bound on complexity on large inputs In fact theres one major takeaway for each of the three words in t he phrase  BigO Asymptotic Complexity  based on their meaning Its best to work from the end of that phrase to th e beginning BigO In this picture for large enough nthat is n  n  fn is upper bounded by a leading constant c times gn CS   Asymptotic Analysis  BigO Notation  Definition An algorithm runs in time Ofn read order of fn means  There exist c  n  st  for all n n the running time of the algorithm is less than cfn  Basically that means that for every input big e nough the running time is less than a constant times fn  This runtime measure captures some essential characteristic of an algorithm  O n algorithms differ from O n from O nlog n etc  Can talk about asymptotic complexity classes  We say Insertion sort is in complexity class On Defn repeated from prev slide Recall BigO is about upper bounds Conventional Wisdom about BigO Classes  If two algorithms are in different bigO classes then there seems to be something substantially different about their speed s  Even though for some small values of n an O n algorithm could be faster than an On  algorithm  It is nonetheless true that  ngrows faster than n  Thus an O n algorithm is in a relevant sense inherently slower than an On  algorithm  For an On algorithm called linear  Doubling the input size does what to the running t ime  Increasing input size by factor of  does what t o running time  For an On  algorithm quadratic  Doubling the input size does what to the running t ime  Increasing input size by factor of  does what t o running time  For an O n algorithm exponential  Doubling the input size does what to the running t ime Important Vocab see CLRS pg  These functions  of nhave very different orders of growth ie how fast they grow as ngets larger CS   Common complexity measures and how they relate to input sizes  Algorithms are sometimes described by their time complexity There are  Logarithmic algorithms  Quadratic algorithms  Exponential algorithms  Factorial algorithms  etc  To see which kind is fastest see how these functions grow with increases in the input size             e e    e e n log  n nnn CS   Using the BigO Definition  Definition Ogn   fn  exists c n  st forall nn fn cgn  Is each of the below statements true Explain your answers  n    On  n  n  On  n  On  n  On  n  On  n lg n  Olg n  n  O n n  O nUsing the BigO Definition  Definition Ogn   fn  exists c n  st forall nn fn cgn  Is each of the below statements true Explain your answers  n    On  n  n  On  n  On  n  On  n  On  n lg n  Olg n  n  O n n  O nPro Tip on how to explain these In general when explaining why an existential exists statement is true explicitly give some witness values that make it true as part of the explanation Here if a statement is true can  you give specific values for c nthat make it true CS   Big Oh theres more Notation  Theta notation Asymptotically tight bound  Definition gn   fn  exists c c  n  st forall nn  cgn fn cgn Big Oh theres more Notation  Theta notation Asymptotically tight bound  Definition gn   fn  exists c c  n  st forall nn  cgn fn cgn Reminderdefn of BigO Ogn   fn  exists c n  st forall nn fn cgn CS   Big Oh theres more Notation  Theta notation Asymptotically tight bound  Definition gn   fn  exists c c  n  st forall nn  cgn fn cgn  BigOmega notation Asymptotic lower bound  Definition gn   fn  exists c n  st forall nn cgn fn Reminderdefn of BigO Ogn   fn  exists c n  st forall nn fn cgn Big Oh theres more Notation  Theta notation Asymptotically tight bound  Definition gn   fn  exists c c  n  st forall nn  cgn fn cgn  BigOmega notation Asymptotic lower bound  Definition gn   fn  exists c n  st forall nn cgn fn  What is the relationship among bigO bigOmega and Theta classes CS   A BigSymbols Theorem  Definition gn   fn  exists c c  n  st forall nn  cgn fn cgn  Definition gn   fn  exists c n  st forall nn cgn fn Theorem  For any two functions fn and gn  fn  gn iff fn  Ogn and fn  gn Using the  Definitions  Definition gn   fn  exists c c  n  st forall nn  cgn fn cgn  Definition gn   fn  exists c n  st forall nn cgn fn  Is each of the below statements true  n    n  n    n  n  n  n  n  n  n  n  n  n  n  n   n n   nCS   Conventions Order of Growth to within a constant multiple  Two different levels of detail can be useful with asymptotic complexity  Formal definitions and detailed explanations  Informal highlevel understanding and explanation s  When informally talking about asymptotic complexit y we often talk about the order of growth of runtime functions to within a leading constant multiple  We dont say exactly what the leading constant cor n threshold is  Order of growth of the highest order  dominant te rm is most important In CS unless specified otherwise feel free to use the informal highlevel approach CS   Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true How could we even phrase that question  The logarithm function lets us ask the question  So for x   wed say x  log  read as log base  of   Examples log    log    log     Logarithms are exponents so rules of exponentiation apply  Eg log bmn  log bm log bnIf bx mand by n  then bxb y bxy  mn 