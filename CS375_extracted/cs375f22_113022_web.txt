cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   business   sa due pm dec     sa involves working through an example of the algo we covered last   monday   ps due already   ps out due dec     ps will be the final ps for the semester   ps sa sa grading update    if you have any questions or comments please see me about  feedback on your graded ps's   project  due pm monday dec     tell me your team by end of day today   intended team size  but talk to me if you'd prefer to work with a   smaller team size  cs --     cs --   see clrs sec  b   and b    the trees  see also the rush album  hemispheres which many  people may find even more  dense and inaccessible  than the clrs textbook    a tree sometimes called a free tree is an acyclic connected undirected   graph   we've seen rooted trees such as   a collection of possibly  disconnected trees is  called a forest  really   binary trees before but from a more  general graph-oriented perspective trees do not need to have roots    important properties of free trees the below statements are all  equivalent for undirected graph g  v e   g is a free tree   any two vertices in g are connected by a unique simple path   g is connected but if any edge is removed the resulting graph is disconnected   g is connected and e  v-   g is acyclic and e  v-   g is acyclic but if any edge is added to g the resulting graph has a cycle  minimum spanning trees msts   given a connected undirected graph g  ve an acyclic   subgraph that connects all the vertices in v is a spanning tree of g   it's a tree and it covers spans all the vertices of g   for network g represents unique connections  paths between each pair of   nodes in g   consider the minimum spanning tree mst problem given weighted   undirected connected graph g find a spanning tree t with minimal  total weight over all edges in t    cs --   in the not too distant future -- mst k  a generic mst algorithm   minimum spanning trees can be grown one edge at a time   safe here means an edge that  can be added without  violating the property that a  is a subgraph of an mst   digression how do we argue  correctness of the algorithm   some vocabulary   a cut sv-s of an undirected graph gve is a partition of v   an edge uv crosses a cut if u is in s and v is in v-s   a cut respects a set of edges if no edge in the set crosses the cut   a light edge is a minimum-weight edge satisfying a property e g    a light edge that crosses a cut  how can this vocab be used to  describe an mst algorithm  greedy mst algorithms   greedy strategy for building msts add the best edge from   edge set e of graph g repeat until an mst is built  overall structure turn a forest some trees have only  node into a   tree by adding light edges connecting separate components   question what is the best edge the greedy choice to add  a possibility pick the least-weight edge from e that connects two   separate components   possibly results in multiple trees growing         invariant all subgraphs are  trees  how do we know  in the forest but all will be connected by the end of the algorithm   i e  maintains a disjoint set of sub-trees    data structures flashback  disjoint sets  union-find   a union-find data structure   is used to maintain a  collection of disjoint sets   operations on disjoint sets   find given v find component set containing v   union given components a b replace them by their union a u b   representation a disjoint-set forest of rooted trees   union operation joins trees a and b into a new rooted tree   find operation gives the root of the tree containing v   use this representation with union-by-rank and path-  compression heuristics as data structure for mst algorithm  see clrs chapter   for details of  implementation and run-time complexity   kruskal's algorithm   mst possibility pick the least-weight edge from e that   connects two separate components  disjoint-set data structure maintains forest of mst sub-trees   efficient to determine whether two vertices are already connected   start by sorting edges least-weight first and take edges in that   order as long as they connect separate components   i e  add  light edges  that connect  sub-trees  cs --     kruskal's algorithm kontinued   what's a correctness argument for kruskal's algorithm   what's a complexity argument for it  kruskal's algorithm kontinued   what's a complexity argument for kruskal's algorithm   depends on the complexity of find-set and union from previous   slide ov  e alphae   and oe lg e to sort e so oe lg e thus oe lg v total  cs --     example exercise  greedy algorithms  msts   apply kruskal's algorithm to this graph to find a   minimum spanning tree     break ties where applicable by alphabetical ordering on the  endpoints of edges   cs --     