CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  SA out due Monday Nov   Possibility of very small SA out today too More on that if it happens  Expect PSLookahead out soon  Likely due after Thanksgiving break  Project  out  Deadline extended Due end of day Nov  Note  Assume you have constructors and accessors for the  four types of PLEs not and or impliessimilar to IBTs and LLists  Document your function names in your project and u se them as usual as we did for IBTs and LLists  Project  Grading update  In progress but will be slow catching up from il lness may take a while  Please meet with me if youd like prompt feedback on any part of Project CS   RecursionTree Method  An example Mergesort Tn Tn  Tn Tn  Tn  Tn  Tn T  T  T  T  T  T  T  T nTn   kn n k n   kn        log nn log n    T n if  nTn sorting both halves       nmerging otherwise      Recursion tree for algorithm Total work done Recursion Tree Exercises  Use the recursiontree method to solve the following recurrences for n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Tn  Tn  n if n    if n    Those last three examples illustrate three different cases  The amount of work per level increases with the most work done at the leaves of the tree  The amount of work per level decreases with the most work done at the root  The amount of work per level is constantand there  are            lg n   levels in the tree There are lg n   levels in all three cases really but its of particular importance here Note These three cases are importantwell come back to them on a later slide CS   A Recurring Observation  In general many divideandconquer algorithm runtimes may be expressed as recurrences of the form  Where a number of subproblems nb  size of a subproblem Dn  time to divide the problem into subproblems Cn  time to recombine the subproblem solutions   if n  kaTnb  Dn  Cn otherwise Tn  Dn  Cn might be represented as a single function fn  ie work done at each node in a recursion tree Master Method  In many common cases there is a cookbook solution available using the Master Theorem  Master Theorem  Let a  b   be constants fn be a function asymp p ositive  and Tn be defined by Tn  aTnb  fn on nonneg integers  Then Tn can be bounded asymptotically as follow s  Tn  nlog ba if fn  Onlog ba for some constant    Tn  nlog balgn         if fn  nlog ba  Tn  fn if fn  nlog ba for some constant   and if afnb cfn  for some constant   c   and all sufficiently large n See Section  of CLRS CS   Master Terminology  Master Theorem slightly abridged  elided  Let a  b   fn be a function Tn  aTnb  fn  then  Tn  nlog ba if fn  Onlog ba for some constant    Tn  nlog balgn         if fn  nlog ba  Tn  fn if fn  nlog ba for some constant   and if afnb cfn  for some constant   c   and all sufficiently large n  Note Comparison of fn with nlog baor nlog ba   case   fn is polynomially smaller than nlog ba case   fn is asymptotically equal to nlog ba case   fn is polynomially larger than nlog ba Also case   regularity condition  afnb cfn for   c   etc  Intuition Amount of work goes down with each recu rsive call ie number of times dividing aby bto get O Master Key  Some intuition behind the Master Theorem This isnt obvious just by looking at it Please talk with me outside of class if youd like to understand this in detail See Section  for a proof CS   Incomplete Mastery  Master Theorem slightly abridged  elided  Let a  b   fn be a function Tn  aTnb  fn  then  Tn  nlog ba if fn  Onlog ba for some constant    Tn  nlog balgn         if fn  nlog ba  Tn  fn if fn  nlog ba for some constant   and if afnb cfn  for some constant   c   and all sufficiently large n  Note The three cases are not exhaustive Eg  fn may be smaller than nlog ba but not polynomially smaller see cases   fn may be larger than nlog ba but not polynomially larger see cases   If the function falls into one of these gaps or i f the regularity condition cant be shown to hold the Master Method cant be used An Example Master Theorem slightly abridged  elided  Tn  nlog ba if fn  Onlog ba for some constant    Tn  nlog balgn         if fn  nlog ba  Tn  fn if fn  nlog ba for some constant   and if afnb cfn  for some constant   c   and all sufficiently large n  Example  Tn  Tn  n  a   b   fn  n nlog ba n log   n  So compare fn  n with n  n  On    Thus case  applies  Tn  n  Example  Tn  Tn   ie fn is polynomially smaller than n log baCS   More Examples Master Theorem slightly abridged  elided  Tn  nlog ba if fn  Onlog ba for some constant    Tn  nlog balgn         if fn  nlog ba  Tn  fn if fn  nlog ba for some constant   and if afnb cfn  for some constant   c   and all sufficiently large n  Examples  Tn  Tn  n lg n Tn  Tn  n lg n Tn  Tn  n  Tn  Tn  n  Tn  Tn  n Design Paradigm Analysis Complexity Efficiency Correctness Iterative Counting Exact count of operations  space used Loop invariants Recursive Solving recurrences Induction CS   Time Complexity Classes Illustrated Complexity Class What we call it Example algorithms   objects O Constant Print Hello World stack operations and much much morebe careful Olg n Log time Binary search On Linear Exhaustive search of an array linear search Merge as used in MergesortOn lg n n lg n Mergesort Heapsort Recall sorting can be done in n lg n On nsquared quadratic Insertion  selection  bubble s ort several graph algos On ncubed cubic My favorite algorithm  a graph algoOn Exponential Number of subsets of a set of size n On Factorial Number of orderings  permutations of elements of a list of length nThe greenshaded ones are examples of polynomial time classesupper bounded by nkfor some constant k Problems solvable in polynomial time are consider ed tractable More about this later in the semester 