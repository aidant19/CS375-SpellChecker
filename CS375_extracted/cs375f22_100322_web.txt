 cs --    cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   business   grading update   ps returned   project started grades probably not returned until  end of break   please let me know if you'd like feedback sooner    i welcome feedback about grader feedback let's talk   problem set  due oct     see note about break statements please avoid them in cs   please get started early and ask questions early   another sa may be out soon i'll email if so   revisions on sa where applicable   this is foundational material   please get to them soon to help with learning for  the course  cs --    business pt     office hours will be cancelled wednesday oct     i will not be able to stay late for my hours on tu esday oct   either   class will be held on wednesday oct   please attend  exponential time and  the power set of a set s   when we think of exponential time or more generally  something of size  length n we often think of all subsets  of a set of size n consider set s of size n  how many subsets of s are  there  as a small example consider s     n    what are all the  subsets           there are  of them   the set of all subsets of s is called the power set of s  recall the n entry in our table of common complex ity classes  cs --    exhaustive search brute force   how many subsets are there of a given set s   say for notation shas nelements  the power set of shas  nelements   what does this tell us about the asymptotic complex ity of  an exhaustive search algorithm over all subsets of a set  remember exhaustive search implies that it looks at  all elements at least in worst case of a collecti on  will we describe complexity using big-o  or vocab  the set of all  subsets of s is called  the power set of s  exhaustive search brute force   how many subsets are there of a given set s   say for notation shas nelements   how many orderings or permutations  are there of all  elements in a list l  a   a n the power set of shas  nelements   what does this tell us about the asymptotic complex ity of  an exhaustive search algorithm over all subsets of a set vocab  the set of all  subsets of s is called  the power set of s  cs --    all permutations of a list l  consider list l  a a a a n of length n  how many permutations are  there of l i e  ways to put all the elements into s ome list in any order  as a small example consider l     n    what are all the  permutations    th ere are  of them   how many would there be for list l'  hint it's not just  more  factorial time and  all permutations of a list l   when we think of factorial time or more generally  something of size  length n  we often think of all  permutations of a list of length n consider list l  a a a a n of length n  how many permutations are  there of l i e  ways to put all the elements into s ome list in any order  as a small example consider l     n    what are all the  permutations    th ere are  of them   how many would there be for list l'  answer there are    times more do you see why think of how many way s a  could be  inserted into list    there are  possible pl aces recall the n entry in our table of common complexi ty classes  cs --    exhaustive search brute force   how many subsets are there of a given set s   say for notation shas nelements   how many orderings or permutations  are there of all  elements in a list l  a   a n the power set of shas  nelements   what does this tell us about the asymptotic complex ity of  an exhaustive search algorithm over all subsets of a set  a list of length nhas n permutations   what does this tell us about the asymptotic complex ity of  an exhaustive search algorithm over all orderings o f  elements in a list  will we describe complexity using big-o  or vocab  the set of all  subsets of s is called  the power set of s  exhaustive search brute force   how many subsets are there of a given set s   say for notation shas nelements   how many orderings or permutations  are there of all  elements in a list l  a   a n the power set of shas  nelements   a list of length nhas n permutations  vocab  the set of all  subsets of s is called  the power set of s  a take-home message for large n when things can be ordered  a list   there's a lot more possibilities than when things c an't be ordered  a set   so exhaustive search over all subsets is faster th an over all permutations   but both are really slow  cs --    the cs guitar genius tour   guitarists steve vai and pasquale grasso both faves of your  cs prof  are finally going on tour together   there are n possible venues they could play on their tour   they could play any number of them from  to n  they have a list ordering of the nvenues in mind the order in which it  makes sense to travel to them   so if the ordering is v v   vnfrom first to last they would never play  vybefore vxif y  x   larger numbers are always later in the ordering    but they could skip or play any or all venues now that we've looked at those brute-force measures  let's answer the  question here how many possible itineraries are there  we want to figure out the best tour itinerary for  them  for now we'll use a brute force method of  checking all possible tour itineraries   how many possible itineraries are there disclaimer they  aren't really  touring together    the cs guitar genius tour   guitarists steve vai and pasquale grasso both faves of your  cs prof  are finally going on tour together   there are n possible venues they could play on their tour   they could play any number of them from  to n  they have a list ordering of the nvenues in mind the order in which it  makes sense to travel to them   so if the ordering is v v   vnfrom first to last they would never play  vybefore vxif y  x   larger numbers are always later in the ordering    but they could skip or play any or all venues now that we've looked at those brute-force measures  let's answer the  question here how many possible itineraries are there  we want to figure out the best tour itinerary for  them  for now we'll use a brute force method of  checking all possible tour itineraries   how many possible itineraries are there  n one  for each set of venues that could be chosen disclaimer they  aren't really  touring together    cs --    exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s  cs --    exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s generate-all-subsetss  n  lens   invariant outer loop     before index i l contains all subsets formed f rom elts s  s i-    after index i l contains all subsets formed fr om elts s  si for i   to n- exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s generate-all-subsetss  n  lens  l       note relation to invariant below   invariant outer loop     before index i l contains all subsets formed f rom elts s  s i-    after index i l contains all subsets formed fr om elts s  si for i   to n- cs --    exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s generate-all-subsetss  n  lens  l       note relation to invariant below   invariant outer loop     before index i l contains all subsets formed f rom elts s  s i-    after index i l contains all subsets formed fr om elts s  si for i   to n- a sequence from a bigger  number to a smaller number  like s     s - is considered  empty containing no elements  exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s generate-all-subsetss  n  lens  l       note relation to invariant below   invariant outer loop     before index i l contains all subsets formed f rom elts s  s i-    after index i l contains all subsets formed fr om elts s  si for i   to n- templ     empty list will store subsets containing si m  lenl  inner loop loops over l create new subsets cont aining si  what's the length of templ here when it's fully f illed in  add all of templ to l   what's the length of l after this operation  cs --    exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s generate-all-subsetss  n  lens  l       note relation to invariant below   invariant outer loop     before index i l contains all subsets formed f rom elts s  s i-    after index i l contains all subsets formed fr om elts s  si for i   to n- templ     empty list will store subsets containing si m  lenl  inner loop loops over l create new subsets cont aining si for j   to m-  temps  deepcopyl j   why deepcopy add sito temps  add temps to list templ   what's the length of templ here when it's fully f illed in  add all of templ to l   what's the length of l after this operation let's go  through a  small  example  how does  this algo  work on  s  exponential-ish generate all subsets   to search through all subsets of a set s something first needs to  generate all subsets of s  let's write an algo that does that   what is its time  space complexity generate-all-subsetss   input s a set of nelements     s  s s s s n-    probably implemented as a list     but with no repeated elements so     it can be treated as a set by     ignoring the elements' ordering   output l a set of all subsets of s generate-all-subsetss  n  lens  l       note relation to invariant below   invariant outer loop     before index i l contains all subsets formed f rom elts s  s i-    after index i l contains all subsets formed fr om elts s  si for i   to n- templ     empty list will store subsets containing si m  lenl  inner loop loops over l create new subsets cont aining si for j   to m-  temps  deepcopyl j   why deepcopy add sito temps  add temps to list templ   what's the length of templ here when it's fully f illed in  add all of templ to l   what's the length of l after this operation what is  the  time   space  com- plexity  of this  algo cs --    factorial-ish all permutations   write an algo to generate all permutations of an input list l   what are its input  output specifications   how does your algo solve the problem   what is its time  space complexity what loop invariant would be helpful to clarify  explain your algorithm design  this will be assigned to you as a smaller assignmen t due after break 