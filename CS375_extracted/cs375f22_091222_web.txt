cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   business   smaller assignment  due by beginning of class sept     follow file naming conventions see assignment sheet   submit to your submittedwork folder in google drive space see email   graded work will be returned to you in your submittedwork folder too   problem set  out tonight due sept   by beginning of class as usual   any questions about submission instructions for ps's and sa's   ta hours held in davis  also posted on course website   sundays -pm   tuesdays -pm   thursdays -pm    if anyone has trouble reading lecture notes from course website please let me  know   thank you for your emails i will to reply to each of them soon if i haven't   already   cs --     cs --   what's the fastest sorting algorithm   of all the things we do with data sorting is among the   most important  improves usability   real-world data is often found sorted   sorting is among the most important  algorithms   how do we sort efficiently   many classic algos to choose from   what sorting algos do you know  reminder specification of the sorting problem  input a sequence l of n numbers a  an-  this is a sneaky-useful  real-world  tip pre-sorting data before using  them as input to an algorithm can  sometimes enable more efficient  algorithms   but sometimes it doesn't help   analyzing  the algo and  understanding the input are what  helps us make good design  choices   output a sequence l' of n numbers b  bn- that re-orders the input sequence  perhaps leaving them unchanged such that b      bn-   b  what's the fastest sorting algorithm   of all the things we do with data sorting is among the   most important  improves usability   real-world data is often found sorted   sorting is among the most important  algorithms   how do we sort efficiently   many classic algos to choose from   what sorting algos do you know  this is a sneaky-useful  real-world  tip pre-sorting data before using  them as input to an algorithm can  sometimes enable more efficient  algorithms   but sometimes it doesn't help   analyzing  the algo and  understanding the input are what  helps us make good design  choices    the answer to what sorting algo to use for time efficiency   depends on understanding properties of algorithms and  properties of input data     cs --     insertion sort in pseudocode   are you familiar with insertion sort    in english how would you describe  how it works  are you familiar with  pseudocode  be sure to read clrs ch     about pseudocode conventions  those conventions will apply  throughout cs   insertion sort in pseudocode   are you familiar with insertion sort    in english how would you describe  how it works  are you familiar with  pseudocode  be sure to read clrs ch     about pseudocode conventions  those conventions will apply  throughout cs   insertion sort in pseudocode    is insertion sort the fastest sorting algo  and how would we know  what do you recall about time  complexity from cs  let's do some complexity  analysis warmup  review  cs --     cs --   insertion sort in pseudocode    is insertion sort the fastest sorting algo  and how would we know time complexity analyses   note for loops are inclusive of boundaries here the algo goes through   the loop for every value of j from  to a length inclusive     at the end of a for loop the index variable is incremented beyond the   boundary condition here the loop ends with j having value a length    we'll return to insertion sort on the next slide  but first  analyzing algorithms   sum some mathematical foundations   summations   arithmetic in i     geometric   sum puns are  just too easy    sum nights fun   in ci   for constant c     what about  for c    see clrs appendix a  for these summation formulas and please  let me know if you have any questions  these summation formulas will be relevant on our next smaller assignment  to be assigned soon and due next monday sept      cs --   insertion sort in pseudocode    is insertion sort the fastest sorting algo  and how would we know time complexity analyses   note for loops are inclusive of boundaries here the algo goes through   the loop for every value of j from  to a length inclusive     at the end of a for loop the index variable is incremented beyond the   boundary condition here the loop ends with j having value a length    n stands for the  input size  here the length  of array a  n  is there an off- by-one error on  line   why is it n times  when the loop  goes from  to  n  insertion sort in pseudocode    is insertion sort the fastest sorting algo  and how would we know time complexity analyses   note for loops are inclusive of boundaries here the algo goes through   the loop for every value of j from  to a length inclusive     at the end of a for loop the index variable is incremented beyond the   boundary condition here the loop ends with j having value a length    n stands for the  input size  here the length  of array a  n  tj stands for the  number of times  the while loop  condition is  tested for a  given value of j    cs --   insertion sort in pseudocode    is insertion sort the fastest sorting algo  and how would we know time complexity analyses   what's the time complexity of insertion sort  what are the  best case and  worst case inputs to  insertion sort  for a given input  size n  insertion sort in pseudocode    is insertion sort the fastest sorting algo  and how would we know time complexity analyses   what's the time complexity of insertion sort   best case complexity worst case complexity  what are the  best case and  worst case inputs to  insertion sort  for a given input  size n   best case   a  n  already in  sorted order  worst case   a  n in  reverse sorted order  do you see   why    time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get   lines - and  all together  add up to something linear  some constant times n   lines - the inner loop are a   bit more complicated they  add up to something that  involves that summation  formula see appendix a   time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get   lines - and  all together  add up to something linear  some constant times n   lines - the inner loop are a   bit more complicated they  add up to something that  involves that summation  formula see appendix a     but the term being added tj   is always j in the worst case  cs --     cs --   time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times  time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  time complexity  from adding cost   times   so what's the   worst case  complexity  in worst case tj  j each  time so  what does our  expression for runtime  tn turn into    time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  time complexity  from adding cost   times   so what's the   worst case  complexity  in worst case tj  j each  time so  what does our  expression for runtime  tn turn into  plug in tj  j   note summation  is same for c c  see clrs  ch     pg  -  time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  time complexity  from adding cost   times   so what's the   worst case  complexity  in worst case tj  j each time  so tn is order of n  we'd say insertion sort   is an n algorithm  plug in tj  j   note summation  is same for c c  cs --     time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times   so what's the best  case complexity  time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times   so what's the best  case complexity  in best case tj   each  time so  cs --     time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times   so what's the best  case complexity  in best case tj   each  time so  plug in tj   which means tj       so the c and c terms go away and the  rest go well like the below  time complexity of   insertion sort   what's the time complexity of insertion sort   our default is to look at the worst-case complexity of   the algo on an input of size n  add up the   cost  times   for each row  what do we get  time complexity  from adding cost   times   so what's the best  case complexity  in best case tj   each  time so   this means insertion sort is linear in   the best case    but we don't consider it a linear algo  because that's not its worst case time  complexity  cs --     