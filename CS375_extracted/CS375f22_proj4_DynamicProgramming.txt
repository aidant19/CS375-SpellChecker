Analysis of AlgorithmsCS  Fall Project DueBY pm onMonday Dec Project  Edit Distance and Dynamic ProgrammingIn this assignment youll work in teams of up to four people to implement a dynamicprogramming algorithm from a recursive definition with applications to natural languageprocessing  NLP  The goals of this project areto give you practice converting a recursive definition into an iterative dynamic programming algorithmto give you practice implementing both recursive and iterative dynamic programmingmethodsto introduce you to edit distance as a concept for NLP applicationsto give you practice presenting your algorithms and ideas in a written document andshort videorecorded demo of your workto give you practice working with other students as a teamA few Important Notes about this project assignmentAll of your implementation in this assignment must be in Python or Java Please pickone of those languages and use it for all of your teams codingRestriction on resources to use Do not use any outside resources aboutedit distance as part of this assignment because most of whats available containsinformation about implementation that you are expected to do yourselves as part oflearning about dynamic programmingIf you have questions about edit distance please let me know If youre looking foroutside resources regarding a particular part of edit distance please ask me and I willtry to find something to help with your questions that does not affect your ability tohave this project be completely your own workYou are welcome to use outside resources about Python or Java programming in general It is only edit distancespecific resources that are restricted for thisassignment As always please let me know if you have any questionsThe Project AssignmentHere are the parts of this assignmentEdit Distance Your team will be given a recursive definition of edit distance and youwill create and implement both topdown recursive andbottomup iterative dynamicprogramming algorithms to compute edit distanceSpelling Correction Your team will use your edit distance calculations to createand implement a generalpurpose spelling checker  and you will demonstrate its effectivenessImprovements Your team will implement a specialized spell checker with improvedperformance on CSspecific documents and your team will come up with at leastone other way to improve upon your original generalpurpose spell checkerPresentation of Your Work Along with a writeup document your team willrecord a short video demo that emphasizes features of your dynamic programmingimplementation and your improvements to the original algorithm Edit DistanceSeveral natural language processing  NLP  and computational biology applications rely onmetrics of similarity between words or documents genome sequences etc One commonway to measure word similarity is by edit distance a measure of how much work it takes totransform a string Sinto a string T Definition and ExamplesFor this project well consider only three possible operations to transform one string intoanotherReplace Replace one character by another For example cat is transformed to car bya single replace operationreplacing r with tInsert Insert one character into a string For example cat is transformed to cart by asingle insert operationinserting r into the word catDelete Delete one character from a string For example char is transformed to car bya single delete operationdeleting h from the word charThe edit distance from string Sto string Tis defined to be the minimum number ofoperations required to transform StoT For example the edit distance from analysis toalgorithms is  Heres one way of transforming analysis toalgorithms in  operations shownbelow in lefttoright order of acting on string analysis Acknowledgment Thanks to Prof Amanda Stent Davis AI Institute Colby College for helpful conversations as part of preparing this ProjectOperation StringStarting string analysisreplace n with l alalysisreplace a with g alglysisreplace l with o algoysisreplace y with r algorsisdelete s algorisinsert t algori tsinsert h algorit hsinsert m algorith msThere are ways to transform analysis toalgorithms in more than  operations butbecause  is the minimum possible the edit distance from analysis toalgorithms is This idea of edit distance leads to a recursive definition which is somewhat similar towhat we used for the Longest Common Subsequence problem in CS Heres a recursivedefinition of function editDistance S T giving the edit distance from StoTBase case When SorTare empty the edit distance is the length of the nonempty stringtransforming the empty string to Twould take Tinsert operations transforming Sto the empty string would take Sdelete operations Thus if we let  stand for theempty string editDistance  T lenT and editDistance S  lenSRecursive cases If the last symbol in Sequals the last symbol in T no work has to bedone transforming that symbol from Sinto that symbol from T If we let mstandforlenS and nstand for lenT this means when Sm  Tn the editdistance from StoTis just the edit distance from Sm to Tnie allbut the last characters of both stringsIfSmTn however then some work has to be done to address thatdifference Because were using three possible operations for transforming stringsthere are three options for thatreplace Sm with Tn and then transform Sm to Tndelete Sm and then transform Sm to Tn orinsert the last symbol of Tonto the end of Sand then transform Sm intoTnEach of these requires  operation plus the remaining transformation and the editdistance will be whichever option requires the minimum number of operations So forthe recursive case editDistance S T is defined as follows recall that SSmandTTneditDistance S T    min editDistance Sm TneditDistance Sm TneditDistance Sm Tn So to put it all together in one definitionWhen SorTare emptyeditDistance  T lenT andeditDistance S  lenSIfSm  TneditDistance S T editDistance Sm TnIfSmTneditDistance S T    min editDistance Sm TneditDistance Sm TneditDistance Sm Tn That is our full definition of editDistance  with the first two equations being base casesand the last two being recursive cases for when SandTare both nonempty Implement Edit DistanceWorking from that recursive definition of edit distance create algorithms for two versionsof a function to compute the edit distance of two input wordsa straightforward topdown recursive implementation anda bottomup iterative dynamic programming implementationIn addition implement those two algorithms in your teams programming language ofchoice Python or Java Analyze the time complexity of the two versions using empiricalcomplexity measures from actual runs of your code as well as asymtotic complexity analysesto describe differences between the versions runtime efficienciesFor asymptotic complexity analysis of your recursive version be sure to present andexplain a recurrence that describes the runtime of the function Although you are notrequired to analyze it to arrive at a  bound to get a good grade on this project you mightchoose to attempt to do so  to show greater depth and command of relevant concepts Asalways on CS project assignments showing depth and command of related concepts willbe considered as part of your gradeHint If you are going to try analyzing your recurrence to get a  bound try settingup a recursion tree It may be challenging to solve it using only the techniques onwhich we primarily focused in CS but you may be able to analyze the tree toget a lower bound  and an upper bound Big O on the overall complexity whichmay help Consider the number of levels in the tree for the worst case Whatsthe smallest number of levels it could be Whats the largest How can you usethat informationalong with some summation formulas weve seen this semestertocome up with asymptotic complexity boundsTo analyze the asymptotic complexity of your iterative version standard methods willprobably be helpful For empirical data about runtime feel free to use whatever methods youthink would be most helpful perhaps including languagespecific tools to help analyze actualtime spent running by the implementation be sure to run your implementations on largeenough examples to demonstrate that difference in time efficiency The SCOWL dictionaryfor use in Section  below may be more than sufficientPresent the algorithms for these two implementations of edit distance in your writeupalong with your analyses of efficiency and your explanations of how the algorithms correctlyimplement the definition of edit distanceYou will also submit the code of your implementations as described in Section  below which must be fully commented and easily readable with overall good style Your codeshould be straightforward implementations of your algorithmsa reader should immediatelysee how the code follows directly from the pseudocode If there are any essential implementation details to include you may describe those in your writeup as well as in commentsin your code but ideally the code should follow from pseudocode straightforwardly and notrequire such extra documentation In general for all code in this project if code isnt easilyreadable or if it is not easily understandable as a straightforward implementation of youralgorithms it will not earn full creditNote You do not need to use specifications formal loop invariants or inductive arguments to explain the structure of your algorithms or codethe intention is for theseexplanations to less formal rather than a structured correcntess argumentalthough if youfind that doing so makes your explanation clearer you are welcome to do so As alwaysclarity is essential for good explanations Spelling CorrectionOne NLP application built upon edit distance is spelling correction a program reads througha body of text and word by word suggests possible alternates for words that may be misspelled Youve probably used spell checkers before They can start out with a dictionaryie a word list which can be in a separate file of known words that they consider correctlyspelled and then as they read through some text for each word they encounter that isnt inthe dictionary they suggest words that arein the dictionary and have similar spellingsThats where edit distance comes in Upon encountering some word wthats not in thedictionary edit distance is used to determine words in the dictionary that are similar to wto suggest as alternates Youll come up with an algorithm to do that spell checking andthen youll implement your algorithm in a working spell checker test it and describe yourresults in a way that illustrate both the strengths and limitations of your spell checker Your Spelling Correction AlgorithmIn your writeup for this project give an algorithm that meets the following specificationsInput  A string of text T consisting of the words to be spell checked and adictionary word list Dof correctly spelled wordsOutput  For each word winTthat does not occur in D  words in Dwithminimal edit distance from wie  suggestions for a corrected spelling of wwhich must be the  words with minimal edit distance from S in case of ties forleast edit distance from S the algorithm can pick any of them with that minimaledit distance To be clear your alorithm should provide output for every wordinTthats not in DOnce you have your algorithm implement and test it reporting results of the tests to illustrate the effectiveness and limitations of your algorithm For this part of the projectyour algorithm and code should use your iterative dynamic programming edit distance implementation written for Section  without redescribing or reimplementing it and golinearly  exhaustively through dictionary Din a bruteforce manner You do not needto do anything other than such a linear  exhaustive search approach for any part of thisproject although if you do something else as part of making improvments to your algorithmor your implementation that should be presented as part of your work for Section  belowFor the dictionary Dfor your generalpurpose spell checker use the Spell Checking Oriented Word Lists SCOWL  which can be downloaded from the CS Project Assignmentswebsite or fromhttpssourceforgenetprojectswordlistFor this project please download and use the US wordlist  just to make sure work is standardised across all teams submitting this assignment It might be fun to explore the otherEnglishlanguage wordlists available there but that wont be part of this project Whenyou download and unzip the zipped folder one of the files will be enUSlargetxt pleaselook at it and youll find its a long list of words which you should take as correctly spelledfor purposes of this assignmentYour writeup for the project should include your algorithm in psuedocode an Englishdescription of how it works an asymptotic complexity analysis and a correctness argumentas usual As part of the project you will also submit your codefully commented easilyreadable and in good stylebut do not include it in the writeup The writeup should beselfcontained and fully explain the algorithm also including illustrative examples of how itworks ie tests of your implementation showing its effectiveness and its limitations if thewriteup is not selfcontained and I need to look at your code to understand your algorithmor its correctness  complexity you will not receive full credit on this part of this projectCS is after all an algorithms class Improve SpellChecking PerformanceThere may be several different ways to improve the performance of your spelling correctionalgorithm or implementation and for this part of the project youll create and present atleast two of them one will be using adomainspecific dictionary  the other will be yourteams choice As always improvements that demonstrate greater depth and command of relevant concepts will earn a higher grade If youd like to discuss your teams proposed improvementswith me Ill be happy to meet with youplease contact me as early as possible in yourprocess Use A DomainSpecific DictionaryThe SCOWL dictionaries are generalpurpose word lists but for particular application domains spellchecking performance can be improved by incorporating domainspecific knowledge and tools One straightforward way to do this is to create a domianspecific dictionaryto use alongside a generalpurpose one For this part of the project improve performanceon CSspecific documents by doing the followingCreate a CSspecific word list  dictionary file derived from course lecture notescourse assignments and the course textbook using whatever methods youd like Besure that your CSspecific dictionary will be sufficient to let you demonstrate creditworthy improvements in performanceOnce youve created your CSspecific dictionary use it with your spell checker codeto find and correct errors in spelling or diction in this project assignment documentThere are some And theyre all put there on purpose    no really they are Inaddition do spell checking on this project assignment document using your algorithmfrom Section  with only the SCOWL word list and compare that to the performanceof your algorithm with your domainspecific dictionaryCome up with one or more other examples of spell checking CSrelated material todemonstrate your improvements For CSspecific material you can use your ownsubmitted HW files lecture notes passages from the textbook course assignments orother sources you chooseor you can take such sources and modify them specificallyto demonstrate your improvementsbut please make sure theyre CSspecific  andbe sure to say where theyre from in your writeupIn your writeup present examples and data that will convince a reader that your workhas indeed improved spelling correction for CSspecific documentsplease use whatevermetrics you think will be most effective to demonstrate the improvement For the particulartask of finding misspelled words in this document please present your work so that readerscan fully understand your process and replicate your resultsthis will include fully butconcisely describing the process by which you took text from this document for spellchecking and presenting all of the output from your spelling checker ie all the misspellingsyour algorithm found along with all the alternate words suggested for spelling correction Your Teams ChoiceCreate and present at least one other improvement to your original generalpurpose spellchecker One way to do this is to pick another domain of your choice and improve itsperformance on text thats specific to that domainyou are welcome to do this by creatinganother domainspecific dictionary and following the same general procedure as in Section above although doing something toosimilar to that in Section  will not demonstrate asmuch depth or command of concepts as if something more novel were at least considered aspart of your workYou are welcome to come up with other ways to improve your original spell checker tooYou might consider modifying your algorithm using other auxiliary word lists  dictionariesor data structures or other approaches The choice is yours I encourage your team toconsult with me early in your process about options youre considering however in case Ican offer perspective that will be helpful for youFor whatever improvements your team elects to implement your writeup should describe them clearly and present examples and data that demonstrate the extent of yourimprovements Any new or modified algorithms should be presented with pseudocode anEnglish description and brief correctness and complexity arguments if the changes fromprevious algorithms are deep enough to warrant new correctness  complexity analyses Anyauxiliary files used including new dictionaries  word lists should be included as separatefiles when submitting your work as noted in Section  below Present Your Work A DemoFor Project  you were part of a team that gave a presentation  minutes in lengthFor Project  you were part of a team that gave a presentation  minutes in lengthIts important to be able to give presentations of varying lengths to present your ideas todifferent audiences in different contextsFor this Project your team will give a demo of your work in a video recording that is minutes in length For full credit your team must record an effective demo lasting between minutes anything outside that range may not receive full credit Meeting these timeconstraints may require planning please feel free to ask me questions early in your processabout what to include in your demoFor this demo you should assume that your audience is me Or equivalently someonewith extensive background knowledge who wants to confirm the high quality of your workI know what edit distance is and what the recursive definition is that you were given butI want to verify that your team understands what youve done with it I want to confirmthat your implementations work correctly and efficiently but for full credit I only wantto be shown algorithmlevel details not implementationlevel details I want to make sureyour team understands the strengths and limitations of your implementations and I wantto make sure I dont miss any of the coolness demonstrated in your improvementsYour demo should include at least the following A description and demonstration of your iterative dynamic programming spellcheckalgorithm along with its time complexity and a comparison of its performance to therecursive spellcheck algorithm You may not have time to include a full complexityargument in the demo but at least say what its complexity is give a onesentencelongdescription of the key to its complexity analysis eg It has a single loop that goesthrough the input doing constant work each iteration so its a linear algorithm andpresent some data showing that its better I hope than the recursive version A description and demonstration of your CSspecific dictionary and your applications of it A description and demonstration of at least one other improvementYour team should choose what to include to make the demo as effective as possible withinthe available time This is not a standard technical presentation and you do not need tohave slides but it might be helpful to do so to present your ideas and the strengths of yourwork in a form thats easy to understand in  minutes You could instead choose to showyour code running in real time explaining it as it runs or you could combine those twoapproaches interleaving some of both Your team should decide the most effective way foryou to present your work in a short demoAs with previous Projects ideally the entire team would learn about all parts of thetopic being presented and workload would be balanced For this demo your presentationshould consist of each team member presenting for a single shift of  minutes in durationfollowed by a different teammate Presentations not following this structure may not receivefull credit for this assignment If there are questions about whats expected in terms of thedivision among teammates of time spent presenting please let me knowThe default expectation is that you will record your demo as a screen recording in ZoomIf you believe another option would be better for your team please see me about it assoon as possibleYour WriteUp Document In addition to the demo presentation itself your team willcreate an accompanying writeup document which should enable me to fully understand thework done for this project even if I do not see your demo This document must be typedsubmitted in PDF and contain all important algorithmic details It should contain at leastthe minimum needed for a presentation of your algorithms for this projectPseudocode and English descriptions of every algorithm including separate pseudocode English descriptions for each improvement that involves new or modified algorithmsAs part of this give brief descriptions of domainspecific dictionaries or other auxiliaryfiles created for your improvements enough for readers to understand their impact onyour tests  demo resultsConcise and convincing highlevel correctness arguments and complexity analyses ofyour algorithmsFor the Your Teams Choice improvement include  sentences about how yourteam came up with the ideas behind that improvementFor each implementation the results of testing showing that your algorithms and implementations work as intended If an implementation does not follow straightforwardlyfrom the pseudocode description of an algorithm please explain that in the relevantpart of your writeup Hopefully however this situation will not occur in your workOverall please include everything needed to concisely demonstrate your command of relevant techniques and concepts including recursive design dynamic programming and iterative bottomup algorithms effective domainspecific spell checking and anything relatingto your chosen improvments Including relevant examples can be especially helpful in communicating your work Ideally your writeup should demonstrate that you understand thestrengths and limitations of your algorithms and implementations if you choose to includeresults of testing that illustrate this that could improve the effectiveness of your writeupIn addition consider that whatever results of testing you include in your video demo areprobably important for understanding your work so you may want to include them in yourwriteup as well your writeup may also allow you to include additional examples howeverthat time constraints prohibit you from including in your demoOverall as with previous projects more credit will be given to submissions that demonstrate greater scope of work completed within the constraints of the project assignmentgreater depth of insight in the work completed and more correct and effective presentationsof the work As would be expected this will partly depend on the effectiveness of your algorithms your analyses your demo and your writeup Please keep your writeup as conciseas it can be while still containing all relevant information writeups that are much too longor too short are not maximally effective and may not receive full credit As always pleasefeel free to ask me questions about what to include in your writeup Submission InstructionsDeadline pm Dec  A designated submitter from each team should submitthe following items by emailing them to me eaaroncolbyeduA file containing all of the code of your implementations for this project along withthorough instructions on how to run your code in case readers  graders want toindependently valdiate your results For full credit readers  graders must be ableto easily run your code after reading your instructions Please feel free to ask me anyquestions about this This is not intended to be a codeheavy projectit is focusedon algorithms and explanationsso to save readers  graders the trouble of needingto switch among multiple small files to read and understand your code please put allof it in a single file called CS Proj Code Team INITIALSjava orpy Thismay be somewhat nonstandard for filenaming but it will be helpful in this contextIndividual files created for your improvements including your CSspecific dictionary Please give each file a helpful descriptive filename with your teams INITIALSin each filenameA PDF file with all of the slides used for the demo if any Please put two slides perpage as is done for CS course lecture notes and name the fileCS Proj Slides Team INITIALSpdf Your writeup document containing your algorithms analyses and other content asspecified above This should be a PDF file calledCS Proj WriteUp Team INITIALSpdf A video file or link to it of your demo Please put it in your Google Drive space ifits too large to simply include in an email Please name the fileCS Proj Demo Team INITIALSmpAs usual INITIALS is to e replaced by the initials of the team members in the group inthe team assignments Eg if Eric Aaron and Stephanie Taylor were the teammates a filefrom that team would be called CS Proj Slides Team EASTpdf Note the preferred mpformat If for any reason you cannot submit an mpvideo please letme know as soon as possibleLateness policy Because were at the end of the semester it is essential that this projectbe submitted on time For this project there will be a deduction of  for submission upto  hours lateie at any time on Dec which will take us to the end of the last daybefore Exams Work submitted on or after Dec  will receive a  deductionpleasesubmit your work before Dec As always extenuating circumstances will be consideredplease contact me as soon aspossible if any extenuating circumstances are impeding your work on this project