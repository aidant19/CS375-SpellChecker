Analysis of AlgorithmsCS  Fall Problem Set DueAT THE BEGINNING OF CLASS Wednesday November For this assignment standard file naming conventions apply Please submit your typewritten answers in a PDF file named CS PSuseridpdf where userid is replaced by your full Colby userid and submit it to your SubmittedWork folder Pleasereach out to me right away with any questions or concerns about thisIMPORTANT Some of these exercises may build upon topics covered in our Oct class meeting they are included here early so you can see all of the exercises onthis assignmentPlease recall the essential general style guidelines for writing algorithms in CSincluding restrictions on break and other flowofcontrol statementsas presented onPS Unless otherwise specified they apply for all work in CSPlease recall the guidelines for algorithms given on previous HW assignment sheetsThey continue to apply to all HWs in CSIn general there may be multiple correct ways of presenting an algorithm althoughexcessively inefficient or inelegant solutions may not receive full credit If you havequestions about whether your proposed solution is excessively inefficient or inelegantplease ask your ProfExercises on this problem set use the LList data structure as defined in our lecturenotes As with all LList exercises in CS the only functions you can use as primitives are the three given in the definition  firstrestcons and the check if a list isempty You must write any others yourself for these exercises along with correctnessarguments This is not intended to suggest that any new or additional LList functionsare necessary to solve any particular exercise if you find them helpful in some caseshowever this is intended to clarify that you are welcome to create helper functions orother new functions for use on LLists to use as part of your solutionsExercises on this problem set require inductive arguments of correctness Please seethe Lecture Notes of Oct  and Oct  for reminders and please feel free to see mewith any questionsA general note for CS When writing up your homework please present youranswers neatly and explain your answers clearly  giving all details needed to makeyour answers easy to understand Graders may not award full credit to incomplete orhard to understand solutions Clear communication isthe point on every assignmentIn general in CS unless explicitly specified otherwise answers should be accompanied by explanations Answers without explanations may not receive full credit Pleasefeel free to ask me any questions about explanations that might come upExercises Using our IBT data structure come up with a recursive algorithm that returns thesum of the elements in a tree Input IntBinTree T Output The sum of all of the integers in tree TWhat did you decide that the algorithm should return on an empty tree as inputExplain your reasoning for that decision a sentence or so could be sufficient and givean inductive explanation of the algorithms correctness You do not need to give acomplexity argument for this algorithmCommon elements with Problem Set  In contrast to the iterative algorithmyou created for HW here design a recursive algorithm to find all the common elements in two sorted LLists of numbers Please be sure to use the LList data structurefrom class For example for input lists   and   the output shouldbe the list   What is the maximum number of comparisons between list elementsyour algorithm makes if the lengths of the two input lists are mandn respectivelyPlease give both a pseudocode description and an English description to make it aseasy as possible to understand the algorithm and give an inductive explanation of youralgorithms correctness As usual for these LList exercises the only functions you canuse as primitives are the three given in the definition and the check if a list is emptyYou must write any others yourself for this exercise along with correctness argumentsThis does not however suggest that any are necessary to solve this problem You donot need to give a complexity argument for this algorithmNOTE Exercises below refer to nested LListsan LList can in the usual way have anLList as an element For example   is a valid LListFor terminology we say that an element of an LList is toplevel to distinguishit from elements of an LList nested inside another LList For example in LList  is toplevel while   and both instances of  are nottoplevel Please talk with your Prof if there are any questions about this definition Using the LList data structure write a recursive algorithm for the LLRemoveAll problem on lists Input Item xand LList L Assume xis not a list Output List Lcontaining exactly the elements of L not equal to x in the order in which they occur in L see examples belowThis removes alland onlytoplevel occurrences of xinL For examplesLLRemoveAll returns  LLRemoveAll returns   Notethat  is not toplevelLLRemoveAll returns   Note thatistoplevelLLRemoveAll returns   Onlythe toplevel s are removedAs usual give a short English explanation of correctness because the algorithm isrecursive make sure its an inductive explanation You do not need to give a complexityargument for this algorithm Unlike the LLRemoveAll function which only removes an item that is toplevel in anLList an LLDeepRemoveAll function removes an item at any level of nesting Usingthe LList data structure write a recursive algorithm for the LLDeepRemoveAll problemon lists Input Item xand LList L Assume xis not a list Output List Lwith the same structure and elements as L in that order except all occurrences of xare removed at any level of nesting in Lsee examples belowFor examplesLLDeepRemoveAll returns  LLDeepRemoveAll returns  LLDeepRemoveAll returns  LLDeepRemoveAll returns     For this exercise you will also need to test whether or not an element in a list isa list itself For this you can use the following or something very similar in yourpseudocode to test whether or not an item xis a listif typex  list if x is a listelse if x is not a listAs usual give a short English explanation of correctness because the algorithm isrecursive make sure its an inductive explanation You do not need to give a complexityargument for this algorithm