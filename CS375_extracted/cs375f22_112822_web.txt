CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  SA SA due already  SA out due pm Dec   SA involves working through an example of the alg o we covered last Monday  PS due Nov   No exercises beyond the Lookahead  PS out Nov  due Dec   PS will be the final PS for the semester there m ay be other SAs  PS SA SA grading update  Project  out today  Due pm Monday Dec   Severe late penalties if turned in during Examsie  after pm Dec   Intended team size  but talk to me if youd pre fer to work with a smaller team size CS   AllPairs Shortest Paths A VertexBased Recursive Solution   Were still considering shortest path p from i to j with intermediate vertices in V k Whats the relationship between p and the set of s hortest paths from i to j with intermediate vertices in V k  Depends on whether or not vertex k is an intermediate vertex on path p  If not then p is also a shortest path i to j wi th intermediate vertices in V k If so then p can be broken down into subpaths th at are shortest paths with intermediate vertices in V k  one subpath is from i to k the other is from k to j  Altogether if W is the weights matrix and           is the shortest path value from i to j using only intermediate vertices numbered up to k  kij dFloydWarshall Algorithm Bottomup AllPairs Shortest Paths FloydWarshall algorithm for allpairs shortest paths the bottomup method based on this decomposition  Computes matrices D k           where each         is the shortest pa th value from i to j using only intermediate vertices numbered up to k  What does this algorithm return What makes that a useful return value  What is the running time of this algorithm By the way which ones Warshall  kij d kij dNote This computes shortest path values not the paths See CLRS pages  about computing the paths themselves CS   A FloydWarshall Example  Computes matrices Dk           where each         is the shortest path value from i to j using only intermediate vertices numbered up to k  What D matrices does it compute for this example graph  kij d kij dSee CLRS Ch  A FloydWarshall Example  Computes matrices Dk           where each         is the shortest path value from i to j using only intermediate vertices numbered up to k  What D matrices does it compute for this example graph  kij d kij dCS   And Now For Something Completely Different Its CS   Change  Consider the coin changing problem  Given a number nonnegative integer nof cents make exactly that much change using the smallest number of coins  Assuming you have only pennies nickels dimes an d quarters to work with what would your algorithm be  How would you explain correctness  optimality And now for something completely different Well not that kind of change Greedy Algorithms GreedyChoice Property and Optimal Substructure  It turns out the coin changing problem can be solved by a greedy algorithm  Choose the best option first keep doing that un til problem is solved  Here choose the biggest coin say it has value c that could be used for ncents change  Then repeat that for the nccents in the remaining subproblem  For this greedy method to work  Optimal substructure An optimal solution with kcoins is composed of optimal solutions with kcoins for the relevant number of cents Greedychoice property  By choosing locally the greedy choice first and continuing this method we get globally an op timal solution Actually also that kind of change This makes sense It basically says if choosing gre edily wont help and optimal solutions on subproblems wont help then dont use a greedy m ethod CS   The Trees  A tree sometimes called a free tree  is an acyclic connected undirected graph  Weve seen rooted trees such as binary trees before but from a more general graphoriented perspective trees do not ne ed to have roots  Important properties of free treesthe below stat ements are all equivalent for undirected graph G  V E  G is a free tree  Any two vertices in G are connected by a unique si mple path  G is connected but if any edge is removed the re sulting graph is disconnected  G is connected and E  V G is acyclic and E  V G is acyclic but if any edge is added to G the r esulting graph has a cycle A collection of possibly disconnected trees is called a forest  Really See CLRS Sec B and B See also the Rush album Hemispheres  which many people may find even more dense and inaccessible than the CLRS textbook CS   More Trees  With rooted trees recall vocabulary  Ancestor  descendant  Parent  child  sibling  Internal node  external node  leaf  Depth  height of a node in the tree  Given a connected undirected graph G  VE many subgraphs of G are trees  Consider an acyclic subgraph that connects all the  vertices in V  How do we know its a tree  How many edges must it have Minimum Spanning Trees MSTs  Given a connected undirected graph G  VE an acyclic subgraph that connects all the vertices in V is a spanning tree of G  Its a tree and it covers spans all the verti ces of G  For network G represents unique connections  pat hs between each pair of nodes in G  Consider the minimum spanning tree MST problem given weighted undirected connected graph G find a spanning tree  T with minimal total weight over all edges in T CS   A Generic MST Algorithm Minimum spanning trees can be grown one edge at a time  Some vocabulary  A cut SVS of an undirected graph GVE is a partiti on of V  An edge uv crosses a cut if u is in S and v is in VS A cut respects a set of edges if no edge in the set crosses the cu t  A light edge is a minimumweight edge satisfying a property eg  a light edge that crosses a cut In the not too distant future  MST K How can this vocab be used to describe an MST algorithm Safe here means an edge that can be added without violating the property that A is a subgraph of an MST Digression How do we argue correctness of the algorithm Greedy MST Algorithms  Greedy strategy for building MSTs Add the best edge from edge set E of graph G repeat until an MST is built  Overall structure Turn a forest some trees have only  node into a tree by adding light edges connecting separate comp onents  Question What is the best edge the greedy choice to add  A possibility Pick the leastweight edge from E t hat connects two separate components  Possibly results in multiple trees growing       in the forest but all will be connected by the end  of the algorithm  Ie maintains a disjoint set of subtrees Invariant All subgraphs are trees How do we know 