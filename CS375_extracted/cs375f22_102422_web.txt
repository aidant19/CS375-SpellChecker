CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  Grading update  SA returned  SA in progress  PS due Oct   Project  first part due today CS   Business Project   Project  out due Nov   Parts of Project   Design Exhaustive Search Algorithms  Your team will collectively design exhaustive search algorithms for  problems  Improve Time Efficiency  Your team will pick one of the problems and make your exhaustive search algorithm more efficient  Reduction  For the same problem chosen for part  above you will reduce that problem to one of the other seven problems from part   Create and Give a Presentation  Your team will present work from the previous three parts of the assignment using loop invariants where appropriate to explain correctness Hint  Your team may want to be strategic about which of the  problems you choose to focus on for your improvements reduction and presentation Pick a problem for which you can do good work Have you read through Proj yet Would you have preferred the assignment sheet to be broken up into separate documents Time Complexity Classes Illustrated Complexity Class What we call it Example algorithms   objects O Constant Print Hello World stack operations and much much morebe careful Olg n Log time Binary search On Linear Exhaustive search of an array linear search Merge as used in MergesortOn lg n n lg n Mergesort Heapsort Recall sorting can be done in n lg n On nsquared quadratic Insertion  selection  bubble s ort several graph algos On ncubed cubic My favorite algorithm  a graph algoOn Exponential Number of subsets of a set of size n On Factorial Number of orderings  permutations of elements of a list of length nThe greenshaded ones are examples of polynomial time classesupper bounded by nkfor some constant k Problems solvable in polynomial time are consider ed tractable More about this later in the semester CS   On Merge  See CLRS page  for specfications  loop invariant  In the function call MergeApqr  what are A p q and rTo me one cool thing about this algo is how effective it can be to do a constant amount of work for each element in the input Sorta like with stack operationsa powerful data structure with fast operations This isnt Mergesort Its just the Merge algo used in Mergesort See CLRS pg  On Merge  See CLRS page  for specfications  loop invariant  In the function call MergeApqr  what are A p q and rHow would you explain the time complexity of this algorithm What is the algorithms space complexity This isnt Mergesort Its just the Merge algo used in Mergesort See CLRS pg  CS   On lg n Mergesort  Mergesort is a classic example of an n lg n algorithm  Algo idea Repeatedly split input list in half sor t each half separately then Merge the two halves together  Uses the Merge function as a subroutine  Pretty fast algo because Merge is On  Pseudocode from CLRS See CLRS pg  On lg n Mergesort  Mergesort is a classic example of an n lg n algorithm  Algo idea Repeatedly split input list in half sor t each half separately then Merge the two halves together  Pseudocode from CLRS See CLRS pg  How would we explain the complexity of this recursive algorithm Well get to correctness later in the semester CS   On lg n Mergesort  Mergesort is a classic example of an n lg n algorithm  Algo idea Repeatedly split input list in half sor t each half separately then Merge the two halves together  Pseudocode from CLRS See CLRS pg  How would we explain the complexity of this recursive algorithm Well get to correctness later in the semester Runtime Tn as a recurrence Tn  Tn  n T   Solves to Tn  n lg n Well do much more of this later in the semester For now focus more on where the recurrence came from and how it represents this algos runtime rather than on how to solve it CS   Hey Prof werent you gonna talk about what the fastest sorting algorithm is  Different sorting algorithms will perform differen tly on different inputs so there isnt one thats always optimal    but whatevers implemented in Javas Collectionssort methods is probably a good choice for a fastest ge neral purpose sorting algorithm Yes TimSort  Different sorting algorithms will perform differen tly on different inputs so there isnt one thats always optimal    but whatevers implemented in Javas Collectionssort methods is probably a good choice for a fastest ge neral purpose sorting algorithm  As of Java SE TimSort became Javas implemented algorithm for Collectionssort  What is TimSort A modified version of MergeSort That runs a version of InsertionSort on inputs of s ize   Why would it do this And what is the asymptotic co mplexity of this algorithm CS   TimSort  Different sorting algorithms will perform differen tly on different inputs so there isnt one thats always optimal    but whatevers implemented in Javas Collectionssort methods is probably a good choice for a fastest ge neral purpose sorting algorithm  As of Java SE TimSort became Javas implemented algorithm for Collectionssort  What is TimSort A modified version of MergeSort That runs a version of InsertionSort on inputs of s ize   Why would it do this And what is the asymptotic co mplexity of this algorithm Asymptotic complexity is On lg n even with using insertion sort Do you see why Remember the role of threshold value n in asymptotic complexity And maybe remember method from our Projecta modif ied MergeSort that did something different on inputs of size less than its  n   TimSort  Different sorting algorithms will perform differen tly on different inputs so there isnt one thats always optimal    but whatevers implemented in Javas Collectionssort methods is probably a good choice for a fastest ge neral purpose sorting algorithm  As of Java SE TimSort became Javas implemented algorithm for Collectionssort  What is TimSort A modified version of MergeSort That runs a version of InsertionSort on inputs of s ize   Why would it do this And what is the asymptotic co mplexity of this algorithm Asymptotic complexity is On lg n even with using insertion sort Do you see why Why would it do this Because insertion sort is faster than mergesort on s mall inputs Empirical testing set the value at  Theres more to TimSort than whats on this slidewe wont discuss it in CS but feel free to look it up and ask me questions if yo ud like CS   Common myths about recursion debunked  What impressions do you have about recursion  Here are some things Ive heard paraphrased slightly  Recursion is basically just a party trick  Recursive design is just trial and error  Recursion is slow compared to iteration  People dont really use recursion Admittedly Ive mostly heard them in the context o f a student saying I used to think this was true but now I dont anym ore But still Ive heard them or something very much l ike them If theres anything youd like to add to this list  let me know CS   Common myths about recursion debunked  What impressions do you have about recursion  Here are some things Ive heard paraphrased slightly  Recursion is basically just a party trick  Recursive design is just trial and error  Recursion is slow compared to iteration  People dont really use recursion Admittedly Ive mostly heard them in the context o f a student saying I used to think this was true but now I dont anym ore But still Ive heard them or something very much l ike them If theres anything youd like to add to this list  let me know Its actually very useful There are methods to use People really do it can be very natural to use Well sort of It can be But its not as bad as i t used to be and related concepts can enable some very fast code  A Functional Digression The Functional Programming Paradigm Functional programming is a paradigm for structuring code and accessing data  Has been used since late s  Languages include LISP Scheme Scala F Clojure  OCaml Haskell  Also central to JavaScript R  Industry users Google Facebook Twitter ATT J ane Street Wolfram etc sources below not from personal experience  Applications to data science  etc Sources httpsgithubcomreadmefeaturedfunctionalprogr amming httpsgithubcomreadmeguidesfunctionalprogram mingbasics httpswwwjanestreetcomtechnologyhttpsreferencewolframcomlanguageguideFuncti onalProgramminghtml httpsenwikipediaorgwikiFunctionalprogrammin g httpswwwsmashingmagazinecomdontbesca redoffunctionalprogramming CS   A Functional Digression The Functional Programming Paradigm  Some important features of pure functional programming  Immutable data  Stateless functions everything selfcontained  no side effects  Uses recursion for iteration rather than loops Supports parallel computation recall applications to data science  Code can be easier to show correct  debug For those of us who like to think about programming  languages at the theory and design level it may be interesting to note tha t the last three of the above five features kinda follow from the first two This is subtle and well beyond the scope of CS but please feel free to talk with me more about it outside of class if you d like A Functional Digression The Functional Programming Paradigm Functional programming is a paradigm for structuring code and accessing data Why would I use functional programming When you think about wellstructured software you might think about software thats easy to write  easy to debug  and where a lot of it is reusable  Thats functional programming in a nutshell Granted one might argue that its not as easy to write  but lets touch on the other two points while you  wrap your mind around the functional paradigm Once you get used to it its selfevident Its cl ear I look at my function What can it work with Its arguments Anything else No Are  there any global variables No Other module data No Its just that   Robert Virding coinventor of Erlang source httpsgithubcomreadmeguidesfunctional programmingbasics Author Cassidy Williams 