CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  Smaller Assignment  due by beginning of class Sep t   Follow file naming conventions See assignment she et  Submit to your SubmittedWork Folder in Google Drive  space see email  Graded work will be returned to you in your Submit tedWork folder too  Problem Set  out tonight due Sept  by beginn ing of class as usual  Any questions about submission instructions for PS s and SAs  TA Hours held in Davis  also posted on course  website  Sundays pm  Tuesdays pm  Thursdays pm  If anyone has trouble reading lecture notes from c ourse website please let me know  Thank you for your emails I will to reply to each  of them soon if I havent already CS   Whats The Fastest Sorting Algorithm  Of all the things we do with data sorting is among the most important  Improves usability  Realworld data is often found sorted  Sorting is among the most important algorithms  How do we sort efficiently  Many classic algos to choose from What sorting algos do you know This is a sneakyuseful realworld tip presorting data before using them as input to an algorithm can sometimes enable more efficient algorithms But sometimes it doesnt help Analyzing the algo and understanding the input are what helps us make good design choices Reminder Specification of the sorting problem Input A sequence L of n numbers a   a nOutput A sequence L of n numbers b   b n that reorders the input sequence perhaps leaving them unchanged such that b  b     b nWhats The Fastest Sorting Algorithm  Of all the things we do with data sorting is among the most important  Improves usability  Realworld data is often found sorted  Sorting is among the most important algorithms  How do we sort efficiently  Many classic algos to choose from What sorting algos do you know  The answer to what sorting algo to use for time efficiency depends on understanding properties of algorithms and properties of input data This is a sneakyuseful realworld tip presorting data before using them as input to an algorithm can sometimes enable more efficient algorithms But sometimes it doesnt help Analyzing the algo and understanding the input are what helps us make good design choices CS   Insertion Sort In Pseudocode Are you familiar with Insertion Sort  In English how would you describe how it works Be sure to read CLRS Ch  about pseudocode conventionsthose conventions will apply throughout CS Are you familiar with pseudocode CS   Insertion Sort In Pseudocode Are you familiar with Insertion Sort  In English how would you describe how it works Be sure to read CLRS Ch  about pseudocode conventionsthose conventions will apply throughout CS Are you familiar with pseudocode Insertion Sort In Pseudocode Is Insertion Sort the fastest sorting algo And how would we know What do you recall about time complexity from CS Lets do some complexity analysis warmup  review CS   Insertion Sort In Pseudocode Is Insertion Sort the fastest sorting algo And how would we know Time complexity analyses Note for loops are inclusive of boundarieshere the algo goes through the loop for every value of j from  to Alength inclusive At the end of a for loop the index variable is incremented beyond the boundary conditionhere the loop ends with j having  value Alength   Analyzing Algorithms Sum Some Mathematical Foundations  Summations  Arithmetic in i   Geometric in ci  for constant c  What about for c   Sum puns are just too easy Sum Nightsfun Well return to Insertion Sort on the next slide B ut first These summation formulas will be relevant on our ne xt Smaller Assignment to be assigned soon and due next Monday Sept  See CLRS Appendix A for these summation formulas  and please let me know if you have any questionsCS   Insertion Sort In Pseudocode Is Insertion Sort the fastest sorting algo And how would we know Time complexity analyses nstands for the input sizehere the length of array An Note for loops are inclusive of boundarieshere the algo goes through the loop for every value of j from  to Alength inclusive At the end of a for loop the index variable is incremented beyond the boundary conditionhere the loop ends with j having  value Alength   Is there an offbyone error on line  Why is it n times when the loop goes from  to nInsertion Sort In Pseudocode Is Insertion Sort the fastest sorting algo And how would we know Time complexity analyses nstands for the input sizehere the length of array AnNote for loops are inclusive of boundarieshere the algo goes through the loop for every value of j from  to Alength inclusive At the end of a for loop the index variable is incremented beyond the boundary conditionhere the loop ends with j having  value Alength   tjstands for the number of times the while loop condition is tested for a given value of jCS   Insertion Sort In Pseudocode Is Insertion Sort the fastest sorting algo And how would we know Time complexity analyses  Whats the time complexity of Insertion Sort What are the best case and worst case inputs to Insertion Sort for a given input size nInsertion Sort In Pseudocode Is Insertion Sort the fastest sorting algo And how would we know Time complexity analyses  Whats the time complexity of Insertion Sort  Best case complexity Worst case complexity What are the best case and worst case inputs to Insertion Sort for a given input size nBest case An already in sorted order Worst case An in REVERSE sorted order Do you see why CS   Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size nLines  and  all together add up to something linearsome constant times nLines  the inner loop  are a bit more complicated they add up to something that involves that summation formula see Appendix A Add up the  cost  times  for each row what do we get Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size nLines  and  all together add up to something linearsome constant times nLines  the inner loop  are a bit more complicated they add up to something that involves that summation formula see Appendix A  but the term being added  tj is always jin the worst case Add up the  cost  times  for each row what do we get CS   Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size nAdd up the  cost  times  for each row what do we get Time complexity from adding cost  times Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the worst case complexity Time complexity from adding cost  times In worst case tj j each time so What does our expression for runtime Tn turn into CS   Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the worst case complexity Time complexity from adding cost  times Plug in tj j  Note summation is same for c  c In worst case tj j each time so What does our expression for runtime Tn turn into Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the worst case complexity Time complexity from adding cost  times In worst case tj j each time so Tn is order of n Plug in tj j  Note summation is same for c  c Wed say Insertion Sort is an n algorithm See CLRS Ch   pg  CS   Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the best case complexity Add up the  cost  times  for each row what do we get Time complexity from adding cost  times Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the best case complexity Add up the  cost  times  for each row what do we get Time complexity from adding cost  times In best case tj  each time so CS   Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the best case complexity Add up the  cost  times  for each row what do we get Time complexity from adding cost  times In best case tj  each time so Plug in tj  which means tj    So the cand cterms go away and the rest go well like the below Time Complexity of Insertion Sort  Whats the time complexity of Insertion Sort  Our default is to look at the worstcase complexity of the algo on an input of size n So whats the best case complexity Add up the  cost  times  for each row what do we get Time complexity from adding cost  times In best case tj  each time so This means Insertion Sort is linear in the best case But we dont consider it a linear algo because thats not its worst case time complexity 