analysis of algorithms  cs  fall   problem set   due at the beginning of class monday october    for this assignment standard file naming conventions apply please submit your type- written answers in a pdf file named cs ps userid pdf where userid is re- placed by your full colby userid and submit it to your submittedwork folder  please reach out to me right away with any questions or concerns about this   from your textbook clrs please read chapters     and   note some material there is more mathematically intense than we need don't worry about those parts but please do read over the parts that give basic ideas behind content covered in lecture e g  o   notation functions' orders of growth loop invariants    important some of these exercises may build upon topics covered in our oct   class meeting they are included here early so you can see all of the exercises on this assignment    please recall the essential general style guidelines for writing algorithms in cs  including restrictions on break and other flow-of-control statements as presented on ps  unless otherwise specified they apply for all work in cs    a general note for cs when writing up your homework please present your answers neatly and explain your answers clearly giving all details needed to make your answers easy to understand  graders may not award full credit to incomplete or hard to understand solutions  clear communication is the point on every assignment   in general in cs unless explicitly specified otherwise answers should be accompa- nied by explanations  answers without explanations may not receive full credit  please feel free to ask me any questions about explanations that might come up  exercises    clrs exercise  - page  with slight modifications  clarifications   as stated in the clrs exercise write pseudocode for linear search that meets the given specifications  please recall cs instructions not to use break or similar flow-of-control statements in your algorithms    as stated in the clrs exercise give a correctness argument for your pseudocode using a loop invariant that you create specifically for that purpose  be sure to clearly state your loop invariant    then follow the three steps shown in lecture notes to help explain the correctness  of your linear search algorithm  a give a very short and convincing explanation of how the loop invariant is  true before the first iteration of the loop     b give a concise and convincing explanation of how your pseudocode ensures the invariant is true after each successive iteration  refer directly to the pseudocode citing specific lines of pseudocode in your explanation   c give a concise and convincing explanation of how the algorithm meets its specifications  refer specifically to both the invariant property and the spec- ifications as part of this explanation referring to specifications is essential for establishing algorithm correctness  your loop invariant should be created so that it gives helpful information about what is known to be true when the loop is finished please be sure to use that information in your correctness argument    consider this pseudocode algorithm for the sorting method selection sort  selectionsorta       n  for i   to lengtha                       min  i for j  i   to lengtha  if aj  amin  min  j   the next  lines swap ai and amin using a temporary variable temp  ai ai  amin amin  temp  here's a proposed loop invariant for the outer for loop in this algorithm  subarray a  i  contains the i  smallest elements of a in sorted order and ai  n consists of the remaining values of a no constraint on order   recall that by convention an array or a sequence for which the specification has a first index that is greater than the last such as an    n is considered to be empty  working with that proposed loop invariant for the outer for loop of selectionsort follow the three steps shown in lecture notes and in exercise  to explain the correct- ness of selectionsort  your answers for those three parts do not need to be lengthy answers a few sentences each could be enough as long as those sentences contain the key details   hint for the first of the three parts a very short and convincing expla- nation of how the invariant is true before the first iteration of the loop in this case note that before the first iteration i is   what can be said about subarray a  i    also recall the specification for the sorting problem also repeated here for convenience   input sequence of numbers a        an  output permutation reordering b        bn of the input sequence  perhaps leaving them unchanged such that b  b         bn     this specification is the same as the one presented in lecture notes capturing our intuitions of what it means for a list to be sorted  please see me if there are questions about it or about any part of the exercise    anagrams prof  ram sagan at the portland institute of technology which does  not exist was recently listening to these song lyrics which actually do exist  miracles will have their claimers more will bow to rome        lyrics written by neil peart  from track  on the album presto by the band rush   and was suddenly inspired to ask you for help with the anagrams problem  our definition of an anagram is  definition two strings s and t are anagrams exactly when s is formed from the same letters as t used the same number of times as in t   for examples miracles and claimers are anagrams as are more and rome  but secures is not an anagram of rescue even though secures uses the same letters as rescue the letters c e r s and u it does not use them the same number of times because secures uses s twice and rescue uses s only once  additionally comic is not an anagram of cosmic because the two words do not use exactly the same letters cosmic uses an s but comic does not   using that definition here are specifications of the anagrams problem   input strings s t of lowercase letters from the alphabet for english i e  the  letters of the latin  roman alphabet  assume there are no spaces punctuation capital letters etc  in the strings only lowercase letters  for complexity analyses let m stand for the length of s and let n stand for the length of t    output true if s is an anagram of t false otherwise   to help prof  sagan answer the following questions  a what simple check would you do before checking any arrangements of letters your answer should be something that is constant time in fact it must be con- stant time in java but still very helpful for this problem in what ways would it help with all of the algos you give below  b then give a brute force algorithm to solve this problem that checks all permuta- tions of either s or t  what is its asymptotic time complexity expressed as a  bound  c then give a n algorithm to solve this problem  d then give a n lg n algorithm to solve this problem   e then give a n-time o-space complexity algorithm to solve this problem  hint you may want to use some auxiliary data structures for this algorithm but you'll only need o additional space     as is conventional we're asking about worst case time complexity unless otherwise specified   to earn full credit be sure to include all of the following for each of the four algorithms   pseudocode accompanied by a brief english explanation of what the algorithm  does   a concise but convincing explanation of correctness   a concise but convincing explanation of its time complexity   a concise but convincing explanation of its space complexity  please be sure to document any important assumptions made or used in your com- plexity analyses  hint you may notice that the complexities of the algorithms above are given as functions of only n rather than as functions of both m and n  the simple check as the answer to part a makes it sensible to do this if you don't come up with that particular simple check or don't see why these complexities can be given as functions of only n you are welcome to give a mn algorithm for part c a m lg m  n lg n algorithm for part d and a m  n-time o-space algorithm for part e       or even better you can ask me or a ta for help  optional exercise  the exercise below is one that i think is a good learning experience if you'd like to do it  do not submit this exercise  it will not be counted for a grade  if you're looking for a little more experience with a different take on complexity analysis however it could be worthwhile for you to work on it and i'll be happy to work with you on it or answer your questions just let me know   clrs exercise  - page    this exercise asks you to consider an average case time complexity analysis as well as worst-case analysis  answer all of the questions posed in the exercise not just the last question involving  notation and as always please give short but convincing explanations of your answers  the application of average case analysis to this exercise is meant to be relatively intuitive please read the chapter about it pages  and if there are ques- tions about average case analysis please feel free to ask me    