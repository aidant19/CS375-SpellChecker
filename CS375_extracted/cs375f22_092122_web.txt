CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Practice with Graphs and Asymptotic Complexity Notation  Consider a graph G  VE with nnodes ie Vn  How many edges might it have in edge set E  What can we say about its number of edges using a symptotic complexity notation  O   CS   Practice with Graphs and Asymptotic Complexity Notation  Consider a graph G  VE with nnodes ie Vn  How many edges might it have in edge set E  What can we say about its number of edges using a symptotic complexity notation  O   Any edge has the form v i vj where both v i vjare in V How many possible edges could there be They may not all be in E Were just seeing whats possible There are n possible choices for v i n possible vertices  nodes Similarly for each of those n choices there are n  choices for vjSo there are nn  n possible pairsthat is n possible edges In asymptotic complexity notation then there are  edges What can we say here Try it where G has  nodeswe see  possible edges including selfloops from a node to itself Practice with Graphs and Asymptotic Complexity Notation  Consider a graph G  VE with nnodes ie Vn  How many edges might it have in edge set E  What can we say about its number of edges using a symptotic complexity notation  O   Any edge has the form v i vj where both v i vjare in V How many possible edges could there be They may not all be in E Were just seeing whats possible There are n possible choices for v i n possible vertices  nodes Similarly for each of those n choices there are n  choices for vjSo there are nn  n possible pairsthat is n possible edges In asymptotic complexity notation then there are On edges We cannot make any statement using or notation we only have enough information for an upper bound Try it where G has  nodeswe see  possible edges including selfloops from a node to itself CS   Business  Grading update  SA grading not before the weekend  Another SA may be out soonIll email if so  Problem Set  due already  PS out soon perhaps tonight or perhaps Friday  Ill email when its out  but you have things to work on in the meantime suc h as  Project  due Sept   Please direct projectspecific questions to me ra ther than to TAs  Questions about general concepts that show up on t he project eg Theta notation though rather than specifics can  go to TAs CS   Business pt   Class will be cancelled Monday Sept   Will be an optional makeup class later in the sem ester  General grading notes  If we leave a note See Prof if youd likeits r ecommended  If we leave a note See Profplease see me I thi nk its important  If you come to office hours please let me know youre there  Even if Im with another student please say hi an d let me know  It gives me info so I can multitask efficiently an d help more people A tiny bit about the course the Remix Some Main Ideas  Recall important elements for any course on algori thms  Classic algorithms which you might use or adapt f or your work  Algorithm design techniques and paradigms  Creating and working with algorithm specifications Analyzing and explaining an algorithms correctnes s  Analyzing and explaining an algorithms complexity Well spend a lot of the semester on these important elements Design Paradigm Analysis Complexity Efficiency Correctness Iterative Counting Counting number of operations  amount of space used Loop invariants Recursive Solving recurrences Induction CS   ProblemSolving Warmup  A problemsolving warmupconsider the following game  An odd number of red balls and any number of green  balls are put in a bag An infinite supply of green balls is available  A move consists of removing two balls from the bag and applying the fo llowing rule If the balls are the same color they are both thrown away  and a new green ball is placed in the bag If the balls are of diff erent colors the red one is returned to the bag and the green one is discard ed The game ends when it is no longer possible to pick two balls fro m the bag  Consider a oneplayer version where the player can  look in the bag before removing two balls from it  Give a method strategy  algorithm so that when  the game is over there is one ball left in the bag and it is greenProblemSolving Warmup  A problemsolving warmupconsider the following game  An odd number of red balls and any number of green  balls are put in a bag An infinite supply of green balls is available  A move consists of removing two balls from the bag and applying the fo llowing rule If the balls are the same color they are both thrown away  and a new green ball is placed in the bag If the balls are of diff erent colors the red one is returned to the bag and the green one is discard ed The game ends when it is no longer possible to pick two balls fro m the bag  Consider a oneplayer version where the player can  look in the bag before removing two balls from it  Give a method strategy  algorithm so that when  the game is over there is one ball left in the bag and it is green Give a method strategy  algorithm so that when  the game is over there is one ball left in the bag and it is red CS   Loop Invariantsa Warmup  A problemsolving warmupconsider the following gam e  An odd number of red balls and any number of green balls are put in a bag An infinite supply of green balls is available A move consists of removing two  balls from the bag and applying the following rule If the balls are the same color t hey are both thrown away and a new green ball is placed in the bag If the balls are of differe nt colors the red one is returned to the bag and the green one is discarded The game ends when it i s no longer possible to pick two balls from the bag  Consider a oneplayer version where the player can look in the bag before removing two balls from it  Give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag and it is green  Give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag and it is red  What useful loop invariant do you have in mind when designing  explaining your algorithm  Maybe it involves the odd  evenness the parity  of the number of red or green balls A loop invariant is something thats true about the variables every time the algo goes through the loop every timeso invariant But is false once the loop ends in a way that gets  to the problems solution Game description repeated from prev slide Loop Invariantsa Warmup  A problemsolving warmupconsider the following gam e  An odd number of red balls and any number of green balls are put in a bag An infinite supply of green balls is available A move consists of removing two  balls from the bag and applying the following rule If the balls are the same color t hey are both thrown away and a new green ball is placed in the bag If the balls are of differe nt colors the red one is returned to the bag and the green one is discarded The game ends when it i s no longer possible to pick two balls from the bag  Consider a oneplayer version where the player can look in the bag before removing two balls from it  Give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag and it is green  Give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag and it is red  What useful loop invariant do you have in mind when designing  explaining your algorithm  Maybe it involves the odd  evenness the parity  of the number of red or green balls Loop Invariant property  Every time through the game until theres one ba ll left The overall number of balls decreases by  AND The number of red balls remains oddeither decreases  by  or by  Game description repeated from prev slide CS   Loop Invariantsa Warmup  A problemsolving warmupconsider the following gam e  An odd number of red balls and any number of green balls are put in a bag An infinite supply of green balls is available A move consists of removing two  balls from the bag and applying the following rule If the balls are the same color t hey are both thrown away and a new green ball is placed in the bag If the balls are of differe nt colors the red one is returned to the bag and the green one is discarded The game ends when it i s no longer possible to pick two balls from the bag  Consider a oneplayer version where the player can look in the bag before removing two balls from it  Give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag and it is green  Give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag and it is red  What useful loop invariant do you have in mind when designing  explaining your algorithm  Maybe it involves the odd  evenness the parity  of the number of red or green balls Loop Invariant property  Every time through the game until theres one ba ll leftThe overall number of balls decreases by  AND The number of red balls remains oddeither decreases  by  or by  How does this help you solve the problem Game description repeated from prev slide CS   Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true  So how many iterations until it reaches  How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size On iteration k input is of size  n k do you see that pattern Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true  So how many iterations until it reaches  How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size On iteration k input is of size  n k do you see that pattern So reaches    nn  on iteration kwhen n kCS   Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true How could we even phrase that question Recall one of our CS pro tips If you want to talk about something give yourself a word  name for it Eg declaring a variable rather than recomputing s omething repeatedly So this questionwhats the exponentis something w e want to ask repeatedly We need to have a word  function for it Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true How could we even phrase that question  The logarithm function lets us ask the question  So for x   wed say x  log  read as log base  of   Examples log    log    log     Logarithms are exponents so rules of exponentiation apply  Eg log bmn  log bm log bnIf bx mand by n  then bxb y bxy  mn CS   Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true Notation  x  log   So how many iterations until it reaches  How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size On iteration k input is of size  n k do you see that pattern So reaches    nn  on iteration kwhen n kGetting back to where we left off a couple of slides ago Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true Notation  x  log   So how many iterations until it reaches  How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size On iteration k input is of size  n k do you see that pattern So reaches    nn  on iteration kwhen n kGetting back to where we left off a couple of slides ago log n   Notation this is not log n CS   Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true Notation  x  log   So how many iterations until it reaches  How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size On iteration k input is of size  n k do you see that pattern So reaches    nn  on iteration kwhen n kGetting back to where we left off a couple of slides ago log n   Watch for offbyone errors Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true Notation  x  log   Can you think of an algo that works like this on its input How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size  On iteration k input is of size  n k do you see that pattern So reaches    nn  on iteration kwhen n kThat is  log n   iterations Watch for offbyone errors CS   Log It Questions about exponents  When solving equations we may want to know the value of an exponent  Eg in equation x  we might want to ask what value of xmakes that true Notation  x  log  How does this come up in analyzing algorithm comple xity Imagine an algo that takes input of size nand then goes through a loop or recursion getting rid of half the remaining input  each time until theres only  left Input of size non iteration  n on iteration  n on iteration   How many iterations until input of size  On iteration k input is of size  n k do you see that pattern So reaches    nn  on iteration kwhen n kThat is  log n   iterations Watch for offbyone errors Exercise If input size was n n  n    then how many iterations until input size CS   Time Complexity Classes Illustrated Complexity Class What we call it O Constant Olg n Log time On Linear On lg n n lg nOn nsquared quadratic On ncubed cubic On Exponential On Factorial What algos do you know in each complexity class Do you have any favorites These are common complexity classes but there are many others Time Complexity Classes Illustrated Complexity Class What we call it Example algorithms   objects O Constant Print Hello World stack operations and much much morebe careful Olg n Log time Binary search On Linear Exhaustive search of an array linear search Merge as used in MergesortOn lg n n lg n Mergesort Heapsort Recall sorting can be done in n lg n On nsquared quadratic Insertion  selection  bu bble sort several graph algos On ncubed cubic My favorite algorithm  a graph algoOn Exponential Number of subsets of a set of size n On Factorial Number of orderings  permutations of elements of a list of length nThese are common complexity classes but there are many others 