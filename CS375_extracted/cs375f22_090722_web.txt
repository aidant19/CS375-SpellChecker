 cs --    cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   instructor info  professor eric aaron  website httpscs colby edueaaron  office davis   office hours m -pm t -pm  w -pm th am-noon  and by email appointment  phonevoicemail  -  e-mail eaaroncolby edu  course website httpscs colby educoursesfcs the above email address is the best way to contact me my website is the most  important info on this slide  the rest of it can be found there  cs --    a tiny bit about the course  your textbook   required course textbook  introduction to algorithms  rd edition by  cormen leiserson rivest and stein  online version is available free through the colby library   recommended textbook  introduction to the design and analysis of algorith ms  rd edition by levitin  not required    good secondary source with different coverage som e images and exercises  in the class may come from that book see link from cs website  additional notes page  a tiny bit more about the course  components of an algorithms course   important elements for any course on algorithms   classic algorithms which you might use or adapt f or your work   algorithm design techniques and paradigms   creating and working with algorithm specifications  analyzing and explaining an algorithm's correctnes s   analyzing and explaining an algorithm's complexity  communication is extremely important to our field   e g  explanations of correctness and complexity  cs --    a tiny bit more about the course  components of an algorithms course   important elements for any course on algorithms   classic algorithms which you might use or adapt f or your work   algorithm design techniques and paradigms   creating and working with algorithm specifications  analyzing and explaining an algorithm's correctnes s   analyzing and explaining an algorithm's complexity  communication is extremely important to our field   e g  explanations of correctness and complexity   this course is not focused on programming it's fo cused on algorithms   more about that soon   programming will not be required on any assignment  except possibly the last  project assignment  a tiny bit more about the course  components of graded work in cs   problem sets   due at least one week after being assigned   smaller assignments   typically due beginning of next class meeting   may be discussed in next class meeting   project assignments  in general no programming required   but please feel free to code stuff up if you'd li ke   work in teams   conceptually connected problems  applications wi th team write-up   class participation   anything that constructively contributes to class discussion speaking in  class making points in office hours making points  by email etc  this course is about  algorithms  not  programs although  the two are certainly  related more about  this soon really  cs --    comparing cs  cs  courses about complexity and correctness of algorit hms  cs -- math  mathematical reasoning not required   no experience needed with deep mathematics not ev en calculus      or logical reasoning  proof techniques   focused more on what  how  not deeply about why  cs -- prerequisite  math    connects material to deeper mathematics and logica l reasoning   focused rigorously on all of what how  and why   recommended if interested in graduate study after colby or software           engineering jobs that are more about design  archi tecting and less about programming basically the  same material in  both  and   covered  differently in   than in   cs --    comparing cs  cs  courses about complexity and correctness of algorit hms  cs -- math  mathematical reasoning not required   no experience needed with deep mathematics not ev en calculus      or logical reasoning  proof techniques   focused more on what  how  not deeply about why  cs -- prerequisite  math    connects material to deeper mathematics and logica l reasoning   focused rigorously on all of what how  and why   recommended if interested in graduate study after colby or software           engineering jobs that are more about design  archi tecting and less about programming  both classes discuss two key questions about problem solving   how do we get a good solution   how do we know we got it right  but cs is more mathematically rigorous and as p art of that goes deeper  than cs does into the how do we know we got it right question one way to think  of it   more  for  the rooms with  the keyboards   more  for  the rooms with  the whiteboards  comparing cs  cs  cs  courses about complexity and correctness of algorit hms  cs -- math  mathematical reasoning not required   no experience needed with deep mathematics not ev en calculus      or logical reasoning  proof techniques   focused more on what  how  not deeply about why  cs -- prerequisite  math    connects material to deeper mathematics and logica l reasoning   focused rigorously on all of what how  and why   recommended if interested in graduate study after colby or software           engineering jobs that are more about design  archi tecting and less about programming  courses about models of computation  cs cross-listed as math   -- prerequisite  math    covers mathematical models underlying computationa l tools programming  languages and complexity   abstract broadly applicable and influential appro ach to system design and analysis   emphasizes proofs and analytical methods   more conceptual less application-oriented than cs  cs basically the  same material in  both  and   covered  differently in   than in   very different material from that in     cs --    problems and solutions   on a fundamental level cs and all of computer science  is all about problems and problem solving   what makes a solution to a problem good or bad  what makes one solution to a problem better than another you think you've got problems   cs --    problems and solutions   on a fundamental level cs and all of computer science  is all about problems and problem solving   throughout the course and throughout all of computer  science definitions are very important so let's start here   what is a problem  in a useful computational sense   what does it mean to solve a problem   what makes a solution to a problem good or bad  what makes one solution to a problem better than another note this isn't the question of  how does one solve a problem this is  about what it means to have a solution  no matter how that solution is found  you think you've got problems   problems algorithms and code  pt   problems   what is a problem  in a useful computational sense   informal definition in a relevant sense a problem is an  inputoutput relationship  from our textbook the statement of a problem spec ifies in  general terms the desired input  output relations hip  cs --    problems algorithms and code  pt   problems   what is a problem  in a useful computational sense   informal definition in a relevant sense a problem is an  inputoutput relationship   for example you may have heard of the sorting problem from our textbook the statement of a problem spec ifies in  general terms the desired input  output relations hip  input a sequence l of n numbers a   a n- output a sequence l' of n numbers b   b n- that re-orders the input  sequence perhaps leaving them unchanged such that  b  b     b n- it's often a good idea to have a specification like  the one in yellow above as part of the  comments for functions you write in your programs it  makes understanding the code  and ensuring its correctness much much easier  problems algorithms and code  pt   problems   what is a problem  in a useful computational sense   informal definition in a relevant sense a problem is an  inputoutput relationship   what does it mean to solve a problem   what makes a solution to a problem good or bad  what makes one solution to a problem better than an other from our textbook the statement of a problem spec ifies in  general terms the desired input  output relations hip  now that we have a definition of problem  we  can come up with a cleaner answer to this  cs --    problems algorithms and code  pt   algorithms   what is a problem  in a useful computational sense   informal definition in a relevant sense a problem is an  inputoutput relationship   what's an algorithm informal definition from clrs   what does it mean to solve a problem   informal definition in this computational sense a  solution to a problem is an algorithm   we say an algorithm correctly solves a problem when it  transforms every input to its related correct output an algorithm is a well-defined computational procedure that  takes input and produces output   problems algorithms and code  pt   algorithms   what is a problem  in a useful computational sense   informal definition in a relevant sense a proble m  is an inputoutput relationship   an algorithm correctly solves a problem when  it transforms every input to its related correct o utput  what makes a solution to a problem good or bad   for example consider the sorting problem below  it has  many solutions what makes one solution better than another  input a sequence l of n numbers a   a n- output a sequence l' of n numbers b   b n- that re-orders the input  sequence perhaps leaving them unchanged such that  b  b     b n-this top part is just  review all repeated  from before  cs --    problems algorithms and code  pt   algorithms  what makes a solution to a problem good or bad   for instance consider the sorting problem  what makes one  solution to a problem better than another  correctness i e  does it work  time complexity i e  how fast is it  space complexity i e  how much memory does it use   other  input a sequence l of n numbers a   a n- output a sequence l' of n numbers b   b n- that re-orders the input  sequence perhaps leaving them unchanged such that  b  b     b n- problems algorithms and code  pt  code   just as a problem can have many algorithms that solve it e g   sorting searching problems  there are multiple sort and search algos  which on es do you know    an algorithm can have many possible implementations in  code   for example every programming language would lead  to a different  implementation   for cs we'll consider problems and algos more than code   you already know enough to implement algos in at le ast one language  determining the best solutions for a problem is oft en better at  the algorithm level than the code level all implemen tations of  the same algorithm will have the same time  space complexity  cs --    business  optional but appreciated  please email me from the  account at which you'd want me to contact you   include a sentence on what you'd like to get out o f the course    plus anything else you might like to tell me   also in your email let me know if you were able to access the  course website and lecture notes without any diffic ulties   recall website is at httpscs colby educoursesfcs  i'll post lecture notes by the end of the day i e   midnight today lecture notes are a primary means of communication with you in  cs  you may well end up looking back at them reg ularly   please be sure you can access  read them without d ifficulties  cs --    business pt     smaller assignment  out today   due in  week sept     as always in this class unless otherwise specifie d deadline is at pm on the due  date before the beginning of class   if a time isn't given for a deadline assume it is  pm all semester long   please be sure to do the reading on it   if you have questions about the math pre-requisite s in the appendices please let me  know otherwise i will assume you are comfortable wi th them   note unusual deadline because it's the first day of class   most smaller assignments will be due by the next class meeting not in  week   find it at the smaller assignments page at the course website 