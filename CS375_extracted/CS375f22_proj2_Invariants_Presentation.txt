Analysis of AlgorithmsCS  Fall Project Due in part by Monday Oct   andin part by Thursday Nov  Please see notes and descriptions belowProject  Algorithm Design and ExplanationLoopInvariants Exhaustive Search and BeyondIn this assignment youll work in teams of four to design multiple algorithms to use loopinvariants to understand and explain algorithms and to create and deliver a presentationabout some of the algorithms you designed The goals of this project areto give you practice designing algorithmsstarting here with exhaustive search algorithmsand improving the efficiency of algorithmsto give you practice using loop invariants to explain algorithm correctnessto give you practice creating and giving a technical presentation andto give you practice working with other students as a teamThe Project AssignmentThis project is a multipart assignment with different deadlines for different parts thedeadline for Part  is Oct   and the deadline for Parts  is Nov  see Section below As an overview here are the parts of the project assignment as presented in classon Oct Design Exhaustive Search Algorithms Your team will collectively design exhaustive search algorithms for a variety of problems with specifications given belowImprove Time Efficiency Your team will pick one of the problems and make yourexhaustive search algorithm more efficientReduction For the same problem chosen for part  aboveyes make sure its thesame oneyou will reduce that problem to one of the other problems given in part This is a new topic for usmore about it soonCreate and Give a Presentation Your team will present work from all three otherparts of the assignment about the problem you chose for parts  and  above usingloop invariants where appropriate to explain the correctness of your algorithmsThere are things to do for each part of the assignment as described individually below Design Exhaustive Search AlgorithmsFor this project your team will collectively solve eight problems with exhaustive searchalgorithms Then you will submit revised solutions for four of those problems one onwhich you will focus heavily including doing a presentation and three others for whichyour submission will be a simpler writeup Instructions are below but as always please bein touch with any questions Independent Problem SolvingYour team has eight problems to solve grouped into three Categories of related problemsdescribed in Section  below With four people in your team each of you should comeup with exhaustive search algorithms to solve two of the eight problems  under theseconstraintsEach person in your team should solve two problems but they cannot be from thesame CategoryYour team of four people should collectively solve all eight problemseach personsolving two of the eightOnce youve met as a team to divide the eight problems among the four of you pleasework fully individually on these exhaustive search algorithms not discussingthem with anyone but your TAs and Prof and not using any additionalresources other than your CLRS textbook There is of course a reason forthismore about this belowEach individual on the team will individually submit their two algorithms to their Submitted Work folder This will be graded as a Smaller Assignment for the individual submitternot part of the project gradeand graded based on effort Full credit will be given forstrong demonstrated effort regardless of whether or not the solutions are correct Team Problem SolvingOnce each team member has submitted their two algorithms your entire team should meetto discuss the algorithms Part of the point of this is to give and receive constructive feedbackto  from teammates about algorithm design as youre reading over each others work havingnot seen it before if you have worked together on the initial submissions it will diminishthe value of this part of the projectThen for your teams final project submission your team will work together to revise andwrite up algorithms for three of the original eight problems keeping in mind the followingYour three problems must notinclude the problem on which youre doing your presentationYour three problems must include one from each Category in Section  belowEach of your three algorithms should be presented as pseudocode with a short Englishdescription of how the algorithm works and a concise highlevel analysis of its timeand space complexity You do not need to give a detailed correctness argument or useloop invariants for these three algorithmsFor other parts of this project your team will also work on an algorithm for a fourthof the eight problems As described in Sections  your team will improve on the timeefficiency of that algorithm you will come up with a solution for it using a reduction  andyou will give a presentation about it accompanied by an informative writeup that includescomplexity analyses and the use of loop invariants for explaining correctnessTo Submit for this part of the projectBypm on Monday October   each individual team member should submita document containing exhaustive search algorithms for their two of the eight problemsStandard file naming conventions apply Please submit your typewritten answers ina PDF file named CS ProjStage useridpdf where userid is replaced byyour full Colby userid and submit it to your SubmittedWork folderBypm on Thursday November   the entire team should submit a document containing their polished writeups of algorithms for three of the eight problemsas described above Please submit these typewritten answers in a PDF file namedCS Proj ThreeAlgos Team INITIALSpdf  Additional instructions for submitting this ThreeAlgos document along with the remainder of your work for the projectare given in Section  below Improve Time EfficiencyAs mentioned in Section  your team will choose one of the eight problems on which to givea presentation and focus for the other parts of this project In the remainder of this projectassignment Ill use the variable name Pto refer to the problem on which your team choosesto focus just so that theres a name for itAfter your team has worked together to arrive at a good exhaustive search solution forproblem P in your work for Part  of the project your next step will be to improve uponthe time efficiency of that exhaustive search solutionIn generalnot just for this project but in general for algorithm designthere are a fewways to think of improving upon an algorithms time efficiency They include You can make it somewhat faster with smallish changes that streamline but do notsubstantially redesign the algorithm or change its asymptotic complexity class You can make it much faster with a substantial redesignperhaps even giving a newalgorithm altogetherwhich might even improve its asymptotic complexity class You can focus on special cases of the input that can be solved very efficiently That isinstead of coming up with a more efficient solution that works for allpossible inputs inthe problems specification come up with a solution that is much more efficientiea better asymptotic complexity classfor some of the possible inputsFor example imagine that youve solved a problem with this input specificationInput k a positive integerBut you then come up with a much faster algorithm that will work only when kis aneven number That faster algorithm does not meet the original problem specificationsbut it is an improvement in the special case of an even integer inputNOTE Smaller input sizes are rarely considered special cases in this sense If asuggested improvement is Its the same algorithm but its superfast on smallinputs that likely is not actually a useful improvement Please see me if your teamhas a suggested improvement that requires looking at only very small inputs to confirmthat its worthy of including in your project writeup  presentationFor this project your team will come up with improvements upon the efficiency of youroriginal exhaustive search algorithm for problem P You are encouraged to think of improvements in terms of the three ways listed above and you are especially encouraged not torestrict yourself to only the first or second of themspecialcase improvements can be veryhelpful even on very simpleseeming special casesThere are no fixed criteria for this project about exactly how much you must speed upyour initial exhaustive search algorithmor with the special cases approach how broadlyapplicable your improvements might be to cover as many cases as possible Your team canalso propose up to three algorithms or modifications that improve the efficiency of youroriginal algorithm for problem P although submitting three improvements is not necessarilybetter than one Ultimately your team will earn more credit on this part of the project forimprovements that show more depth of thought about the problem and its solutions achievegreater time efficiency apply more broadly to possible inputs and are more thoroughly andhelpfully analyzed and describedbut in some cases one substantial improvement mightachieve that better that three small ones I hope these criteria make intuitive sense to youAs always please feel free to ask me questionsHint You are advised notto try to come up with polynomialtime solutions for the generalcases of any of the eight problems presented You might however create polynomial timesolutions for special cases which you could choose to include in your writeup  presentationTo Submit for this part of the project In your presentation for this project yourteam should present not only your original exhaustive search algorithm for problem Pbutalso your improvements to it In the writeup that accompanies your presentation pleaseinclude the followingA full description of your exhaustive search algorithm for problem P including a shortEnglish description of it pseudocode for it a concise and convincing correctness argument for it using loop invariants to establish correctness and a concise highlevelcomplexity analysis for itEnglish descriptions of each improvement Each description should include  sentences about how you came up with the ideas behind that proposed improvementPseudocode showing what each improvement doesA concise highlevel complexity analysis showing how much each improvement actuallyimproved the time efficiency of the original exhaustive search algorithm Although youdo not need to use formal definitions of asymptotic complexity in your analysis youmight want to use some part of themin particular if your improvement doesntchange the asymptotic complexity class you might describe its improvement in termsof a lower leading constant for complexity analysisYou do not necessarily need to give a separate correctness argument for your improvementsalthough if they affect the loop invariants your team previously used to showcorrectness of the exhaustive search algorithm you do need to show that the improvementsalso solve the problem correctly which could involve a modified loop invariantMore details about your presentation and its writeup are in Section  below ReductionSometimes we can incorporate solutions to previously solved problems as subroutines in analgorithm were designing For this project your team will do that in a specific way Youllreduce problem Pto another problemInformally in general reducing problem Ato problem Bmeans creating an algorithmthat if you plugged in a subroutine that solved problem B would immediately be able tosolve problem Athe algorithm reduces the task of solving problem Ato the task of solvingproblem B Well call such an algorithm a reduction from AtoBAs a concrete very simple examplewhich we also went over in our Oct  classmeetingconsider problem Awith these specificationsInput  List L c c    c n of numbersOutput True if the first element of Lc is  False otherwiseAnd consider problem Bwith these specificationsInput  List M d d    d k of numbersOutput True if the last element of Mdk is  False otherwiseFor these problems a reduction from AtoBwould take some input Lremember thisreduction is an algorithm for some problem A so it has to take an input intended for Aand create a new list M c that contains only the first element of L Then the reductionwould use Mas input to a subroutine that solved problem B If that subroutine returnedTrue that would mean c   do you see why  which in turn means that the firstelement of Lis  so the reduction solving Ashould return True On the other hand ifthat subroutine for Breturned False on input of list M that would mean cis not  sothe reduction solving Ashould return False There are other possible reductions that could have workedfor instance Mcould instead have been created as M cn    c  built from all elements of Lin reverse orderrather than just a list with one element the rest of the reduction would have been exactlythe same For this project your team just needs to present one correct reduction Pleasenote again that this is a very simple exampleyour work for this project may not be quitethis simpleFor this project your team will create a reduction from problem Ptoany other of theeight problems given in the project Here is the specific way to think of it for this assignmentAn allpowerful creature has bestowed upon you a wonderful gift of magic Theyvegiven you seven magic subroutinesone for each problem in Section  other than Pthat will solve each problem in O time To use one of these magic subroutines justgive it some input that matches the input specifications for the problem and then itwill instantly give you a correct True or False answer for that input to that problemTheres a catch though You only get to use oneof these magic subroutinesany oneyou choose but only that oneand you only get to use it once After that all sevensubroutines disappearYour task is to write a new algorithm to solve problem Pthat makes use of the magicsubroutine of your choice It shouldnt be an exhaustive search algorithm anymorethe magic subroutine can do the hard work of exhaustive search In fact if you arecareful in choosing and employing the magic subroutine you could even come up withapolynomial time algorithm for problem PRecall from lecture that a polynomial time algorithm is one that is Onk for someconstant k This is much faster than any exponential or factorialtime algorithmevena large polynomial like nhas a rate of growth much slower than nJust to give a name to the problem you choose to reduce Pto lets use variable Qtorefer to that problemie youll using the magic subroutine that solves problem Qas partof your reduction from PtoQ Your reduction should thus transform any possible input pfor problem Pinto an input qfor problem Q such that when you get a True or False answerabout input qforQ you can use that to come up with a correct True or False answer aboutinput pfor problem PFor this part of the project in addition to creating the reduction as described above youwill also do all of the followingAnalyze the time complexity of your reduction under the assumption that the solutionforQcomes in O time For maximal credit your reduction should be inpolynomial time Onk for some kbut dont worry about what constant kyouuse Every correct polynomial time reduction will be equally good for this projectInclude the reduction in your presentation see Section  below Be sure to includeproblems Pand Qyoure reducing from and to a short description of your reductionalgorithm pseudocode is not required though you may include it if you think it helpsyour presentation a short explanation of correctness and a short complexity analysisDescribe the reduction in the writeup document accompanying the presentationAgain state the problems Pand Qyoure reducing from and to and give a helpfullycomplete description of the reductionan English description is required pseudocodeis optionalalong with a short explanation of correctness and your complexity analysisof the reductionYour explanation of correctness does not need to use loop invariantsyour reductionwill probably be straightforward enough that loop invariants arent required If yourteam thinks loop invariants might be a good idea to use though feel free to do so orfeel free to ask me about itImportant note  A correct reduction must be exactly consistent with the Input Output specifications for both PandQ For full credit your explanation of correctnessshould explicitly refer to those specificationsYour presentation and accompanying writeup document will contain all the work you needto submit for this part of the project Please make sure your reduction is clearly and conciselydescribed in the presentation itself and all helpful details for understanding the reductionare included in the writeupHint See Section  for a hint that might or might not depending on your approach beuseful for reductions involving problems in the Social Networks Category Create and Give a PresentationAt this point your team has done a lot of work on problem P Lets hear about itYour team will give a technical presentation about the algorithms youve created forproblem P For your presentation create slides in PowerPoint Google Slides or some otherapplication of your choice and take  minutes to present all of the material neededPresentations that are too long or too short may not receive full credit too short oftenindicates that some important material was not well presented too long often indicates thatadditional preparation would have resulted in a more effective talk so it is recommendedthat you target a  minute presentation If you think your talk will be much longeror shorter than that please discuss that with meI will be happy to help you find a goodbalance for your presentationThe default expectation is that you will record your presentation as a screen recording inZoom If you believe another option would be better for your team please see me aboutit as soon as possibleThis is a team presentation and a class assignment so ideally the entire team would learnabout all parts of the topic being presented and not only would the workload be balancedamong team members but it would also appear balanced to viewers For that reasonyour presentation should consist of each person presenting for roughly  minutes at a timefollowed by a different teammateso for example in a roughly  minute presentation eachperson on a fourperson team would take two nonconsecutive shifts of presenting for roughly minutes each This structure might require a conceptual topic to be split among multipleindividuals in the presentation due to the impositions of time limits but thats part of thepedagogical benefit of thisit encourages more people to engage with more different partsof the topic being presented Important note Presentations not following this structurewill not receive full credit for this assignment If there are questions about whats expectedin terms of the division among teammates of time spent presenting please let me knowHere are some things you should include in your presentation not necessarily in thisorderYour exhaustive search algorithm For your exhaustive search algorithm please includeAn accessible description of the problem Pyou solvedA highlevel summary of your algorithm and how it worksA short example that you step through to give your audience a sense of whatproblem Pis and how your algorithm works It may be appropriate to only stepthrough a part of an example instead of an entire one but you should do enoughto fully illuminate how your algorithm works for your audiencePseudocode of the algorithm along with a correctness argument using a loopinvariant A complexity argument of the algorithm including what the worstcase and bestcase complexities are and how much space is needed beyond the original inputYour improvements to your exhaustive search algorithm For each of the improvements youre presenting please includeA highlevel description of the improved algorithmA short example that you step through to give your audience a sense how theimprovement differs from the original exhaustive search algorithm Once againyou may not need to go through a full example but you should do enough toilluminate the differences in your improved algorithmPseudocode of the improved algorithm along with a correctness argument Asnoted above you need not use loop invariants for this though you could if youthought it was necessary but you do need to give a concise and convincingcorrectness argument You can refer to your original exhaustive search algorithmand its correctness without reexplaining themA complexity argument of the algorithm including what the worstcase and bestcase complexities are and how much space is needed beyond the original inputA comparison of the complexity of your improved algorithm with that of yourexhaustive search algorithmYour reduction algorithm For your reduction please includeAn accessible description of the problem Qyoure reducing toA highlevel description of the reduction algorithm that solves P including howit uses the subroutine for Qin that solutionA short example to show your audience what the reduction doestransforminginput to Pinto input to Q and using output from the subroutine for Qto get acorrect answer on the input to PPseudocode of the reduction along with a correctness argument As noted inSection  above this will involve referring to the specifications of Pand Q Youneed not use loop invariants for this just give a concise and convincing correctnessargument that the reduction meets specifications and solves Pcorrectly assumingthe subroutine solves Qcorrectly You can refer to your original exhaustive searchalgorithm and its correctness without reexplaining themWorstcase time complexity and space complexity arguments for the reductionassuming the subroutine for QhasO time and space complexity MagicYou should assume that your audience is at the level of CS students who are familiar withasymptotic complexity and loop invariants but are not yet experts with them For exampleassume that your audience knows a set of size nhas nsubsets a list of length nhasn permutations and all about the relative growth rates of functions used in asymptotic complexityincluding knowing what polynomial time means but would need to be walked throughdetails involving leading constants and nthresholds in definitions of asymptotic complexityYou should also assume your audience has no previous knowledge of your algorithms or anyproblems involved and they may not quickly grasp any subtletiesTo help prepare for your presentation please look through the documents linked fromCSs Project Assignments pageSome general advice on how to give good technical presentations Dale Skrien sharedthis with his classes and I am passing it along to youA tutorial on screen recording with Zoom from Colby Academic ITSAdvice on setting up a good environment for a web conference using Zoom from ColbyAcademic ITS Im not sure how useful this will be but Im including it just in caseYour Accompanying WriteUp In addition to the presentation itself your team willcreate an accompanying writeup document which should enable your audience to understand the highlights of your presentation even if they do not see your talk This documentmust be typed submitted in PDF and contain some important details that you may nothave time to include in your talk itself For example some small but important detailsof complexity arguments might not fit in the  minutes of your talk but they can beincluded in the writeup For full credit your writeup must be polished well formatted fora professional technical presentation easy to read and free of grammatical errorsPlease see individual sections above for more information about details to include in yourpresentation writeup about the exhaustive search improvements and reduction algorithmsDepending on the margins  font size  etc of your document your writeup shouldprobably be  pages in length Please keep it as concise as it can be while still containingall relevant information If your writeup is running longer or shorter than that range pleasesee me to check whether it contains unneeded material or too little material writeups thatare much too long or too short are not maximally effective and may not receive full creditDress Rehearsal As part of this project please schedule a dress rehearsal with me Thisshould be a live inperson presentation rather than on Zoomthe intent is to be as effectiveas possible in giving feedback on the organization and content of your talk rather than onusing Zoom technology As in our class meetings masks will be required for our dressrehearsal meeting If that will be problematic for any of your teammates please let meknow Plan on  minutes for the dress rehearsal Come to the dress rehearsal alreadyhaving practiced your talk with your slides ready and your writeup ready for me to lookat while youre presentingthe rehearsal is a dress rehearsal not a draft rehearsalSo that the dress rehearsal time can be used as effectively as possible you are stronglyencouraged to record a draft rehearsal  practice run of your talk beforehand and do a selfevaluation of how it went identifying areas of strength and room for improvement Timepermitting I will be happy to give feedback on that recording during our appointment timePlease note there will be significant deductions to your grade if your eventual projectsubmission includes a poor presentationincluding things like poor organization poor clarityof speaking or poor knowledge of the materialso please use your draft rehearsals andour dress rehearsal time wisely to polish your workI expect to schedule all dress rehearsal appointments for the afternoons of Friday OctandSaturday Oct   Please email me to set up an appointment and please be asflexible as possible with your availability for schedulingthose will be very busy daysSome suggestions for getting audiences engaged in a presentationNote from your Prof  Dale Skrien gave these suggestions to his students for his presentation assignments Im not sure that they all fully apply to this presentation but in theinterest of giving you good advice about technical presentations in general Im passing themalong to youGet the audience to care about the subject For example get the presentation startedby asking a question whose answer the audience cares aboutKeep examples simple and focused Dont make the audience think about irrelevantthingsUse conversational tones in presentations Use I me and we so that the listeners brain thinks its in a conversationGarr Reynolds the author of Presentation Zen  says the principles and techniquesfor creating a presentation for a conference or a keynote address have more in commonwith the principles and techniques behind the creation of a good documentary film ora good comic book than the creation of a conventional static business document withbullet pointsSomething to think about regarding your presentation also from Garr If the audience could remember only one thing and youll be lucky if they do what do youwant it to bePlease feel free to ask me questions about them if youd like Submission InstructionsDeadline pm Oct  For the individual work in Section  as described inthat section every individual should submit typewritten answers in a PDF file namedCS ProjStage useridpdf where userid is replaced by your full Colby useridand submit it to your SubmittedWork folderDeadline pm Nov  For all of the group work in this project a designated submitter from each team should submit four items one to their Google Drive SubmittedWorkfolder and three by emailing them to me The file to submit to the SubmittedWork folderof the designated submitterA document containing their polished writeups of algorithms for the three problemssolved for Section  as described above Please submit these typewritten answers in aPDF file named CS Proj ThreeAlgos Team INITIALSpdf  where INITIALSis replaced by the initials of the team members in the group in the team assignmentsEg if Eric Aaron and Stephanie Taylor were the teammates the file from that teamwould be called CS Proj ThreeAlgos Team EASTpdf The items to email to me eaaroncolbyeduA PDF file with all of the slides used for the presentation Please put two slides perpage as is done for CS course lecture notes and name the fileCS Proj Slides Team INITIALSpdf The writeup document that accompanies your presentation which should be a PDFfile called CS Proj WriteUp Team INITIALSpdf A video file or link to it of your presentation Please put it in your Google Drivespace if its too large to simply include in an email Please name the fileCS Proj Presentation Team INITIALSmpNote the preferred mpformat If for any reason you cannot submit an mpvideoplease let me know as soon as possibleLateness policy To keep pace with the project assignments in CS it is important thatthis assignment be turned in promptly For this project there will be a deduction of for each day lateie  deduction for submitting up to  hours late  deductionfor submitting more than  hours late up to  hours etcup to a  deduction forsubmitting up to  days  hours late After  days late submissions will receive a deduction Please submit your work promptlyAs always extenuating circumstances will be consideredplease contact me as soon aspossible if any extenuating circumstances are impeding your work on this project The Eight Problems to be SolvedBelow are the eight problems to be solved divided into three Categories Note that each ofthe problems is a decision problem it asks for a True  False answer to be givenFor each of the problems below in all three Categories your exhaustive search algorithmwill need to look through either all subsets of a set or all permutations of a list For your workplease assume that you can use algorithms to create the relevant lists for your exhaustivesearch meeting the specifications given here the same as those in our lecture notes andwith the time and space complexities given hereGenerateAllSubsets You may use a GenerateAllSubsetsS algorithm thathastime complexity nn and space complexity nn on input Sof size nmeeting these specificationsInput Ss s s     s n a set of nelementsOutput L a list of all subsets of SGenerateAllPermutations You may use a GenerateAllPermutationsL algorithm that has time complexity nn and space complexity nn on input Lof size n meeting these specificationsInput L s s s     s n a list of nelementsOutput PSL a list of all permutations of LNote that you are not told how these algorithms work and they may not be identical tothe ones we derived in classyou should just assume that they exist for your use and meetthese specificationsIn addition here are some reminders about setsandgraphs that might be usefulThe specifications for some of the problems below involve sets Please recall that bythe definition of a set no two values in a set can be equal to each other All of thespecifications were written to be consistent with this definitionThe specifications for some of the problems below involve graphs Every graph Gisdefined as a combination of a set Vof vertices in the graph and a set Eof edges thatconnect some or all or none of the vertices in the graph for short we say G V ESee CLRS Appendix B pg  for more about graphsand as always pleasefeel free to ask me any questions about definitions regarding graphsThe following sections give the three Categories containing the eight problems to be solved Category Taking StuffThe problems to be solved in this Category areFair Share You and a friend are in a room with nvaluable itemswith valuesc c   c nand you want to take all of them But only if you each take exactly thesame value with you Is that possible with the items in front of youThe FairShare problemInput  A set Cc   c nofnpositive integer values the values of thenitemsOutput True if there exists a subset SofCfor which the sum of the valuesinSisexactly the sum of the values not in SFalse otherwiseFor example  IfC a correct algorithm for FairShare would returnTrue because theres a set Swhere the sum of the values is  and thesum of values not in Sis      On the other hand if we consider set C there is no set Sof values from Cthat could equal the valuesnot in Stry itno subset of Cworks for these values so a correct algorithm wouldreturn False Price is Exactly Right Youre in a store with nitems with costs c c   c n andyou have an amount Vto spend on these items Can you spend exactly Von some orall of the items from this storeThe PriceExactlyRight problemInput  A set Cc   c nofnpositive integer values the values of thenitems and a positive integer VOutput True if there exists a subset SofCfor which the sum of the valuesinSisexactly equal to VFalse otherwiseFor example  IfCandV  a correct algorithm should return Truebecause there exists subset Cfor which the values add up to  Thatsnot the only subset with values that add to  but one is enough for the algorithm toreturn True On the other hand for the same C ifV  there is nosubset SofCfor which the values of Scould add up to exactly Book Bag Youre at a used book sale where theres a deal available If you pay aflat feelets call the fee amount Kthey give you a bag with a capacity of Cand youcan take as many books as you want as long as they all fit in that bag The numbersKandCcan be in whatever units you likeas long as were consistent throughoutthe problem it doesnt matter which they are You can choose books to take from asetBb   b nofnbooks and each book bihas a size sbi and a value vbi Isit possible to find some subset Sof the books such that all the books in Scould fit inthe bag they give you and the total value of the books in Sadd up to more than theamount Kthat youd pay for the dealThe BookBag problemInput  Set Bb   b nso that each bihas a positive integer size siand apositive integer value vi positive integer capacity C positive integer fee KOutput True if there exists a subset Sa   a mofBfor which thesum of the sizes misai is less than or equal to Candthe sum of thevalues mivai is greater than or equal to KFalse otherwiseFor example  Let Bb b bwhere bhas size  and value  bhas size and value  and bhas size  and value  Then if C  and K  a correctFigure  An example graph referred to in examples accompanying problem statementsFigure taken from CLRSalgorithm should return True on inputs B C K  because the set of books b bhastheir total size equal to  less than or equal to C and their total value equal to greater than or equal to K For the same BandK however but C  a correctalgorithm should return False  one way to see this is that the greatest value possiblefor a set of books from Bwith total size less than or equal to  would be from thesubset b band thats not greater than or equal to K Category Social NetworksIn all of the problems in this Category well be using graphs to represent social networksEvery vertex in a graph will represent a person and every edge between two people willrepresent that the people know each other Please assume graphs for problems in thisCategory are undirectedThe problems to be solved in this Category areClique Aclique is defined to be a collection Cc   c jof people such thatevery pair of people in Cknow each other Because were using a graph G V Eto represent the social network a clique is a subset Cof the vertices of the graph forwhich every pair of vertices in Chas an edge between them  Ccould in principle beequal to V which would be a complete graph The question  Given a number Kis there a clique of size Kin the social network were studyingThe Clique problemInput  Graph G V E positive integer K VOutput True if there is a clique Cof size KinGFalse otherwiseFor example  In Figure  the graph contains multiple cliques of size  such as theset The set is not a clique because  is not connected to Strangers In the social network G V E we will define a group of people Ss   s jto be strangers to each other when for every pair of people in S they donot know each other Because were using graph G V E to represent the socialnetwork a set of strangers is a subset Sof the vertices of the graph for which no edgeinEexists between any two people in S Scould in principle be equal to V whichwould be a maximally sparse graph The question  Given a number K is there aset of strangers Sof size Kin the social network were studyingFigure  An example graph referred to in examples regarding the complement of a graphFigure taken from CLRSThe Strangers problemInput  Graph G V E positive integer K VOutput True if there is a set of strangers Swhere Shas size KinGFalseotherwiseFor example  In Figure  the set is a set of strangers of size  there are alsoothers but there is no set of strangers of size for every three people in the graphtheres a connection between some two of them Try itNetwork Cover In the social network G V E we will define a group of peoplePp   p jto be a network cover if across all the people in P every socialconnection in the network involves at least one of the people in P Because were usinggraph Gto represent the social network a network cover is a subset Pof the verticesinGsuch that every edge in Einvolves at least one person in PThe question Given a number K is there a network cover Pof size Kin the social network werestudyingThe NetworkCover problemInput  Graph G V E positive integer K VOutput True if there is a network cover Pwhere Phas size KinGFalseotherwiseFor example  In Figure  the set is a network cover of size  there are alsoothers but the set is not a network cover because the connection between and  is not covered by Hint This hint only applies to reductions Section  not other parts of the ProjectWhen thinking about designing reductions involving the problems in the SocialNetworks Category Section  you might want to consider the complement ofa graph as part of your reduction By definition for a graph G V E thecomplement ofGis a graph G V E where the vertices are the same as in Gbutthe edges are all edges not in E  More precisely considering every edge in a graph asa pair of vertices Eu vu vVbut u vE As a concrete example letGbe the graph in Figure  then there would be edges from vertex  to every othervertex in the complement G because none of those edges are in G but edge  would not be in Gbecause there is an edge between vertices  and  in GYou dont need to use the complement of a graph in your reduction but you mightwant to in some cases As always please feel free to talk with me about these concepts Category Maps and TouringIn the problems in this Category well be using graphs to represent maps Every vertex in agraph will represent a location and every edge between two locations will represent that wecan travel between those locations in either direction Please assume graphs for problems inthis Category are undirectedFor these problems well define a tour on a map G V E A tour is a path that startsin some initial city cinVand then following edges in E passes through every other cityinVexactly once before returning to c For example in the map represented by the graphin Figure  one possible tour is represented by the shaded edges the one from utowtovtoxand then back to starting city u Note that there are many possible tours through allcities on this map this is just one possibilityAlso for the problems in this section note that in a tour it doesnt really matter whichcity we indicate as the starting citysince the tour goes through all of them exactly oncebefore looping back to where it started its starting point could equivalently be anywhere forthese problems The direction also doesnt matter for the problems in this section becausethe graphs are undirected For example the tour indicated by the shaded edges in Figure could be viewed as starting at city xand going xtovtowtoutoxjust as well as utowtovtoxtouThe problems to be solved in this Category areTraveling Salesman In this classic CS problem we start with a complete graphG V E in which every pair of cities vi vjinVis connected by an edge in EIn addition to the graph there is a distance function dthat gives a distance dvi vjbetween every pair of cities assume that the distance is the same in either directionsodvi vj dvj vi for every pair of citiesIt is our traveling salespersons job to make a tourto start from their home city thenfollow edges in the graph to visit every other city exactly once before returning to theirhome city The question  Given a number K is it possible to make a tour whilecovering total distance Kor lessThe TravelingSalesman problemFigure  An example tour on a graph referred to in examples accompanying problemstatements Here there are many possible tours through all cities on this map includingone from utowtovtoxand then back to starting city ushown by shaded edges in thegraph Figure taken from CLRSInput  Graph G V E distance function das described above andpositive integer KOutput True if there is a tour of Vhaving distance Kor less FalseotherwiseFor example  In Figure  the distance function dgiving distances between cities isindicated by the number over each edgeeg dv x   and dx w   Considerthe map in that Figure that distance function d and number K  A correctalgorithm would return False  because there is no tour of all those cities rememberit has to end up back where it started with distance  or less On the other handwith that map that distance function and K  a correct algorithm would returnTrueindeed the shaded edges are a tour of distance  which is less than Hamiltonian Tour Unlike the Traveling Salesman example the touring companyofHamilton does notstart with a complete graphinstead they start with some mapG V E that may or may not have edges between any two cities There is also nodistance function to be considered here all that matters is whether or not they canget from one city to the nextTheir goal however is to make a tour in the same technical sense of tour used in theTraveling Salesman problemto visit every city exactly once before returning homeThe question  Given a map G V E is there a tour in the map visiting each cityexactly once before returning to the city from which it startedThe HamiltonianTour problemInput  Graph G V EOutput True if there is a tour in GFalse otherwiseFor example  In Figure  there are many paths that are not tours in this sense Forexample if a possible tour started at city  and then went to  and then  and then it could not get to city  without going back to  along the way and thats not atour in our sense of the wordit would visit city  more than once before returningto where it started Nonetheless there is a tour through that graphfor example itcould go from  to  to  to  to  before going back to so a correct algorithm wouldreturn True on that graph