 cs --    cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   practice with graphs and  asymptotic complexity notation   consider a graph g  ve with nnodes i e  vn    how many edges might it have in edge set e   what can we say about its number of edges using a symptotic  complexity notation  o    cs --    practice with graphs and  asymptotic complexity notation   consider a graph g  ve with nnodes i e  vn    how many edges might it have in edge set e   what can we say about its number of edges using a symptotic  complexity notation  o    any edge has the form v i vj where both v i vjare in v   how many possible edges could there be they may not all  be in e we're just seeing what's possible  there are n possible choices for v i  n possible vertices  nodes  similarly for each of those n choices there are n  choices for vj  so there are nn  n possible pairs that is n possible edges   in asymptotic complexity notation then there are  edges  what can we say here try it where g has   nodes we see   possible edges  including self-loops  from a node to itself  practice with graphs and  asymptotic complexity notation   consider a graph g  ve with nnodes i e  vn    how many edges might it have in edge set e   what can we say about its number of edges using a symptotic  complexity notation  o    any edge has the form v i vj where both v i vjare in v   how many possible edges could there be they may not all  be in e we're just seeing what's possible  there are n possible choices for v i  n possible vertices  nodes  similarly for each of those n choices there are n  choices for vj  so there are nn  n possible pairs that is n possible edges   in asymptotic complexity notation then there are on edges   we cannot make any statement using or notation  we only have enough  information for an upper bound try it where g has   nodes we see   possible edges  including self-loops  from a node to itself  cs --    business   grading update   sa grading not before the weekend   another sa may be out soon i'll email if so   problem set  due already   ps out soon perhaps tonight or perhaps friday   i'll email when it's out   but you have things to work on in the meantime suc h as   project  due sept     please direct project-specific questions to me ra ther than to tas   questions about general concepts that show up on t he project e g   theta notation though rather than specifics can  go to tas  cs --    business pt     class will be cancelled monday sept     will be an optional make-up class later in the sem ester   general grading notes   if we leave a note see prof  if you'd like it's r ecommended   if we leave a note see prof  please see me i thi nk it's important   if you come to office hours please let me know you're there   even if i'm with another student please say hi an d let me know   it gives me info so i can multitask efficiently an d help more people  a tiny bit about the course the remix  some main ideas   recall important elements for any course on algori thms   classic algorithms which you might use or adapt f or your work   algorithm design techniques and paradigms   creating and working with algorithm specifications  analyzing and explaining an algorithm's correctnes s   analyzing and explaining an algorithm's complexity  we'll spend a lot of the semester on these important elements  design  paradigm analysis  complexity efficiency correctness  iterative counting  counting number of operations   amount of space used loop invariants  recursive solving recurrences induction  cs --    problem-solving warmup   a problem-solving warmup consider the following game   an odd number of red balls and any number of green  balls are put in a  bag  an infinite supply of green balls is available   a move consists of  removing two balls from the bag and applying the fo llowing rule if the  balls are the same color they are both thrown away  and a new green  ball is placed in the bag  if the balls are of diff erent colors the red one  is returned to the bag and the green one is discard ed  the game ends  when it is no longer possible to pick two balls fro m the bag    consider a one-player version where the player can  look in the bag  before removing two balls from it     give a method strategy  algorithm so that when  the game is over  there is one ball left in the bag and it is green  problem-solving warmup   a problem-solving warmup consider the following game   an odd number of red balls and any number of green  balls are put in a  bag  an infinite supply of green balls is available   a move consists of  removing two balls from the bag and applying the fo llowing rule if the  balls are the same color they are both thrown away  and a new green  ball is placed in the bag  if the balls are of diff erent colors the red one  is returned to the bag and the green one is discard ed  the game ends  when it is no longer possible to pick two balls fro m the bag    consider a one-player version where the player can  look in the bag  before removing two balls from it     give a method strategy  algorithm so that when  the game is over  there is one ball left in the bag and it is green    give a method strategy  algorithm so that when  the game is over  there is one ball left in the bag and it is red   cs --    loop invariants a warmup   a problem-solving warmup consider the following gam e   an odd number of red balls and any number of green balls are put in a bag  an infinite supply  of green balls is available  a move consists of removing two  balls from the bag and applying  the following rule if the balls are the same color t hey are both thrown away and a new green  ball is placed in the bag  if the balls are of differe nt colors the red one is returned to the bag  and the green one is discarded  the game ends when it i s no longer possible to pick two  balls from the bag    consider a one-player version where the player can look in the bag before removing two balls from it     give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag  and it is green     give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag  and it is red    what useful loop invariant do you have in mind when designing   explaining your algorithm   maybe it involves the odd  even-ness the parity  of the number of red or green balls  a loop invariant is something that's true about the variables every time the algo  goes through the loop every time so invariant  but is false once the loop ends in a way that gets  to the problem's solution game description repeated from prev  slide  loop invariants a warmup   a problem-solving warmup consider the following gam e   an odd number of red balls and any number of green balls are put in a bag  an infinite supply  of green balls is available  a move consists of removing two  balls from the bag and applying  the following rule if the balls are the same color t hey are both thrown away and a new green  ball is placed in the bag  if the balls are of differe nt colors the red one is returned to the bag  and the green one is discarded  the game ends when it i s no longer possible to pick two  balls from the bag    consider a one-player version where the player can look in the bag before removing two balls from it     give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag  and it is green     give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag  and it is red    what useful loop invariant do you have in mind when designing   explaining your algorithm   maybe it involves the odd  even-ness the parity  of the number of red or green balls  loop invariant property  every time through the game until there's one ba ll left  the overall number of balls decreases by  and  the number of red balls remains odd either decreases  by  or by  game description repeated from prev  slide  cs --    loop invariants a warmup   a problem-solving warmup consider the following gam e   an odd number of red balls and any number of green balls are put in a bag  an infinite supply  of green balls is available  a move consists of removing two  balls from the bag and applying  the following rule if the balls are the same color t hey are both thrown away and a new green  ball is placed in the bag  if the balls are of differe nt colors the red one is returned to the bag  and the green one is discarded  the game ends when it i s no longer possible to pick two  balls from the bag    consider a one-player version where the player can look in the bag before removing two balls from it     give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag  and it is green     give a method strategy  algorithm so that when the g ame is over there is one ball left in the bag  and it is red    what useful loop invariant do you have in mind when designing   explaining your algorithm   maybe it involves the odd  even-ness the parity  of the number of red or green balls  loop invariant property  every time through the game until there's one ba ll left the overall number of balls decreases by  and  the number of red balls remains odd either decreases  by  or by   how does this help you solve the problem game description repeated from prev  slide   cs --    log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true   so how many iterations until it reaches  how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size  on iteration k input is of size  n k do you see that pattern  log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true   so how many iterations until it reaches  how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size  on iteration k input is of size  n k do you see that pattern  so reaches    nn  on iteration kwhen n k cs --    log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  how could we even phrase that question  recall one of our cs pro tips  if you want to talk about something give yourself a word  name for it  e g  declaring a variable rather than recomputing s omething repeatedly  so this question what's the exponent is something w e want to ask repeatedly  we need to have a word  function for it  log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  how could we even phrase that question   the logarithm function lets us ask the question   so for x   we'd say x  log  read as log base  of    examples log    log    log      logarithms are exponents so rules of exponentiation apply   e g  log bmn  log bm log bnif bx mand by n   then bxb y bxy  mn  cs --    log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  notation  x  log    so how many iterations until it reaches  how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size  on iteration k input is of size  n k do you see that pattern  so reaches    nn  on iteration kwhen n kgetting back to where we left  off a couple of slides ago  log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  notation  x  log    so how many iterations until it reaches  how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size  on iteration k input is of size  n k do you see that pattern  so reaches    nn  on iteration kwhen n kgetting back to where we left  off a couple of slides ago  log n   notation  this is not  log n  cs --    log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  notation  x  log    so how many iterations until it reaches  how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size  on iteration k input is of size  n k do you see that pattern  so reaches    nn  on iteration kwhen n kgetting back to where we left  off a couple of slides ago  log n    watch for off-by-one errors  log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  notation  x  log    can you think of an algo that works like this on its input how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size   on iteration k input is of size  n k do you see that pattern  so reaches    nn  on iteration kwhen n k that is  log n   iterations watch for off-by-one errors  cs --    log it  questions about exponents   when solving equations we may want to know the value of  an exponent   e g  in equation x  we might want to ask what value of xmakes  that true  notation  x  log   how does this come up in analyzing algorithm comple xity  imagine an algo that takes input of size nand then goes through a loop or  recursion getting rid of half the remaining input  each time until there's only  left  input of size non iteration  n on iteration  n on iteration    how many iterations until input of size   on iteration k input is of size  n k do you see that pattern  so reaches    nn  on iteration kwhen n k that is  log n   iterations watch for off-by-one errors  exercise if input size was n n  n    then how many iterations until input size   cs --    time complexity classes illustrated  complexity class what we call it  o constant  olg n log time  on linear  on lg n n lg n on n-squared quadratic  on n-cubed cubic  on exponential  on factorial what algos do you know in  each complexity class  do you have any favorites these are common complexity classes but there are many others  time complexity classes illustrated  complexity class what we call it example algorithms   objects  o constant print hello world stack operations  and much much more be careful  olg n log time binary search  on linear exhaustive search of an array linear  search merge as used in mergesort on lg n n lg n mergesort heapsort  recall sorting can be done in n lg n  on n-squared quadratic insertion  selection  bu bble sort  several graph algos  on n-cubed cubic my favorite algorithm  a graph algo on exponential number of subsets of a set of size n  on factorial number of orderings  permutations of  elements of a list of length nthese are common complexity classes but there are many others 