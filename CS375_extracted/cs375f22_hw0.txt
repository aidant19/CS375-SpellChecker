analysis of algorithms  cs  fall   problem set   due at the beginning of class wednesday september    important some of these exercises may build upon topics covered in our sept   class meeting they are included here early so you can see all of the exercises on this assignment    from your textbook clrs please read chapters      and     to submit this problem set the standard file naming and hw submission conventions  apply please put your answers in a pdf file named  cs ps userid pdf  where userid is replaced by your colby userid for example my file would be called cs ps eaaron pdf and submit it to your submittedwork folder  please reach out to me right away with any questions or concerns about this   a few essential style guidelines for writing algorithms in cs   when presenting an algorithm avoid using language-specific commandsroutines without comments in pseudocode  pseudocode by definition is supposed to be language-independent at a level of abstraction higher-level than particular programming languages    please be sure to initialize variables or declare inputsouptuts and be sure the purpose of every variable including the names of functions or algorithms can be quickly and fully understood by a reader typically this is done either by using descriptive variable names or by describing variables in english  algorithms in which variables cannot be promptly understood may not receive full credit so please feel free to ask me about variable names and descriptions i'm happy to talk with you about particular situations that might come up   a general note for cs when writing up your homework please write neatly and explain your answers clearly giving all details needed to make your answers easy to understand  graders may not award full credit to incomplete or illegible solutions  clear communication is the point on every assignment   in general in cs unless explicitly specified otherwise answers should be accompa- nied by explanations  answers without explanations may not receive full credit  please feel free to ask me any questions about explanations that might come up  exercises    design an iterative i e  without using recursion algorithm to find all the common elements in two sorted lists of numbers  for example for input lists     and       the output should be the list        and t  t     tn   input two sorted lists of elements s  s     sm   output list of numbers l  n     nk where ni is           a member of l exactly when it is an element of both s and t  also for each value vi that occurs on l the number of times it occurs on l is equal to the minimum of the number of times vi occurs on s and the number of times vi occurs in t   for example if s      and t        the return value should be the list      please give both a pseudocode description and an english description to make it as easy as possible to understand the algorithm and explain how you know it solves the problem correctly   in addition answer this question what is the maximum number of comparisons your algorithm makes i e  number of times a pair of numbers is compared if the lengths of the two input lists are m and n respectively  also please give a concise convincing explanation of the worst-case time complexity of your algorithm   note recall that there are different operations to add an element to a list append in python and to combine two lists into one extend in python  if you use either or both in your answer please make sure it is clear which operation is being used  of course you are also welcome to use other common list operations such as insert or remove if you'd like    list the following functions of n according to their order of growth that is how fast  each function grows as n gets big from lowest to highest n    lgn   n  n  n        n n   ln n  as is conventional the lg function is logarithm base  the ln function is the natural logarithm logarithm base e and ln n is common notation for ln n  although you don't need to explain every part of the ordering for this exercise please give short explanations  sentences for the following  a how you know the second-smallest comes before the third-smallest and  b how you know the second-largest comes after the third-largest   note this exercise is not directly about the definition of big-o notation and it does not require that definition it's a mathematical background exercise supporting the complexity analysis work we'll be doing as the semester goes along     prof  snailshell of the portland institute of technology which continues to not really exist proposed the following algorithm for finding the distance between the two closest elements in an array of numbers     mindistancea       n    input array a     n   of numbers output minimum distance between two elements of a dmin    min distance variable initialized to  for i   to n    for j   to n    if i  j and ai  aj  dmin  dmin  ai  aj  return dmin  this is not the most time-efficient way to solve the problem make as many improve- ments as you can in prof  snailshell's algorithm  if you need to you may change the algorithm altogether if not improve the implementation given  note the notation x  y refers to the absolute value of the quantity x  y i e  the distance between x and y     prof  e  nigma of the portland institute of technology hired you to analyze the algorithm given here in pseudocode but as usual prof  nigma neglected to explain what the algorithm does    input a matrix a  n-   n- of integers for i   to n- do  for j  i to n- do  if aij  aji  return false  return true  in the above recall that a matrix is essentially just a two-dimensional array so ai j might in some languages be written as aij   a what does this algorithm do give an english description of what inputs lead to it returning true and what inputs lead to it returning false  you do not need to give examples as part of your answer but you are welcome to include example d arrays along with the english description if it would make your answer clearer   b using summation notation formulas i e  with 's to represent summations give a summation expression for the number of  comparisons that are made by this algorithm in the worst case assuming its input is of the form a  n-   n-  then solve that summation that is find an equivalent simple formula for that expression showing the number of  operations as a function of n  note you may want to do smaller assignment sa before doing this exercise  c based on your answer to exercise b above give the most informative worst-case asymptotic time complexity bound you can for this algorithm using big-o  or  notation   d give the most informative best-case asymptotic time complexity bound you can for this algorithm  note that the summation you solved in exercise b was under worst-case assumptions please think about what would make the best-case time complexity    e give the most informative asymptotic bound you can on the space complexity for this algorithm for the best case i e  using the least space other than that needed for the input and the worst case i e  using the most space other than that needed for the input  your explanation should include your reasoning about whether the best case and worst case for space complexity are the same or different from each other   as usual in cs be sure to give concise convincing explanations for your answers    a problem solving puzzle there are four people who want to cross a bridge all of which begin on the same side  they have  minutes to get to the other side  as is common in these kinds of puzzles however there's a catch  because the bridge is old and weakened by time a maximum of two people can cross the bridge at one time  moreover it's night time and they have one only one  flashlight  any time people cross whether one person or two people they must have the flashlight with them and the flashlight must be walked back and forth over the bridge it can't e g  be thrown from one side to the other   person  takes  minute to cross the bridge person  takes  minutes person  takes  minutes and person  takes  minutes  if a pair crosses the bridge together they must walk together at the pace of the slower person   can all four of them get to the other side in  minutes if so how if not why not be sure to explain your answer  note a popular algorithms textbook notes that according to a rumor on the in- ternet interviewers at a well-known software company located near seattle have given this problem to interviewees  important for this exercise explain the full thought process by which you arrived at your answer or if you aren't able to find a full answer explain the thought process as far as you get with your reasoning  this exercise is intended to give practice with thinking through a problem and clearly expressing the design process for your solution  for example one might say first we thought about sending blah blah blah but we then realized blah blah blah  then to address that we thought blah blah blah but that didn't work because of blah blah blah  because of that we         please try to avoid using the word blah in your answer  if you have any questions about what's being asked please feel free to ask your prof  this is a classic puzzle i hope you have some fun with it    