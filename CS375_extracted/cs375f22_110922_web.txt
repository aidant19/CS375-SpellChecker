CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Notes regarding these slides for Nov    I was ill and needed to miss class on Nov   I am sorry about that inconvenienceits not a deci sion I made lightly  Dale Skrien very generously agreed to cover class for methank you Dale  These are some slides I was prepared to use if I had been there  I gave them to Dale as an overview of what he coul d cover  These notes do not perfectly match what happened in class   But I think they might still be a useful accompan iment to our Nov  class meeting so Im posting them anyway  I hope theyre useful for you  As always please be in touch with questions CS   Time Complexity of Remove first occurrence of an element  How would you analyze the time complexity of this algorithm Functions on LLists firstL returns first  restL returns rest  consvL creates new LList with v as first and L as rest Assume all of these functions are Othey would be in most implementations Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstLLLRemoveirestL This is something we havent done before Lets think it through We analyze complexity as a function of input size as usual Lets let nstand for input size and Tn stand for time complexity on input of size nWe need to figure out what Tn is What foundati ons or definitions can we follow Zen principles to help us Well its recursive  So lets look at the base case and recursive case sepa rately CS   Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  In the base case what is the input size                                                     and what is the runtime of the algo Recall that firstL restL consvLfunctions are all O Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  In the base case what is the input size                                                     and what is the runtime of the algo Recall that firstL restL consvLfunctions are all O Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL Base case Input size empty list n   Runtime  do you see why CS   Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  In the base case what is the input size                                                     and what is the runtime of the algo Recall that firstL restL consvLfunctions are all O Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL Base case Input size empty list n   Runtime  do you see why So wed say T   to express the base case runtime Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  Base case T    How about the recursive case What is the input si ze and runtime Algorithm LLRemovei L if i  firstL return restL else return consfirstL LLRemoveirestL Recursive case We say input is size n as usualL has n elements Also It does some work other than the recursive callcomb ined  do you see why All of its other runtime is in its recursive call How would we represent th e runtime of that particular recursive call Lets just focus on the recursive case for now CS   Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  Base case T    How about the recursive case What is the input si ze and runtime Algorithm LLRemovei L if i  firstL return restL else return consfirstL LLRemoveirestL Recursive case We say input is size n as usualL has n elements Also It does some work other than the recursive callcomb ined  do you see why All of its other runtime is in its recursive call Input size to recursive call n a list of  less element than L do you see why How do we express the runtime of that call Use our definition of T Lets just focus on the recursive case for now Recurrences for Time Complexity of Recursive Functions  As an example of analyzing time complexity of recu rsive functions lets stay with LLRemove  Complexity of function of input size nDefinition  Let Tn stand for runtime of LLRemove on list of size n  Now we figure out what is Tn  Because LLRemove is recursive lets                                                look at the base case  recursive cases  Base case T    Recursive case Tn  Tn   Algorithm LLRemovei L if i  firstL return restL else return consfirstL LLRemoveirestL This may look unusualand recursivebut it follows cleanly from the previous slide In the recursive case It does some work other than the recursive callcomb ined  do you see why All of its other runtime is in its recursive call Tn Lets just focus on the recursive case for now CS   Recurrences for Time Complexity of Recursive Functions  Putting all the pieces together so fartheres more coming up Lets put the pieces together For n   T   For n   Tn  Tn   That is a full definition of the complexity of this algorithm  both the base case and the recursive case Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstLLLRemoveirestL Lets let nstand for input size and Tn stand for time complexity on input of size nWe need to figure out what Tn is lets look at the base case and recursive case separately The base case prev slide is T   Whats the complexity in the recursive case  Tn  Tn   The time taken by everything but the recursive call is just  do you see why  and the recursive call is on input of size n So by our definition of function T  complexity of the recursive call is Tn Do you see how this characterization of Tn exactly fits our LLRemoveL algoSolving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  Note that it follows good design principles for re cursive definitions  It has a base case  Its recursive case is defined in terms of itself on smaller inputs  Indeed the two parts together are a complete definition of the runtime  But were not done yet Whats the asymptotic complexity of LLRemove For n   T   For n   Tn  Tn  Algorithm LLRemovei L  see specification on prev slide if L    return L else if i  firstL return restL else return consfirstL LLRemoveirestL CS   Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  To find the asymptotic complexity represented by t his recurrence we need to solve itcome up with a closed nonrecursive form for Tn   Lets try unwinding the recurrenceplugging in the definition on successively smaller arguments For n   T   For n   Tn  Tn  We know Tn  Tn  thats in the definition But we similarly know from the definition what Tn is what is it Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  To find the asymptotic complexity represented by t his recurrence we need to solve itcome up with a closed nonrecursive form for Tn   Lets try unwinding the recurrenceplugging in the definition on successively smaller arguments For n   T   For n   Tn  Tn  Tn  Tn     What does Tn equal according to the recursive case of the definition of the recurrence above CS   Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  To find the asymptotic complexity represented by t his recurrence we need to solve itcome up with a closed nonrecursive form for Tn   Lets try unwinding the recurrenceplugging in the definition on successively smaller arguments For n   T   For n   Tn  Tn  Tn  Tn    Tn      Tn      In this step we replaced Tn with its definitio n from the recursive case from above Tn  Tn  Next step well continue unwinding by replacing Tn Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  To find the asymptotic complexity represented by t his recurrence we need to solve itcome up with a closed nonrecursive form for Tn   Lets try unwinding the recurrenceplugging in the definition on successively smaller arguments For n   T   For n   Tn  Tn  Tn  Tn    Tn      Tn    Tn       Tn      Do you see a pattern In general unwinding stops at the base case of the  definition of Tn When will this recurrences unwinding reach its bas e case CS   Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  To find the asymptotic complexity represented by t his recurrence we need to solve itcome up with a closed nonrecursive form for Tn   Lets try unwinding the recurrenceplugging in the definition on successively smaller arguments For n   T   For n   Tn  Tn  Tn  Tn    Tn      Tn     Tn       Tn      T  n    What does this equal Use the base case definition above Solving a Time Complexity Recurrence  Lets focus on our definition of runtime function Tn and how to use it  Important vocabulary  We say this definition of Tn is a recurrence it defines Tn in terms of itself  To find the asymptotic complexity represented by t his recurrence we need to solve itcome up with a closed nonrecursive form for Tn   Lets try unwinding the recurrenceplugging in the definition on successively smaller arguments For n   T   For n   Tn  Tn  Tn  Tn    Tn      Tn     Tn       Tn      T  n     n   n So LLRemove is a Tn  n algorithmsolved CS   Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Lets start with the base case What is the input s ize in the base case for this Mergesort algo and what is runtime on that  input CS   Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Base case p  r When p  r input size is  T   Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Recursive case Let n stand for the input size r p Tn   What work is done in the recursive case Recall th at Merge is n CS   Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Recursive case Let n stand for the input size r p Tn   recursive calls  Merge n  other stuff on lines    What work is done in the recursive case Recall th at Merge is n Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Recursive case Let n stand for the input size r p Tn   recursive calls  Merge n  other stuff on lines      recursive calls  nWere not done yet How much work is done in the  recursive calls CS   Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Recursive case Let n stand for the input size r p Tn   recursive calls  Merge n other stuff on lines      recursive calls  n Well simplify by assuming each recursive call is o n input size n Well use our definition of T to express the runt ime of each recursive call Time Complexity of Mergesortusing Recurrences  Mergesort is a classic recursive algo and recurrences are an essential technique for time complexity analysis  What would a recurrence be that represents the time complexity of MergesortSo lets define runtime function Tn as a recurrence for MergesortRecall that recurrences Give a base case for Tn Give a recursive case for Tn Are solved to get asymptotic complexity for the recursive algo Recursive case Let n stand for the input size r p Tn   recursive calls  Merge n other stuff on lines      Tn  n Well simplify by assuming each recursive call is o n input size n Well use our definition of T to express the runt ime of each recursive call CS   Time Complexity of Mergesortusing Recurrences  Lets put all the pieces together Lets put the pieces together For n   T   For n   Tn  Tn  n That is a full definition of the complexity of this algorithm  both the base case and the recursive case Lets let nstand for input size and Tn stand for time complexity on input of size nWe need to figure out what Tn is lets look at the base case and recursive case separately The base case prev slide is T   Whats the complexity in the recursive case  Tn  Tn  n The time taken by everything but the  recursive calls is n do you see why  and we simplify and say each recursive call is on input of size n So by our definition of function T  complexity of each recursive call is Tn Do you see how this Tn exactly fits our MergeSort algoCS   Solving Recurrences  Well cover three common techniques for solving recurrencesie getting  or O bounds on the solution Unwinding or backward substitution  Unroll the recurrence until it reaches a base case then count  analyze the cost represented Recursiontree method  Represent costs as nodes in a tree and analyze total cost Master method  Solve recurrences of the form Tn  aTnb  fn We already did an example of unwinding and well do another one soon Unwinding  An example Solve Tn  Tn  n This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow This is a simplified version of the recursive case of our recurrence for Mergesort but its close enough to capture the algos time complexity We already know what the answer is Do you remember the complexity of Mergesort Lets go through the steps of solving it by unwindi ng CS   Unwinding  An example Solve Tn  Tn  n Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n  By that same definition Tn  Tn  n   Tn  n  So by plugging that in Tn  Tn  n   n  What would the next steps be in this unwinding p rocess  Where would it stop This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow What information is missing from this recurrence w hich we will need to be able to solve it Unwinding  An example Solve Tn  Tn  n Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n What information is missing from this recurrence w hich we will need to be able to solve it Tn Tn Tn Tn  Tn  n  Tn  n  Tn  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n     Do you see a pattern here And when does this unwin ding end This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow CS   Unwinding  An example Solve Tn  Tn  n  For a base case lets use T   or  if we want Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n Tn Tn Tn Tn  Tn  n  Tn  n  Tn  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n             kk kkTn Tn Tn Tn kk kk  kn   kn   kn   kn     The kth step shown here illustrates the pattern that holds for any relevant k It can help with our analysis to show this in our work This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow Unwinding  An example Solve Tn  Tn  n  For a base case lets use T   or  if we want Unwind the recurrence by plugging in the definition on successively smaller arguments  From the definition Tn  Tn  n Tn Tn Tn Tn  Tn  n  Tn  n  Tn  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n  Tn  n  n  Tn  n             kk kkTn Tn Tn Tn kk kk  kn   kn   kn   kn      nT  lg nn  nT  lg nn  nT  lg nn  nT  lg nn     n lg n The lg n term comes because the recurrence unwinds lg n times before hitting the base case do you see why This name may make it sound more relaxing than it actually is but as methods for solving recurrences go its pretty mellow CS   Recursion Trees An Overview  Recursion trees can represent how a recursive algorithm  Breaks input down into recursive calls on subprob lems  Or equivalently  combines recursive calls into a solution on the o riginal problem  Heres an example from CLRS Mergesort  Each node shows input size at that level of recursive calls  Here original input size  breaks into subproblems of size  etc This example shows the recursion going up the treecombining solutions Note that the input sizes at each node would be the same for the recursion going down the tree breaking into subproblems CS   Recursion Trees For Solving TimeComplexity Recurrences  When using recursion trees to solve for time complexity though we dont need quite that much information  We do need the structure showing how the algo divides and  recombines its inputs  We do need the input size at each node  We do not need details about exactly what the input is at each node  What we need for each node of the tree  Input size at each node  A way to represent the work done ie the runtim e at that node of the tree not including any other work done above or below i t Recall Asymptotic complexity is in terms of input size n not individual inputs of a given size Lets do an example RecursionTree Method  An example Mergesort Tn  n    T n if  nTn sorting both halves       nmerging otherwise      Whats the cost at each treelevel ie not counting levels below it Whats the recursion tree structure CS   RecursionTree Method  An example Mergesort Tn  n    T n if  nTn sorting both halves       nmerging otherwise      Whats the cost at each treelevel ie not counting levels below it Whats the recursion tree structure Set up a tree to total up the work done by the algorithm Tree structure for complexity analysis corresponds to tree of recursive calls by the algorithm Total work by the algorithm Sum of work at all lev els of the tree RecursionTree Method  An example Mergesort Tn Tn  Tn Tn  Tn  Tn  Tn T  T  T  T  T  T  T  T nTn   kn n k n   kn        log nn log n    T n if  nTn sorting both halves       nmerging otherwise      Recursion tree for algorithm Total work done 