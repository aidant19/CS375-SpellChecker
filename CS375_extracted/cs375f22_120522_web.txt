CS   CS   Analysis of Algorithms Professor Eric Aaron Lecture  M W pm Lecture Meeting Location Davis  Business  PS due Dec   PS SA SA returned  PS SA grading update  Project  due pm Monday Dec  Important admin notes  Change to syllabus To be counted for credit all PSs and SAs including revisions must be submitted by pm Sunday Dec  extended from Dec   Final TA hours of semester Thursday Dec   Likely additions to our schedule not yet confirmed  Makeup lecture Friday Dec  at pm more abou t that soon  Office hours Monday Dec  am more bout tha t soon CS   Bottomup Computation of Optimal LCS Value  Need mbyn matrix C to store lengths  To compute Cij need values of Cij when  x i yj and Ci j and Ci j when x iyjLCSX Y  input sequences X Y   m  lengthX   n  lengthY   for i   to m do  Ci       in first col of each row   for j   to n  do  C j     in first row of each col   for i   to m do       for j   to n do     process row by row            if xi yjthen Ci j  Ci j              else Ci j  max Ci j Ci j   return Cm n What is the optimal lengththe length of an LCS of full sequences  X and Y What is the time complexity of this algorithm Actually mbyn to include the  case too Recall our recursive definition    Base case Cj   and Ci   for all i j Recursive  step to compute Cij for ij    If xi yj Cij  Cij   If xi  yj Cij  maxCij Cij Bottomup Computation of An Optimal LCS  To find an LCS also store which symbols indices of symbols are actually part of the LCS as its being built  ie  which table elements have optimal subprobl em values  if x i y j  answer came from the upper left diagonal of curr ent element  if x iyjthe answer came from above or to the left whicheve r is larger if equal we can choose above by convention LCSX Y   m  lengthX   n  lengthY   for i   to m do  Ci     for j   to n  do  C j    for i   to m do       for j   to n do  if xi y j then Ci j  Ci j    Bi j  UpLeft      else  if Ci   j   Ci j   then  Ci j  Ci   j             Bi j  Up one less elt of X  else Ci  j  Ci j    Bi j  Left one less elt of Y ie one less elt of both X and Y ie  either X or Y CS    LCS example LCS of X  ABCBDAB and Y  BDCABA The algorithm finds an LCS BCBA Are there others CS   A few kinds of graph problems  Graph representations are very useful and broadly  applicable  Examples Robot navigation  inspection problems Patrol  Team of robots repeatedly inspects all critical p oints on a map eg locations of valuable items to check for intruder s or other problems Boundary coverage  Team of robots completely inspects the boundaries  of all items in a Dmapped environment Pursuitevasion  Team of robots corners  captures intruders that are trying to avoid capture Map visitation  Team of robots visits every critical point on a m ap  Typically a map underlies these problems  solutions and that map is represented by a graph Map Visitation Problem MVP  There are multiple variations on the MVP but wel l look at the multirobot  multidepot MVP  Optimization problem Fastest way for a team of ro bots starting from a collection of depot locations on a map to visit al l nodes on that map  MVP looks at this as How do we make sure that the  last node visited is visited as soon as possibleto get information about  every node as soon as possible Note This isnt the same as say minimizing total distance traveled by all robots combinedits a different metric for o ptimization Properties of map  robots for MVP  Each robot starts at a specified depot  Navigation on the map is precomputed not figure d out by the robot as it moves  A solution to MVP means at least one robot visits  each point on the map    robots start here Example CS   Map Visitation Problem MVP  So youre at your job and your supervisor tells you to write an efficient polytime algo to solve the MVP in the general ca se not just special cases of it What do you do Input Integer knumber of robots weighted undirected graph G  VE map for visitation   depots Dv   vkstarting points for each robot Output Minmax length of the paths for visiting al l nodes in G given starting depots D   robots start here Example How would you go about trying to solve the MVP Any ideas Map Visitation Problem MVP  So youre at your job and your supervisor tells you to write an efficient polytime algo to solve the MVP in the general ca se not just special cases of it What do you do Multiple choice  Use a minimumspanning tree approach  Use an allpairs shortest paths approach  Have a long conversation with your supervisor abo ut wasting your time Input Integer knumber of robots weighted undirected graph G  VE map for visitation   depots Dv   vkstarting points for each robot Output Minmax length of the paths for visiting al l nodes in G given starting depots D   robots start here Example CS   Map Visitation Problem MVP  So youre at your job and your supervisor tells you to write an efficient polytime algo to solve the MVP in the general ca se not just special cases of it What do you do Multiple choice  Use a minimumspanning tree approach  Use an allpairs shortest paths approach  Have a long conversation with your supervisor abo ut wasting better uses of your time Input Integer knumber of robots weighted undirected graph G  VE map for visitation   depots Dv   vkstarting points for each robot Output Minmax length of the paths for visiting al l nodes in G given starting depots D   robots start here Example Options  and  wont work But before you do option  you should know youre right Headlines Coming Up on CSWhats the fastest sorting algorithm  Is it quicksort  The answer might surprise you Or it might not All the hottest fashion trends for programmers most important complexity classes for programmers  With essential algos from each one Common myths about recursion debunked  Some of the answers here actually might surprise you How to make an algorithm not just a little faster but a lot faster Could your next problem be NPComplete And how would you know Plus language  NLP applications  a little peek into what a compiler  interpreter does and more Have you heard of NPCompleteness before What do you know about it CS   Review Subroutines  An algorithm that solves a problem can be used as a subroutine in another algorithm  Key to using subroutines Understanding the specif ications of the problems being solved  Example Subroutine solving Merge problem  Input Arrays A  x   xm and A  y   yn of numbers in sorted order  Output Array N  n   nmn  of numbers in sorted order combining all of x   xmand y   yninto N  How could we use a Merge subroutine to create a sorting algorithm Problem specs given as input  output descriptions Review Subroutines and Reductions  In generaland in these specific exampleskey to using a subroutine is to meet its specifications  Structure your algorithm to give subroutine the pr oper input  Structure your algorithm to use subroutines outpu t to solve the original problem  In these cases can reduce one problem A to another problem B where theres already a subroutine  algorithm for B  Algorithm that does the reducing can be called a  reduction Example  Mergesort reduced to Merge CS   Subroutines and Time Complexity  In generaland in these specific exampleskey to using a subroutine is to meet its specifications  Structure your algorithm to give subroutine the pr oper input  Structure your algorithm to use subroutines outpu t to solve the original problem  In these cases can reduce one problem A to another problem B where theres already a subroutine  algorithm for B  Algorithm that does the reducing can be called a  reduction Important but maybe obvious note  Complexity of resulting algorithm depends on compl exity of subroutine This is not surprisingthe complexity of every algor ithm depends on the complexity of its parts Im just making tha t point explicit here because well use it again later This slide starts getting into nonreview material 