analysis of algorithms  cs  fall   project   due by pm on monday dec    project  edit distance and dynamic programming  in this assignment you'll work in teams of up to four people to implement a dynamic programming algorithm from a recursive definition with applications to natural language processing nlp   the goals of this project are   to give you practice converting a recursive definition into an iterative dynamic pro-  gramming algorithm   to give you practice implementing both recursive and iterative dynamic programming  methods   to introduce you to edit distance as a concept for nlp applications   to give you practice presenting your algorithms and ideas in a written document and  short video-recorded demo of your work   to give you practice working with other students as a team   a few important notes about this project assignment   all of your implementation in this assignment must be in python or java  please pick  one of those languages and use it for all of your team's coding    restriction on resources to use do not use any outside resources about edit distance as part of this assignment because most of what's available contains information about implementation that you are expected to do yourselves as part of learning about dynamic programming   if you have questions about edit distance please let me know if you're looking for outside resources regarding a particular part of edit distance please ask me and i will try to find something to help with your questions that does not affect your ability to have this project be completely your own work   you are welcome to use outside resources about python or java program- ming in general  it is only edit distance-specific resources that are restricted for this assignment  as always please let me know if you have any questions    the project assignment  here are the parts of this assignment    edit distance your team will be given a recursive definition of edit distance and you will create and implement both top-down recursive and bottom-up iterative dynamic programming algorithms to compute edit distance     spelling correction your team will use your edit distance calculations to create and implement a general-purpose spelling checker and you will demonstrate its effec- tiveness     improvements your team will implement a specialized spell checker with improved performance on cs-specific documents and your team will come up with at least one other way to improve upon your original general-purpose spell checker     presentation of your work along with a write-up document your team will record a short video demo that emphasizes features of your dynamic programming implementation and your improvements to the original algorithm    edit distance  several natural language processing nlp  and computational biology applications rely on metrics of similarity between words or documents genome sequences etc   one common way to measure word similarity is by edit distance a measure of how much work it takes to transform a string s into a string t      definition and examples  for this project we'll consider only three possible operations to transform one string into another  replace replace one character by another  for example cat is transformed to car by  a single replace operation replacing r' with t'   insert insert one character into a string  for example cat is transformed to cart by a  single insert operation inserting r' into the word cat   delete delete one character from a string  for example char is transformed to car by  a single delete operation deleting h' from the word char   the edit distance from string s to string t is defined to be the minimum number of operations required to transform s to t   for example the edit distance from analysis to algorithms is   here's one way of transforming analysis to algorithms in  operations shown below in left-to-right order of acting on string analysis  acknowledgment thanks to prof  amanda stent davis ai institute colby college for helpful con-  versations as part of preparing this project    operation starting string replace n' with l' replace a' with g' replace l' with o' replace y' with r' delete s' insert t' insert h' insert m'  string analysis al alysis alglysis algoysis algor sis algoris algorits algoriths algorithms  there are ways to transform analysis to algorithms in more than  operations but  because  is the minimum possible the edit distance from analysis to algorithms is    this idea of edit distance leads to a recursive definition which is somewhat similar to what we used for the longest common subsequence problem in cs  here's a recursive definition of function editdistances t  giving the edit distance from s to t   base case when s or t are empty the edit distance is the length of the non-empty string transforming the empty string to t would take t insert operations transforming s to the empty string would take s delete operations  thus if we let  stand for the empty string editdistance t   lent  and editdistances   lens   recursive cases if the last symbol in s equals the last symbol in t  no work has to be done transforming that symbol from s into that symbol from t   if we let m stand for lens and n stand for lent  this means when sm    t n   the edit distance from s to t is just the edit distance from s  m   to t   n   i e  all but the last characters of both strings  if sm    t n   however then some work has to be done to address that difference  because we're using three possible operations for transforming strings there are three options for that   replace sm   with t n   and then transform s  m   to t   n    delete sm   and then transform s  m   to t   n   or  insert the last symbol of t onto the end of s and then transform s  m  into  t   n     each of these requires  operation plus the remaining transformation and the edit distance will be whichever option requires the minimum number of operations  so for the recursive case editdistances t  is defined as follows recall that s  s  m   and t  t   n    editdistances t     min editdistances  m   t   n   editdistances  m   t   n   editdistances  m   t   n        so to put it all together in one definition   when s or t are empty  editdistance t   lent  and editdistances   lens   if sm    t n    editdistances t   editdistances  m   t   n     if sm    t n    editdistances t     min editdistances  m   t   n   editdistances  m   t   n   editdistances  m   t   n     that is our full definition of editdistance with the first two equations being base cases and the last two being recursive cases for when s and t are both non-empty     implement edit distance  working from that recursive definition of edit distance create algorithms for two versions of a function to compute the edit distance of two input words   a straightforward top-down recursive implementation and   a bottom-up iterative dynamic programming implementation   in addition implement those two algorithms in your team's programming language of choice python or java  analyze the time complexity of the two versions using empirical complexity measures from actual runs of your code as well as asymtotic complexity analyses to describe differences between the versions' runtime efficiencies   for asymptotic complexity analysis of your recursive version be sure to present and explain a recurrence that describes the runtime of the function  although you are not required to analyze it to arrive at a  bound to get a good grade on this project you might choose to attempt to do so to show greater depth and command of relevant concepts  as always on cs project assignments showing depth and command of related concepts will be considered as part of your grade   hint if you are going to try analyzing your recurrence to get a  bound try setting up a recursion tree  it may be challenging to solve it using only the techniques on which we primarily focused in cs but you may be able to analyze the tree to get a lower bound  and an upper bound big-o on the overall complexity which may help  consider the number of levels in the tree for the worst case what's the smallest number of levels it could be what's the largest how can you use that information along with some summation formulas we've seen this semester to come up with asymptotic complexity bounds  to analyze the asymptotic complexity of your iterative version standard methods will probably be helpful  for empirical data about runtime feel free to use whatever methods you think would be most helpful perhaps including language-specific tools to help analyze actual time spent running by the implementation be sure to run your implementations on large    enough examples to demonstrate that difference in time efficiency  the scowl dictionary for use in section  below may be more than sufficient  present the algorithms for these two implementations of edit distance in your write-up along with your analyses of efficiency and your explanations of how the algorithms correctly implement the definition of edit distance   you will also submit the code of your implementations as described in section  be- low which must be fully commented and easily readable with overall good style  your code should be straightforward implementations of your algorithms a reader should immediately see how the code follows directly from the pseudocode  if there are any essential implemen- tation details to include you may describe those in your write-up as well as in comments in your code but ideally the code should follow from pseudocode straightforwardly and not require such extra documentation  in general for all code in this project if code isn't easily readable or if it is not easily understandable as a straightforward implementation of your algorithms it will not earn full credit   note you do not need to use specifications formal loop invariants or inductive ar- guments to explain the structure of your algorithms or code the intention is for these explanations to less formal rather than a structured correcntess argument although if you find that doing so makes your explanation clearer you are welcome to do so  as always clarity is essential for good explanations   spelling correction  one nlp application built upon edit distance is spelling correction a program reads through a body of text and word by word suggests possible alternates for words that may be mis- spelled  you've probably used spell checkers before they can start out with a dictionary i e  a word list which can be in a separate file of known words that they consider correctly spelled and then as they read through some text for each word they encounter that isn't in the dictionary they suggest words that are in the dictionary and have similar spellings   that's where edit distance comes in upon encountering some word w that's not in the dictionary edit distance is used to determine words in the dictionary that are similar to w to suggest as alternates  you'll come up with an algorithm to do that spell checking and then you'll implement your algorithm in a working spell checker test it and describe your results in a way that illustrate both the strengths and limitations of your spell checker    your spelling correction algorithm  in your write-up for this project give an algorithm that meets the following specifications  input a string of text t  consisting of the words to be spell checked and a dictionary word list d of correctly spelled words  output for each word w in t that does not occur in d  words in d with minimal edit distance from w i e   suggestions for a corrected spelling of w which must be the  words with minimal edit distance from s in case of ties for least edit distance from s the algorithm can pick any of them with that minimal edit distance  to be clear your alorithm should provide output for every word in t that's not in d     once you have your algorithm implement and test it reporting results of the tests to il- lustrate the effectiveness and limitations of your algorithm  for this part of the project your algorithm and code should use your iterative dynamic programming edit distance im- plementation written for section   without re-describing or re-implementing it and go linearly  exhaustively through dictionary d in a brute-force manner  you do not need to do anything other than such a linear  exhaustive search approach for any part of this project although if you do something else as part of making improvments to your algorithm or your implementation that should be presented as part of your work for section  below  for the dictionary d for your general-purpose spell checker use the spell checking ori- ented word lists scowl which can be downloaded from the cs project assignments website or from  httpssourceforge netprojectswordlist  for this project please download and use the us wordlist just to make sure work is stan- dardised across all teams submitting this assignment  it might be fun to explore the other english-language wordlists available there but that won't be part of this project when you download and unzip the zipped folder one of the files will be en us-large txt please look at it and you'll find it's a long list of words which you should take as correctly spelled for purposes of this assignment   your write-up for the project should include your algorithm in psuedocode an english description of how it works an asymptotic complexity analysis and a correctness argument as usual  as part of the project you will also submit your code fully commented easily readable and in good style but do not include it in the write-up  the write-up should be self-contained and fully explain the algorithm also including illustrative examples of how it works i e  tests of your implementation showing its effectiveness and its limitations if the write-up is not self-contained and i need to look at your code to understand your algorithm or its correctness  complexity you will not receive full credit on this part of this project  cs is after all an algorithms class    improve spell-checking performance  there may be several different ways to improve the performance of your spelling correction algorithm or implementation and for this part of the project you'll create and present at least two of them one will be using a domain-specific dictionary the other will be your team's choice  as always improvements that demonstrate greater depth and command of relevant con- cepts will earn a higher grade  if you'd like to discuss your team's proposed improvements with me i'll be happy to meet with you please contact me as early as possible in your process    use a domain-specific dictionary  the scowl dictionaries are general-purpose word lists but for particular application do- mains spell-checking performance can be improved by incorporating domain-specific knowl- edge and tools  one straightforward way to do this is to create a domian-specific dictionary to use alongside a general-purpose one  for this part of the project improve performance on cs-specific documents by doing the following     create a cs-specific word list  dictionary file derived from course lecture notes course assignments and the course textbook using whatever methods you'd like  be sure that your cs-specific dictionary will be sufficient to let you demonstrate credit- worthy improvements in performance   once you've created your cs-specific dictionary use it with your spell checker code to find and correct errors in spelling or diction in this project assignment document there are some  and they're all put there on purpose       no really they are in addition do spell checking on this project assignment document using your algorithm from section   with only the scowl word list and compare that to the performance of your algorithm with your domain-specific dictionary    come up with one or more other examples of spell checking cs-related material to demonstrate your improvements  for cs-specific material you can use your own submitted hw files lecture notes passages from the textbook course assignments or other sources you choose or you can take such sources and modify them specifically to demonstrate your improvements but please make sure they're cs-specific and be sure to say where they're from in your write-up   in your write-up present examples and data that will convince a reader that your work has indeed improved spelling correction for cs-specific documents please use whatever metrics you think will be most effective to demonstrate the improvement  for the particular task of finding misspelled words in this document please present your work so that readers can fully understand your process and replicate your results this will include fully but concisely describing the process by which you took text from this document for spell checking and presenting all of the output from your spelling checker i e  all the misspellings your algorithm found along with all the alternate words suggested for spelling correction     your team's choice  create and present at least one other improvement to your original general-purpose spell checker  one way to do this is to pick another domain of your choice and improve its performance on text that's specific to that domain you are welcome to do this by creating another domain-specific dictionary and following the same general procedure as in section   above although doing something too similar to that in section   will not demonstrate as much depth or command of concepts as if something more novel were at least considered as part of your work   you are welcome to come up with other ways to improve your original spell checker too you might consider modifying your algorithm using other auxiliary word lists  dictionaries or data structures or other approaches  the choice is yours i encourage your team to consult with me early in your process about options you're considering however in case i can offer perspective that will be helpful for you   for whatever improvements your team elects to implement your write-up should de- scribe them clearly and present examples and data that demonstrate the extent of your improvements  any new or modified algorithms should be presented with pseudocode an english description and brief correctness and complexity arguments if the changes from previous algorithms are deep enough to warrant new correctness  complexity analyses  any auxiliary files used including new dictionaries  word lists should be included as separate files when submitting your work as noted in section  below      present your work a demo  for project  you were part of a team that gave a presentation  minutes in length  for project  you were part of a team that gave a presentation  minutes in length  it's important to be able to give presentations of varying lengths to present your ideas to different audiences in different contexts  for this project your team will give a demo of your work in a video recording that is  minutes in length  for full credit your team must record an effective demo lasting between  minutes anything outside that range may not receive full credit  meeting these time constraints may require planning please feel free to ask me questions early in your process about what to include in your demo  for this demo you should assume that your audience is me  or equivalently someone with extensive background knowledge who wants to confirm the high quality of your work  i know what edit distance is and what the recursive definition is that you were given but i want to verify that your team understands what you've done with it  i want to confirm that your implementations work correctly and efficiently but for full credit i only want to be shown algorithm-level details not implementation-level details  i want to make sure your team understands the strengths and limitations of your implementations and i want to make sure i don't miss any of the coolness demonstrated in your improvements  your demo should include at least the following    a description and demonstration of your iterative dynamic programming spell-check algorithm along with its time complexity and a comparison of its performance to the recursive spell-check algorithm  you may not have time to include a full complexity argument in the demo but at least say what its complexity is give a one-sentence-long description of the key to its complexity analysis e g  it has a single loop that goes through the input doing constant work each iteration so it's a linear algorithm  and present some data showing that it's better i hope than the recursive version     a description and demonstration of your cs-specific dictionary and your applica-  tions of it     a description and demonstration of at least one other improvement   your team should choose what to include to make the demo as effective as possible within the available time  this is not a standard technical presentation and you do not need to have slides but it might be helpful to do so to present your ideas and the strengths of your work in a form that's easy to understand in  minutes  you could instead choose to show your code running in real time explaining it as it runs or you could combine those two approaches interleaving some of both  your team should decide the most effective way for you to present your work in a short demo   as with previous projects ideally the entire team would learn about all parts of the topic being presented and workload would be balanced  for this demo your presentation should consist of each team member presenting for a single shift of  minutes in duration followed by a different teammate  presentations not following this structure may not receive full credit for this assignment  if there are questions about what's expected in terms of the division among teammates of time spent presenting please let me know  the default expectation is that you will record your demo as a screen recording in zoom  if you believe another option would be better for your team please see me about it as soon as possible    your write-up document in addition to the demo presentation itself your team will create an accompanying write-up document which should enable me to fully understand the work done for this project even if i do not see your demo  this document must be typed submitted in pdf and contain all important algorithmic details  it should contain at least the minimum needed for a presentation of your algorithms for this project   pseudocode and english descriptions of every algorithm including separate pseudocode  english descriptions for each improvement that involves new or modified algorithms  as part of this give brief descriptions of domain-specific dictionaries or other auxiliary files created for your improvements enough for readers to understand their impact on your tests  demo results    concise and convincing high-level correctness arguments and complexity analyses of  your algorithms    for the your team's choice improvement include  sentences about how your  team came up with the ideas behind that improvement    for each implementation the results of testing showing that your algorithms and imple- mentations work as intended  if an implementation does not follow straightforwardly from the pseudocode description of an algorithm please explain that in the relevant part of your write-up  hopefully however this situation will not occur in your work  overall please include everything needed to concisely demonstrate your command of rele- vant techniques and concepts including recursive design dynamic programming and iter- ative bottom-up algorithms effective domain-specific spell checking and anything relating to your chosen improvments  including relevant examples can be especially helpful in com- municating your work  ideally your write-up should demonstrate that you understand the strengths and limitations of your algorithms and implementations if you choose to include results of testing that illustrate this that could improve the effectiveness of your write-up  in addition consider that whatever results of testing you include in your video demo are probably important for understanding your work so you may want to include them in your write-up as well your write-up may also allow you to include additional examples however that time constraints prohibit you from including in your demo   overall as with previous projects more credit will be given to submissions that demon- strate greater scope of work completed within the constraints of the project assignment greater depth of insight in the work completed and more correct and effective presentations of the work  as would be expected this will partly depend on the effectiveness of your algo- rithms your analyses your demo and your write-up  please keep your write-up as concise as it can be while still containing all relevant information write-ups that are much too long or too short are not maximally effective and may not receive full credit  as always please feel free to ask me questions about what to include in your write-up     submission instructions  deadline pm dec   a designated submitter from each team should submit the following items by emailing them to me eaaroncolby edu   a file containing all of the code of your implementations for this project along with thorough instructions on how to run your code in case readers  graders want to independently valdiate your results  for full credit readers  graders must be able to easily run your code after reading your instructions  please feel free to ask me any questions about this this is not intended to be a code-heavy project it is focused on algorithms and explanations so to save readers  graders the trouble of needing to switch among multiple small files to read and understand your code please put all of it in a single file called cs proj code team initials java or  py  this may be somewhat non-standard for file-naming but it will be helpful in this context    individual files created for your improvements including your cs-specific dictio- nary  please give each file a helpful descriptive filename with your team's initials in each filename    a pdf file with all of the slides used for the demo if any  please put two slides per  page as is done for cs course lecture notes and name the file cs proj slides team initials pdf    your write-up document containing your algorithms analyses and other content as  specified above  this should be a pdf file called cs proj writeup team initials pdf    a video file or link to it of your demo  please put it in your google drive space if  it's too large to simply include in an email  please name the file cs proj demo team initials mp  as usual initials is to e replaced by the initials of the team members in the group in the team assignments  e g  if eric aaron and stephanie taylor were the teammates a file from that team would be called cs proj slides team ea st pdf  note the preferred mp format  if for any reason you cannot submit an mp video please let me know as soon as possible  lateness policy because we're at the end of the semester it is essential that this project be submitted on time  for this project there will be a deduction of  for submission up to  hours late i e  at any time on dec   which will take us to the end of the last day before exams  work submitted on or after dec   will receive a  deduction please submit your work before dec    as always extenuating circumstances will be considered please contact me as soon as  possible if any extenuating circumstances are impeding your work on this project    