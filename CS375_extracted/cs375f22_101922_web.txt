cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   designing a reduction algorithm   a simple example    sometimes we can design an algo to reduce a problem a to a problem b   such an algorithm is called a reduction  from a to b   a reduction from a to b is a kind of algo that solves a by using a subroutine that solves   b thus reducing a to b   here's a very simple example  consider problems a and b with these specifications  a    input list l  c  cn of numbers   b    input list m  d  dk of numbers    output true if the first element of l is     output true if the last element of m is    false otherwise   false otherwise    what's an algorithm that would solve a using a solution for b as a subroutine  cs --     designing a reduction algorithm   a simple example    sometimes we can design an algo to reduce a problem a to a problem b   such an algorithm is called a reduction  from a to b   a reduction from a to b is a kind of algo that solves a by using a subroutine that solves   b thus reducing a to b   here's a very simple example  consider problems a and b with these specifications  a    input list l  c  cn of numbers   b    input list m  d  dk of numbers    output true if the first element of l is     output true if the last element of m is    false otherwise   false otherwise    what's an algorithm that would solve a using a solution for b as a subroutine  here's one possible reduction from a to b    from input l to a create list m  c   run a subroutine for b on input m  if it returns true your algorithm for a should return true if it   returns false your algorithm for a should return false   can you analyze the complexity and explain the correctness of this reduction algorithm  designing a reduction algorithm   a simple example    sometimes we can design an algo to reduce a problem a to a problem b   such an algorithm is called a reduction  from a to b   a reduction from a to b is a kind of algo that solves a by using a subroutine that solves   b thus reducing a to b   here's a very simple example  consider problems a and b with these specifications  a    input list l  c  cn of numbers   b    input list m  d  dk of numbers    output true if the first element of l is     output true if the last element of m is    false otherwise   false otherwise   you'll be designing a reduction for project  some important notes   this example may be much simpler than the reduction you design  your write-up of your reduction will need to be more detailed than   the notes on the previous slide are    as always please feel free to ask me questions  cs --     business   grading update   sa sa in progress   ps out extended deadline due oct     project  lookahead out   plenty to get started on   first part due oct     please read over instructions and   let me know if there are any questions   the full proj assignment document that i post will be lengthy   it is meant to be a teaching and reference document in places with   many hints and specific examples   i hope you find it useful   please email me with proj teams by end of day today  business project    project  out very soon   multi-stage project with final due date in early november   project  is to be done in teams of    if you'd like my help finding a team for you please let me know   parts of project     design exhaustive search algorithms your team will collectively design   exhaustive search algorithms for  problems     improve time efficiency your team will pick one of the problems and make   your exhaustive search algorithm more efficient     reduction for the same problem chosen for part   above you will reduce that problem to one of the  other seven problems from part       create and give a presentation your team will  present work from the previous three parts of the  assignment using loop invariants where  appropriate to explain correctness   hint your team may  want to be strategic  about which of the   problems you choose to  focus on for your  improvements  reduction and  presentation  pick a  problem for which you  can do good work  cs --     cs --   the green-shaded ones are examples of polynomial time classes upper bounded by nk for  some constant k  problems solvable in polynomial time are considered tractable  more  about this later in the semester  time complexity classes illustrated  complexity class  what we call it  example algorithms  objects  o  olg n  on  constant  log time  linear  on lg n  n lg n  on  on  on  on  print hello world stack operations  and much much more be careful  binary search  exhaustive search of an array linear  search merge as used in mergesort  mergesort heapsort recall sorting can be done in n lg n  insertion  selection  bubble sort  several graph algos  n-squared quadratic  n-cubed cubic  my favorite algorithm a graph algo  exponential  factorial  number of subsets of a set of size n  number of orderings  permutations of  elements of a list of length n  olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorted array  problem  input sorted array a   value v for which to search  output index i such that v  a i    or the special value nil if  v does not appear in a    olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorted array  a quick vocabulary note   divide-and-conquer refers to algorithms that break problems down  into subproblems of the same type  we'll go into this more when we look at recursion recursive algos are often divide-and-conquer  olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorted array  algorithm binsrcha  n-v  problem  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  input sorted array a   value v for which to search  output index i such that v  a i    or the special value nil if  v does not appear in a  cs --     olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorted array  what would a complexity  argument be for this algorithm  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorted array  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  what would a complexity  argument be for this algorithm   how many iterations   through the while loop   how much work done   each iteration  worst case time complexity  olg n  cs --     olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   how could search be made more efficient on a sorted array  what could a loop invariant be for  a correctness argument for  algorithm  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  correctness binary search   binary search how would we explain its correctness  recall the text in this text box from a previous slide to informally use loop invariants to help explain algo correctness  explain how the invariant is true before the first iteration of the loop  explain how the invariant is true after each following iteration  explain how the invariant property shows that the algo meets its specifications  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  what could a loop invariant be for  a correctness argument for  algorithm  one possibility   a is unchanged from original input  v may occur in al  r but not   elsewhere in a  recall problem specifications    input sorted array a value v   output index i such that v  a i  or the   nil if v does not appear in a  cs --     olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrchavlowhigh  problem modified  if low  high return false  else  mid  lowhigh  int division if v  amid return true  input sorted array a   value v for which to search       integers low and high to specify  range of a in which to search  elif v  amid  output true if v is an element of   return binsrchavmidhigh  else  must be v  amid  return binsrchavlowmid-  alow   high  false otherwise  cs --     olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrchavlowhigh  if low  high return false  else  mid  lowhigh  int division if v  amid return true  elif v  amid  return binsrchavmidhigh  else  must be v  amid  return binsrchavlowmid-  what would the initial call to this  function be to find v in all of a  you may have noticed the specification  for this is different from the original  spec'n for the search problem  we could use a wrapper function to  make this work with the original  specification  olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  algorithm binsrchavlowhigh  if low  high return false  else  mid  lowhigh  int division if v  amid return true  elif v  amid  return binsrchavmidhigh  else  must be v  amid  return binsrchavlowmid-  what would the initial call to this  function be to find v in all of a  note it's the same sequence a each  time  copying or altering a with e g   list slicing would take extra time  important the recursive cases  bring the sub-problems closer to  the base case where low  high  cs --     olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   are you familiar with this algorithm   recursion warmup what's a recursive algo for binary search  is the complexity of this  recursive version different  from the complexity of the  iterative version  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  olg n binary search   binary search divide-and-conquer search algorithm on arrays   designed for sorted arrays uses fact that array is sorted for more   efficient algorithm   complexity analysis in the worst case for input a of size n   there are lgn recursive calls and o work each time  algorithm binsrcha  n-v  l   r  n- while l  r do  mid  lr  int division if v  amid  return mid  elif v  amid  l  mid    else  must be v  amid  r  mid -   return nil  worst case time complexity  lg n  are the ideas about  complexity on this slide  new to you  we'll talk much more  about them as the  semester goes along  cs --     cs --     this isn't mergesort it's just the merge algo used in mergesort  see clrs pg    on merge   see clrs page  for specfications  loop invariant  in the function call mergeapqr what are a p q and r  to me one cool thing about this  algo is how effective it can be to do  a constant amount of work for each  element in the input  sorta like with stack operations a  powerful data structure with fast  operations  cs --   this isn't mergesort it's just the merge algo used in mergesort  see clrs pg    on merge   see clrs page  for specfications  loop invariant  in the function call mergeapqr what are a p q and r   how would you explain the time   complexity of this algorithm   what is the algorithm's space   complexity  on lg n mergesort  see clrs pg     mergesort is a classic example of an n lg n algorithm  algo idea repeatedly split input list in half sort each half   separately then merge the two halves together   uses the merge function   as a subroutine   pretty fast algo because   merge is on   pseudocode from clrs    