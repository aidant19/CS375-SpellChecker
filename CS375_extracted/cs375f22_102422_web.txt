 cs --    cs   analysis of algorithms  professor eric aaron  lecture  m w pm  lecture meeting location davis   business   grading update   sa returned   sa in progress   ps due oct     project  first part due today  cs --    business project    project  out due nov     parts of project     design exhaustive search algorithms  your team will collectively design  exhaustive search algorithms for  problems     improve time efficiency  your team will pick one of the problems and make  your exhaustive search algorithm more efficient     reduction  for the same problem chosen for part   above you will reduce that problem to one of the  other seven problems from part      create and give a presentation  your team will  present work from the previous three parts of the  assignment using loop invariants where  appropriate to explain correctness  hint  your team may  want to be strategic  about which of the   problems you choose to  focus on for your  improvements  reduction and  presentation  pick a  problem for which you  can do good work have you read through proj yet  would you have preferred the assignment sheet  to be broken up into separate documents  time complexity classes illustrated  complexity class what we call it example algorithms   objects  o constant print hello world stack operations  and much much more be careful  olg n log time binary search  on linear exhaustive search of an array linear  search merge as used in mergesort on lg n n lg n mergesort heapsort  recall sorting can be done in n lg n  on n-squared quadratic insertion  selection  bubble s ort  several graph algos  on n-cubed cubic my favorite algorithm  a graph algo on exponential number of subsets of a set of size n  on factorial number of orderings  permutations of  elements of a list of length nthe green-shaded ones are examples of polynomial time classes upper bounded by nkfor  some constant k  problems solvable in polynomial time are consider ed tractable  more  about this later in the semester  cs --    on merge   see clrs page  for specfications  loop invariant   in the function call mergeapqr  what are a p q and r to me one cool thing about this  algo is how effective it can be to do  a constant amount of work for each  element in the input  sorta like with stack operations a  powerful data structure with fast  operations  this isn't mergesort it's just the merge algo used in mergesort see clrs pg    on merge   see clrs page  for specfications  loop invariant   in the function call mergeapqr  what are a p q and r how would you explain the time  complexity of this algorithm  what is the algorithm's space  complexity  this isn't mergesort it's just the merge algo used in mergesort see clrs pg    cs --    on lg n mergesort   mergesort is a classic example of an n lg n algorithm   algo idea repeatedly split input list in half sor t each half  separately then merge the two halves together   uses the merge function  as a subroutine   pretty fast algo because  merge is on   pseudocode from clrs  see clrs pg    on lg n mergesort   mergesort is a classic example of an n lg n algorithm   algo idea repeatedly split input list in half sor t each half  separately then merge the two halves together   pseudocode from clrs  see clrs pg    how would we explain the complexity  of this recursive algorithm  we'll get to correctness later in the semester  cs --    on lg n mergesort   mergesort is a classic example of an n lg n algorithm   algo idea repeatedly split input list in half sor t each half  separately then merge the two halves together   pseudocode from clrs  see clrs pg    how would we explain the complexity  of this recursive algorithm  we'll get to correctness later in the semester runtime tn as a recurrence  tn  tn  n  t    solves to tn  n lg n  we'll do much more of this later in  the semester  for now focus more on where the  recurrence came from and how it  represents this algo's runtime  rather than on how to solve it   cs --    hey prof  weren't you gonna talk about  what the fastest sorting algorithm is   different sorting algorithms will perform differen tly on different  inputs so there isn't one that's always optimal     but whatever's implemented in java's collections sort  methods is probably a good choice for a fastest ge neral purpose  sorting algorithm yes  timsort   different sorting algorithms will perform differen tly on different  inputs so there isn't one that's always optimal     but whatever's implemented in java's collections sort  methods is probably a good choice for a fastest ge neral purpose  sorting algorithm   as of java se timsort became java's implemented algorithm for  collections sort   what is timsort  a modified version of mergesort  that runs a version of insertionsort on inputs of s ize    why would it do this and what is the asymptotic co mplexity of this algorithm  cs --    timsort   different sorting algorithms will perform differen tly on different  inputs so there isn't one that's always optimal     but whatever's implemented in java's collections sort  methods is probably a good choice for a fastest ge neral purpose  sorting algorithm   as of java se timsort became java's implemented algorithm for  collections sort   what is timsort  a modified version of mergesort  that runs a version of insertionsort on inputs of s ize    why would it do this and what is the asymptotic co mplexity of this algorithm  asymptotic complexity is on lg n even with using insertion sort do you see why  remember the role of threshold value n in asymptotic complexity  and maybe remember method from our project a modif ied mergesort that did  something different on inputs of size less than its  n    timsort   different sorting algorithms will perform differen tly on different  inputs so there isn't one that's always optimal     but whatever's implemented in java's collections sort  methods is probably a good choice for a fastest ge neral purpose  sorting algorithm   as of java se timsort became java's implemented algorithm for  collections sort   what is timsort  a modified version of mergesort  that runs a version of insertionsort on inputs of s ize    why would it do this and what is the asymptotic co mplexity of this algorithm  asymptotic complexity is on lg n even with using insertion sort do you see why  why would it do this because insertion sort is faster than mergesort on s mall inputs  empirical testing set the value at    there's more to timsort than what's on this slide we won't discuss it in cs but  feel free to look it up and ask me questions if yo u'd like  cs --    common myths about recursion  debunked   what impressions do you have about recursion   here are some things i've heard paraphrased slightly   recursion is basically just a party trick   recursive design is just trial and error   recursion is slow compared to iteration   people don't really use recursion admittedly i've mostly heard them in the context o f a student saying  i used to think this was true but now i don't anym ore  but still i've heard them or something very much l ike them  if there's anything you'd like to add to this list  let me know  cs --    common myths about recursion  debunked   what impressions do you have about recursion   here are some things i've heard paraphrased slightly   recursion is basically just a party trick   recursive design is just trial and error   recursion is slow compared to iteration   people don't really use recursion admittedly i've mostly heard them in the context o f a student saying  i used to think this was true but now i don't anym ore  but still i've heard them or something very much l ike them  if there's anything you'd like to add to this list  let me know it's actually very useful  there are methods to use  people really do it can be very natural to use well sort of  it can be  but it's not as bad as i t used to be  and related concepts can enable some very fast code   a functional digression  the functional programming paradigm  functional programming is a paradigm for structuring code  and accessing data   has been used since late s   languages include lisp scheme scala f clojure  ocaml haskell   also central to javascript r   industry users google facebook twitter att j ane street  wolfram etc  sources below not from personal experience   applications to data science  etc   sources  httpsgithub comreadmefeaturedfunctional-progr amming  httpsgithub comreadmeguidesfunctional-program ming-basics  httpswww janestreet comtechnology httpsreference wolfram comlanguageguidefuncti onalprogramming html  httpsen wikipedia orgwikifunctionalprogrammin g  httpswww smashingmagazine comdont-be-sca red-of-functional-programming  cs --    a functional digression  the functional programming paradigm   some important features of pure functional programming   immutable data   stateless functions everything self-contained  no side effects   uses recursion for iteration rather than loops  supports parallel computation recall applications to data science   code can be easier to show correct  debug  for those of us who like to think about programming  languages at the theory  and design level it may be interesting to note tha t the last three of the above  five features kinda follow from the first two  this is subtle and well beyond the scope of cs but please feel free to  talk with me more about it outside of class if you 'd like  a functional digression  the functional programming paradigm  functional programming is a paradigm for structuring code  and accessing data  why would i use functional programming  when you think about well-structured software you might think about software  that's easy to write  easy to debug  and where a lot of it is reusable   that's  functional programming in a nutshell granted one might argue that it's not as  easy to write  but let's touch on the other two points while you  wrap your mind  around the functional paradigm   once you get used to it it's self-evident  it's cl ear  i look at my function  what can  it work with its arguments  anything else no  are  there any global variables no   other module data no  it's just that   - robert virding co-inventor of erlang  source httpsgithub comreadmeguidesfunctional -programming-basics  author cassidy williams 