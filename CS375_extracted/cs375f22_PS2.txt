Analysis of AlgorithmsCS  Fall Problem Set DueAT THE BEGINNING OF CLASS Monday October For this assignment standard file naming conventions apply Please submit your typewritten answers in a PDF file named CS PSuseridpdf where userid is replaced by your full Colby userid and submit it to your SubmittedWork folder Pleasereach out to me right away with any questions or concerns about thisFrom your textbook CLRS please read Chapters   and  NOTE Somematerial there is more mathematically intense than we needdont worry about thosepartsbut please do read over the parts that give basic ideas behind content coveredin lecture eg O notation functions orders of growth loop invariantsIMPORTANT Some of these exercises may build upon topics covered in our Oct class meeting they are included here early so you can see all of the exercises onthis assignmentPlease recall the essential general style guidelines for writing algorithms in CSincluding restrictions on break and other flowofcontrol statementsas presented onPS Unless otherwise specified they apply for all work in CSA general note for CS When writing up your homework please present youranswers neatly and explain your answers clearly  giving all details needed to makeyour answers easy to understand Graders may not award full credit to incomplete orhard to understand solutions Clear communication isthe point on every assignmentIn general in CS unless explicitly specified otherwise answers should be accompanied by explanations Answers without explanations may not receive full credit Pleasefeel free to ask me any questions about explanations that might come upExercises CLRS Exercise  page with slight modifications  clarificationsAs stated in the CLRS exercise write pseudocode for linear search that meets thegiven specifications Please recall CS instructions not to use break or similarflowofcontrol statements in your algorithmsAs stated in the CLRS exercise give a correctness argument for your pseudocodeusing a loop invariant that you create specifically for that purpose Be sure toclearly state your loop invariantThen follow the three steps shown in lecture notes to help explain the correctnessof your linear search algorithma Give a very short and convincing explanation of how the loop invariant istrue before the first iteration of the loopb Give a concise and convincing explanation of how your pseudocode ensuresthe invariant is true after each successive iteration Refer directly to thepseudocode citing specific lines of pseudocode in your explanationc Give a concise and convincing explanation of how the algorithm meets itsspecifications Refer specifically to both the invariant property and the specifications as part of this explanationreferring to specifications is essentialfor establishing algorithm correctnessYour loop invariant should be created so that it gives helpful information about whatis known to be true when the loop is finishedplease be sure to use that informationin your correctness argument Consider this pseudocode algorithm for the sorting method Selection Sort SelectionSort A   nfori tolengthA  min  i forji tolengthA ifAjAmin min  j  the next  lines swap A i and Amin using a temporary variable temp  A i A i  Amin Amin  tempHeres a proposed loop invariant for the outer forloop in this algorithmSubarray Ai contains the i smallest elements of Ain sorted orderandAin consists of the remaining values of Ano constraint on orderRecall that by convention an array or a sequence for which the specification has a firstindex that is greater than the last such as An n is considered to be emptyWorking with that proposed loop invariant for the outer for loop of SelectionSort follow the three steps shown in lecture notes and in Exercise  to explain the correctness of SelectionSort  Your answers for those three parts do not need to be lengthyanswersa few sentences each could be enough as long as those sentences contain thekey detailsHint For the first of the three parts  a very short and convincing explanation of how the invariant is true before the first iteration of the loop  inthis case note that before the first iteration iis  What can be said aboutsubarray AiAlso recall the specification for the sorting problem  also repeated here for convenienceInput  Sequence of numbers a     a nOutput  Permutation reordering b     b nof the input sequenceperhaps leaving them unchanged such that bb  bnThis specification is the same as the one presented in lecture notes capturing ourintuitions of what it means for a list to be sorted Please see me if there are questionsabout it or about any part of the exerciseAnagrams Prof Ram Sagan at the Portland Institute of Technology which doesnot exist was recently listening to these song lyrics which actually do existMiracles will have their claimersMore will bow to Rome   Lyrics written by Neil Peart From track  on the album Presto  by the band Rush and was suddenly inspired to ask you for help with the Anagrams problemOur definition of an anagram isDefinition  Two strings sandtareanagrams exactly when sis formed fromthe same letters as t used the same number of times as in tFor examples miracles and claimers are anagrams as are more androme But secures is not an anagram of rescueeven though securesuses the same letters as rescue the letters c e r s and uit does not use them the same number of times because secures usess twice and rescue uses s only once Additionally comic is not ananagram of cosmic because the two words do not use exactly the sameletterscosmic uses an s but comic does notUsing that definition here are specifications of the Anagrams problemInput  strings stof lowercase letters from the alphabet for English ie the letters of the Latin  Roman alphabet Assume there are no spaces punctuationcapital letters etc in the stringsonly lowercase letters For complexity analysesletmstand for the length of s and let nstand for the length of tOutput  True if sis an anagram of t False otherwiseTo help Prof Sagan answer the following questionsa What simple check would you do before checking any arrangements of lettersYour answer should be something that is constant time in fact it must be constant time in Java but still very helpful for this problem In what ways wouldit help with all of the algos you give belowb Then give a brute force algorithm to solve this problem that checks all permutations of either sort What is its asymptotic time complexity expressed as a boundc Then give a  n algorithm to solve this problemd Then give a  nlgn algorithm to solve this probleme Then give a  ntime Ospace complexity algorithm to solve this problemHint You may want to use some auxiliary data structures for this algorithmbut youll only need O additional spaceAs is conventional were asking about worst case time complexity unless otherwisespecifiedTo earn full credit be sure to include all of the following for each of the four algorithmsPseudocode accompanied by a brief English explanation of what the algorithmdoesA concise but convincing explanation of correctnessA concise but convincing explanation of its time complexityA concise but convincing explanation of its space complexityPlease be sure to document any important assumptions made or used in your complexity analysesHint You may notice that the complexities of the algorithms above are given asfunctions of only n rather than as functions of both mandn The simple checkas the answer to part a makes it sensible to do this If you dont come up with thatparticular simple check or dont see why these complexities can be given as functionsof only n you are welcome to give a  mn algorithm for part c a  mlgmnlgnalgorithm for part d and a  mntime Ospace algorithm for part e    oreven better you can ask me or a TA for helpOptional ExerciseThe exercise below is one that I think is a good learning experience if youd like todo it Do not submit this exercise It will not be counted for a grade Ifyoure looking for a little more experience with a different take on complexity analysishowever it could be worthwhile for you to work on itand Ill be happy to work withyou on it or answer your questions just let me knowCLRS Exercise  page This exercise asks you to consider an average case time complexity analysis aswell as worstcase analysis Answer all of the questions posed in the exercise notjust the last question involving  notation and as always please give short butconvincing explanations of your answersThe application of average case analysis to this exercise is meant to be relativelyintuitiveplease read the chapter about it pages  and if there are questions about average case analysis please feel free to ask me